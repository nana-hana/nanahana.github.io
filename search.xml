<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式之观察者模式</title>
      <link href="/posts/168b5985/"/>
      <url>/posts/168b5985/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论与数理统计</title>
      <link href="/posts/28d5cef4/"/>
      <url>/posts/28d5cef4/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/probabilityAndStatistics.png"></p><h2 id="概率论的基本概念"><a href="#概率论的基本概念" class="headerlink" title="概率论的基本概念"></a>概率论的基本概念</h2><h3 id="随机试验"><a href="#随机试验" class="headerlink" title="随机试验"></a>随机试验</h3><p>随机试验：$\begin{cases} 在相同条件下可重复。\\结果不止一个。\\无法预测。 \end{cases}$</p><h3 id="样本空间、随机事件"><a href="#样本空间、随机事件" class="headerlink" title="样本空间、随机事件"></a>样本空间、随机事件</h3><ol><li>样本空间：所有基本事件的集合。</li><li>样本点：样本空间的元素。</li><li>$A\subset B$：事件B包含事件A。</li><li>$A\bigcup B=\{x|x∈A 或 x∈B\}$：事件A与事件B的和事件（也可以记为$A+B$），即A，B中至少一个发生，事件$A\bigcup B$发生。</li><li>$A\bigcap B=\{x|x∈A 且 x∈B\}$：事件A与事件B的积事件（也可以记为$AB$），即仅当A，B同时发生时，事件$A\bigcup B$发生。</li><li>$A-B=\{x|x∈A 且 x∈B\}$：事件A与事件B的差事件，即当且仅当A发生、B不发生时，事件$A-B$发生。</li><li>$A\bigcap B=\emptyset$：事件A与B是互不相容的（或互斥的），即事件A与事件B不能同时发生。</li><li>$A\bigcup B=S$且$A\bigcap B=\emptyset$，事件A与事件B互为逆事件（或事件A与事件B互为对立事件），即事件A、B中必有一个发生，且仅有一个发生（A的对立事件记为$\hat{A}$，$\hat{A}=S-A$，S为总事件）。</li></ol><h3 id="频率与概率"><a href="#频率与概率" class="headerlink" title="频率与概率"></a>频率与概率</h3><ol><li>频率：描述了事件发生的频繁程度，即大量实验统计。</li><li>概率：在一次试验中发生的可能性大小的数。频率的稳定值即统计概率。</li><li>公理化：$\begin{cases} 非负性，概率不为负\\规范性，P(S)=1\\可列可加性 \end{cases}$。</li><li>概率性质：$\begin{cases} p(\emptyset)=0。\\P(A_1+A_2+\dots+A_n)=P(A_1)+P(A_2)+\dots+P(A_n)。\\若A\subset B，则P(B-A)=P(B)-P(A)，P(B)≥P(A)。\\对于任一事件A，P(A)≤1。\\对于任一事件A，P(\hat{A})=1-P(A)。\\P(A\bigcup B)=P(A)+P(B)-P(AB)=P(A)+P(B-AB)。  \end{cases}$</li></ol><h3 id="古典概型"><a href="#古典概型" class="headerlink" title="古典概型"></a>古典概型</h3><ol><li>古典概型：$\begin{cases} 样本点个数有限。\\每个基本事件发生的概率相同。 \end{cases}$，也可称为等可能概型。</li><li>$P(A)=\frac{有利样本点}{样本总数}$，例如$\frac{骰子偶数点数3}{总骰子数6}$。</li><li>不重复排列：$\begin{cases}P_n^m=n(n-1)(n-2)\dots(n-m+1)=\frac{n!}{(n-m)!}\\P_n^n=n(n-1)×\dots×3×2×1=n! \end{cases}$。<br>重复排列：$\begin{cases}C_n^m=\frac{P_n^m}{m!}=\frac{n!}{m!(n-m)!}\\C_n^m=C_n^{n-m}\\C_n^0=C_n^n=1 \end{cases}$。</li><li>几何概型：$p(A)=\frac{\mu(G)}{\mu(S)}$，$\mu$表几何区域内的一种度量（如线段中即长度），与古典概型性质唯一不同的在于几何概型拥有完全可加性，古典概型是有限可加性。</li></ol><h3 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h3><ol><li>条件概率：S样本空间，A，B两个事件，其中$P(B)&gt;0$，称$P(A|B)=\frac{P(AB)}{P(B)}$为在事件A发生的条件下事件B发生的条件概率。</li><li>乘法公式：$P(ABC)=P(A)P(B|A)P(C|AB)$，即先发生了A，然后在A发生的条件下发生了B，最后在AB发生的条件下发生了C。n项的话依次类推。</li><li>全概率公式：$A_1,A_2\dots A_n$是E的完备事件组（互不相容，并是S），$P(A_i)&gt;0$，$P(B)=\sum_{i=1}^nP(A_i)P(B|A_i)$。知原因推结果。</li><li>贝叶斯公式：$A_1,A_2\dots A_n$是E的完备事件组，B是任一事件，$P(A_i)&gt;0$，$P(B)&gt;0$，$P(A_k|B)=\frac{P(A_k)P(B|A_k)}{\sum_{i=1}{n}P(A_i)P(B|A_i}=\frac{P(A_kB)}{P(B)}$。知结果推原因。</li></ol><h3 id="独立性"><a href="#独立性" class="headerlink" title="独立性"></a>独立性</h3><ol><li>若$P(A)&gt;0$，$P(B)&gt;0$，$P(A|B)=P(A)$或$P(AB)=P(A)P(B)$，即A的概率不受B发生与否的影响称为独立性。</li><li>若事件A与B相互独立，则A与$\hat{B}$，$\hat{A}$与B，$\hat{A}$与$\hat{B}$都相互独立。</li><li>A，B，C三个事件，若满足等式：$\begin{cases} P(AB)=P(A)P(B)\\P(AC)=P(A)P(C)\\P(BC)=P(B)P(C)\\P(ABC)=P(A)P(B)P(C) \end{cases}$，则事件A，B，C相互独立。</li></ol><h2 id="随机变量及其分布"><a href="#随机变量及其分布" class="headerlink" title="随机变量及其分布"></a>随机变量及其分布</h2><h3 id="随机变量"><a href="#随机变量" class="headerlink" title="随机变量"></a>随机变量</h3><ol><li>在样本空间$S={e}$中，$X=X(e)$每一个样本都对应一个实值单值函数，则称$X=X(e)$为随机变量。</li><li>离散型：有限个或无限可列个。</li><li>连续型（非离散型）：取值一个或多个区间。</li></ol><h3 id="离散型随机变量及其分布律"><a href="#离散型随机变量及其分布律" class="headerlink" title="离散型随机变量及其分布律"></a>离散型随机变量及其分布律</h3><ol><li>离散型随机变量X所有可能取的值为$x_k(k=1,2,\dots)$，X取各个可能值的概率，即事件$\{X=x_k\}$的概率为$P\{X=x_k\}=p_k$。且$p_k≥0$，$\sum_{k=1}^\infty p_k=1$。</li><li>伯努利试验：试验只有A和$\hat{A}$两种可能。</li><li>n重伯努利试验：将伯努利试验重复n次，试验之间彼此独立。</li><li>$(0-1)$分布：随机变量X只能取0与1两个值，其分布律为$P\{X=k\}=p^k(1-p)^{1-k}, k=0,1（0&lt;p&lt;1）$。</li><li>几何分布：设$P(A)=p$，第k次首次发生，即前$k-1$次未发生，则$P\{X=k\}=(1-p)^{k-1}p，k=1,2,3,\dots$，记为$X\sim G(p)$。</li><li>二项分布：即n重伯努利试验，记为$X\sim B(n, p)$。$P(A)=p$，n次试验发生了k次，则$P\{X=k\}=C_n^kp^k(1-p)^{n-k}，k=0,1,\dots,n$。当$n=1$时，二项分布化为$(0-1)$分布。二项分布最可能值：$\begin{cases} (n+1)p不为整数，[(n+1)p]达到最大值。\\(n+1)p是整数，(n+1)p和(n+1)p-1都是最大值。 \end{cases}$</li><li>泊松分布：$P\{X=k\}=\frac{\lambda^ke^{-\lambda}}{k!}，k=0,1,\dots$，其中$\lambda&gt;0$，记为$X\sim P(\lambda)$或$X\sim \pi(\lambda)$。</li><li>超几何分布：不放回抽样试验，N个元素，$N_1$属于第一类，$N_2$属于第二类，取n个，X：n个中属于第一类的个数，$P\{X=k\}=\frac{C_{N_1}^kC_{N_2}^{n-k}}{C_N^n}$，$k=0,1,\dots,min{n,N_1}$。</li><li>不放回抽样实验，当N很大，n相对于N很小时，可以当作放回抽样试验。$P=\frac{M}{N}$改变小，即$\frac{n}{N}$小（N总数，M样本数），则$P=\{X=k\}=\frac{C_M^kC_{N-M}^{n-k}}{C_N^n}\approx C_n^kP^k(1-p)^{n-k}$。</li></ol><h3 id="随机变量的分布函数"><a href="#随机变量的分布函数" class="headerlink" title="随机变量的分布函数"></a>随机变量的分布函数</h3><ol><li>$F(x)=P\{X≤x\}(-\infty＜x＜\infty)$，称为X的分布函数（对于离散型，连续型都成立）。</li><li>$F(x)$是一个不减函数（或增或保持不变）；$0≤F(x)≤1$,即$F(-\infty)=\lim \limits_{x \to -\infty} F(x)=0$，$F(\infty)=\lim \limits_{x \to \infty} F(x)=1$。</li><li>$F(x)$对于离散型是右连续的（即$F(x+0)=F(x)$），$F(X)$对于连续型是连续的。</li></ol><h3 id="连续型随机变量及其概率密度"><a href="#连续型随机变量及其概率密度" class="headerlink" title="连续型随机变量及其概率密度"></a>连续型随机变量及其概率密度</h3><ol><li>非负可积$f(x)$，$f(x)≥0$,$a≤b$，则$P\{a&lt;x≤b\}=\int_a^bf(x){\rm d}x$，记为$X\sim f(x)$。连续型随机变量不注重端点值，且$f(x)≥0$，$\int_{-\infty}^\infty f(x){\rm d}x=1$。</li><li>对于任意$x_1≤x_2$，$P\{x_1&lt;X≤x_2\}=F(x_2)-F(x_1)=\int_{x_1}^{x_2}f(x){\rm d}x$。</li><li>若$f(x)$在点x处连续，则$F\prime(x)=f(x)$。</li><li>连续变量取个别值的概率为零。</li><li>均匀分布：$f(x)=\begin{cases} \frac{1}{b-a}，&amp;a&lt;x&lt;b，\\0，&amp;其他，\end{cases}$，记为$X\sim U(a, b)$。</li><li>指数分布：$f(x)=\begin{cases} \lambda e^{-\lambda x}，&amp;x&gt;0，\\0，&amp;x≤0，\end{cases}$，其中$\lambda &gt;0$，记为$X\sim Exp(\lambda)$。</li><li>正态分布（高斯分布）：$f(x)=\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$，$-\infty&lt;x&lt;\infty$，记为$X\sim N(\mu, \sigma^2)$。当$x=\mu$时取得最大值。曲线关于$x=\mu$对称，对于任意$h&gt;0$都有$P\{\mu-h&lt;X≤\mu\}=P\{\mu&lt;X≤\mu+h\}$。$\sigma$固定，$\mu$变化，图像左右移动；$\mu$固定，$\sigma$变化，$\begin{cases} \sigma变小，最高点上移，图像变陡。\\\sigma变大，最高点下移，图像变缓。 \end{cases}$</li><li>标准正态分布$\phi_o(x)$：当$\mu=0$，$\sigma=1$时，$\phi_o(x)=\frac{1}{\sqrt{2\pi}}e^{-\frac{x^2}{2}}$。$\Phi_o(-x)=1-\Phi_o(x)$，$\phi_o(x)=\phi_o(-x)$。$\phi(x)=\frac{1}{\sigma}\phi_o(\frac{x-\mu}{\sigma})$。若$X\sim N(\mu, \sigma^2)$，则$Z=\frac{X-\mu}{\sigma}\sim N(0, 1)$。</li></ol><h3 id="随机变量的函数的分布"><a href="#随机变量的函数的分布" class="headerlink" title="随机变量的函数的分布"></a>随机变量的函数的分布</h3><ol><li>离散型：X代入函数，p不变。若X代入函数之后有相同值则合并（p相加）。</li><li>连续型：设X的$f_X(x)$，$y=g(x)$，$Y=g(X)$，则求解步骤为：<ul><li>得出$F_Y(x)$，$F_Y(x)=P\{Y≤x\}$，将其化成$F_X(x)$，$F_X(x)=P\{X≤x\}$。</li><li>对$F_Y(x)=F_X(x)$求导得$f_Y(x)=f_X(x)$，根据$f_X(x)$写出$f_Y(x)$的分段函数。</li></ul></li></ol><h2 id="多维随机变量及其分布"><a href="#多维随机变量及其分布" class="headerlink" title="多维随机变量及其分布"></a>多维随机变量及其分布</h2><h3 id="二维随机变量"><a href="#二维随机变量" class="headerlink" title="二维随机变量"></a>二维随机变量</h3><ol><li>联合分布函数：$F(x, y)$=$P\{(X≤x)\bigcap(Y≤y)\}$=$P\{X≤x, Y≤y\}$。</li><li>$F(x, y)$是不减h函数，y固定时，$x_1＜x_2$，$F(x_1, y)≤F(x_2, y)$。</li><li>$0≤F(x, y)≤1$，当y固定时$F(-\infty, y)=0$，$当x固定时F(x, -\infty)=0$，$F(-\infty, -\infty)=0$，$F(\infty, \infty)=1$。</li><li>对于任意$(x_1, y_1)$，$(x_2, y_2)$，$x_1&lt;x_2$，$y_1&lt;y_2$，则$F(x_2, y_2)-F(x_2, y_1)+F(x_1, y_1)-F(x_1, y_2)≥0$。</li></ol><h3 id="边缘分布"><a href="#边缘分布" class="headerlink" title="边缘分布"></a>边缘分布</h3><ol><li>离散型边缘分布：简单说就是确定$x_i$，将$x_i$所在的%y_j%概率相加，即为该$x_i$的边缘分布。</li><li>连续型边缘分布：$F(x, y)$=$P\{X≤x, Y≤y\}$=$\int_{-\infty}^x \int_{-\infty}^y f(s, t){\rm d}s{\rm d}t$，其中$F(x, y)$是联合分布，$f(x, y)$是联合密度。G是XY平面上的一个区域，$P\{(X, Y)∈G\}$=${\int \int}_G f(x, y){\rm d}x{\rm d}y$。</li><li>联合分布可唯一确认边缘分布；边缘分布不能确定联合分布；当X，Y独立时，边缘分布才能确定联合分布。</li><li>边缘密度函数：已知$f(x, y)$，求$f_X(x)=\int_{-\infty}^{+\infty} f(x, y){\rm d}y$，$f_Y(x)=\int_{-\infty}^{+\infty} f(x, y){\rm d}x$，且$f(x, y)$=$f_X(x)f_Y(y)$。</li><li>二维正态分布的边缘分布也是正态。</li><li>两边缘分布是正态的，二维并非一定是二维正态的。</li></ol><h3 id="条件分布"><a href="#条件分布" class="headerlink" title="条件分布"></a>条件分布</h3><ol><li>条件分布：$P\{X=x_i|Y=y_j\}$=$\frac{P\{X=x_i, Y=y_j\}}{P\{Y=y_j\}}$=$\frac{P_{ij}}{P_j}$。</li><li>离散型的条件分布即$\frac{某点概率}{边缘分布概率}$。</li><li>连续型的条件分布：$(X, Y)$，$f(x, y)$，$f_X(x)$，$f_Y(y)$，若$f_Y(y)&gt;0$，在$Y=y$的条件下，$F(x|y)=\int_{-\infty}^x \frac{f(x, y)}{f_Y(y)}{\rm d}y$。</li></ol><h3 id="相互独立的随机变量"><a href="#相互独立的随机变量" class="headerlink" title="相互独立的随机变量"></a>相互独立的随机变量</h3><ol><li>二维离散型的独立性：$P_{ij}=x_iy_j$。</li><li>二维连续型的独立性：$f(x, y)=f_X(x)f_Y(y)$。</li><li>变量独立，则变量构造的函数也独立。</li></ol><h3 id="两个随机变量的函数的分布"><a href="#两个随机变量的函数的分布" class="headerlink" title="两个随机变量的函数的分布"></a>两个随机变量的函数的分布</h3><ol><li>二维离散型的函数分布：X和Y代入函数，求XY相乘所有的可能，p不变，若有重复的则合并（p相加）。</li><li>二维连续型的函数分布：$(X, Y)$，$f(x, y)$，$Z=g(X, Y)$，$F(\xi)=P\{Z≤\xi\}=P\{g(X, Y)≤\xi\}={\int\int}_{D_\xi} f(x, y){\rm d}x{\rm d}y$，求出$f_Z(\xi)$。</li><li>卷积公式：$f_X*f_Y=f_{X+Y}(z)=\int_{-\infty}^{\infty}f_X(z-y)f_Y(y){\rm d}y=\int_{-\infty}^{\infty}f_X(x)f_Y(z-x){\rm d}x$。</li><li>$Z=\frac{Y}{X}$：$f_{\frac{Y}{X}}(z)=\int_{-\infty}^{\infty}|x|f_X(x)f_Y(xz){\rm d}x$。</li><li>$Z=XY$：$f_{XY}(z)=\int_{-\infty}^{\infty}\frac{1}{|x|}f_X(x)f_Y(\frac{z}{x}){\rm d}x$。</li><li>$M=max\{X, Y\}$：$F_{max}(z)=F_X(z)F_Y(z)$。</li><li>$N=min\{X, Y\}$：$F_{min}(z)=1-[1-F_X(z)][1-F_Y(z)]$。</li></ol><h2 id="随机变量的数字特征"><a href="#随机变量的数字特征" class="headerlink" title="随机变量的数字特征"></a>随机变量的数字特征</h2><h3 id="数学期望"><a href="#数学期望" class="headerlink" title="数学期望"></a>数学期望</h3><ol><li>离散型的期望：若分布律为$P\{X=x_k\}=P_k$，$EX=\sum_{k=1}^\infty x_kP_k$（$EX$或$E(X)$数学期望），离散型的期望即值乘以概率值相加。</li><li>连续型的期望：若概率密度为$\int_{-\infty}^{\infty} xf(x){\rm d}x$，$EX=\int_{-\infty}^{\infty} xf(x){\rm d}x$。</li><li>离散型函数的期望：$Y=g(X)$，则$EY=\sum_{k=1}^\infty g(x_k)P_k$。</li><li>连续型函数的期望：$Y=g(X)$，则$EY=\int_{-\infty}^{\infty} g(x)f(x){\rm d}x$。</li><li>二维离散型函数的期望：$Z=g(X, Y)$，则$EZ=\sum_i\sum_j g(x_i, y_j)P_{ij}$。</li><li>二维连续型函数的期望：$Z=g(X, Y)$，则$EZ=\int_{-\infty}^\infty\int_{-\infty}^\infty g(x, y)f(x, y){\rm d}x{\rm d}y$。</li><li>期望的性质：$\begin{cases} EC=C\\E(X+C)=EX+C\\E(CX)=CEX\\E(kX+b)=kEX+b\\E(X±Y)=EX±EY\\若X，Y独立，E(XY)=EX EY \end{cases}$</li><li>条件期望：一个变量取某值，另一个变量的期望。$\begin{cases} E(X|Y=y_j)=\sum x_iP(X=x_i|Y=y_j)&amp;离散型\\E(X|Y=y)=\int_{-\infty}^\infty xf(x|y){\rm d}x&amp;连续型 \end{cases}$。</li></ol><h3 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h3><ol><li>方差：即随机变量与期望偏离的程度，记为$DX=E(X-EX)^2=EX^2-(EX)^2$，量纲$\sqrt{DX}$。</li><li>离散型方差：$DX=\sum_k (x_k-EX)^2P_k$。</li><li>连续型方差：$DX=\int_{-\infty}^\infty (x-EX)^2f(x){\rm d}x$。</li><li>方差的性质：$\begin{cases} DC=0\\D(X+C)=DX\\D(CX)=C^2DX\\D(kX+b)=k^2DX\\若X，Y独立，D(X±Y)=DX+DY\\DX=0\Leftrightarrow P(X=EX)=1 \end{cases}$</li><li>若$X^\ast=\frac{X-EX}{\sqrt{DX}}$，则$EX^\ast=0$，$DX^\ast=1$。</li><li>$(0-1)$分布的期望与方差：$EX=p$，$DX=p(1-p)$。</li><li>二项分布的期望与方差：$EX=np$，$DX=np(1-p)$。</li><li>几何分布的期望与方差：$EX=\frac{1}{p}$，$DX=\frac{1-p}{p^2}$。</li><li>泊松分布的期望与方差：$EX=\lambda$，$DX=\lambda$。</li><li>均匀分布的期望与方差：$EX=\frac{a+b}{2}$，$DX=\frac{(b-a)^2}{12}$。</li><li>指数分布的期望与方差：$EX=\frac{1}{\lambda}$，$DX=\frac{1}{\lambda^2}$。</li><li>正态分布的期望与方差：$EX=\mu$，$DX=\sigma^2$。</li></ol><h3 id="协方差及相关系数"><a href="#协方差及相关系数" class="headerlink" title="协方差及相关系数"></a>协方差及相关系数</h3><ol><li>协方差：$Cov(X, Y)=E[(X-EX)(Y-EY)]=E(XY)-EXEY$。</li><li>$D(X±Y)=DX+DY±2Cov(X, Y)$。</li><li>协方差相关性质：$\begin{cases} Cov(X, Y)=Cov(Y, X)\\Cov(aX, bY)=abCov(X, Y)\\Cov(X_1+X_2, Y)=Cov(X_1, Y)+Cov(X_2, Y)\\Cov(C, X)=0\\若X，Y独立，Cov(X, Y)=0 \end{cases}$。</li><li>标准化：若$X^\ast=\frac{X-EX}{\sqrt{DX}}$，$Y^\ast=\frac{Y-EY}{\sqrt{DY}}$，则$Cov(X^\ast, Y^\ast)=\rho=\frac{Cov(X, Y)}{\sqrt{DX}\sqrt{DY}}$。</li><li>相关系数：$\begin{cases} |\rho|≤1\\ [E(XY)]^2≤EX^2EY^2\\|\rho|=1\Leftrightarrow P\{Y=a+bX\}=1，即XY成线性关系 \end{cases}$</li><li>$\rho=1$则X，Y完全正相关；$\rho=-1$则X，Y完全负相关；$|\rho|$接近0则X，Y线性关系不弱；$\rho=0$则X，Y不存在线性关系。</li><li>X，Y独立则X，Y不相关；X，Y不相关则X，Y不一定独立。独立与不相关是等价的。</li></ol><h3 id="矩、协方差矩阵"><a href="#矩、协方差矩阵" class="headerlink" title="矩、协方差矩阵"></a>矩、协方差矩阵</h3><ol><li>原点矩：$EX^k$，以原点为中心；中心距：$E(X-EX)^k$，以期望为中心。</li><li>离散型原点矩：$\sum x_i^kP_i$。</li><li>离散型中心距：$\int_{-\infty}{\infty}x^kf(x){\rm d}x$。</li><li>连续型原点矩：$\sum (x_i-EX)^kP_i$。</li><li>连续型中心距：$\int_{-\infty}{\infty}(x-EX)^kf(x){\rm d}x$。</li></ol><h2 id="大数定律及中心极限定理"><a href="#大数定律及中心极限定理" class="headerlink" title="大数定律及中心极限定理"></a>大数定律及中心极限定理</h2><h3 id="大数定律"><a href="#大数定律" class="headerlink" title="大数定律"></a>大数定律</h3><ol><li>切比雪夫大数定理：$X_1,\dots,X_n$不相关的变量，$EX_i$和$DX_i$都存在，方差有界，即$DX_i≤M$，对$\forall \epsilon&gt;0$时，有$\lim \limits_{n \to \infty} P\{|\frac{1}{n}\sum_{i=1}^nX_i-\frac{1}{n}\sum_{i=1}^nEX_i|&lt;\epsilon\}=1$。</li><li>伯努利大数定理：假设n重伯努利试验，事件A发生了m次，P是其发生概率，$\frac{m_n}{n}$即为其频率，当$n \to \infty$时，即$\lim \limits_{n \to \infty}P\{|\frac{m_n}{n}-P|&lt;\epsilon\}=1$，其概率依概率收敛于它的概率。也有$\lim \limits_{n \to +\infty}P\{|\frac{m_n}{n}-P|≥\epsilon\}=0$。</li><li>辛钦大数定理：$X_1,\dots,X_n$独立同分布，且$EX_i=M$，$DX_i=\sigma^2$，有$\forall \epsilon&gt;0$，则$\lim \limits_{n \to \infty} P\{|\frac{1}{n}\sum_{i=1}^nX_i-\mu|&lt;\epsilon\}=1$。</li></ol><h3 id="中心极限定理"><a href="#中心极限定理" class="headerlink" title="中心极限定理"></a>中心极限定理</h3><ol><li>$X_1,\dots,X_n$独立同分布，$EX_i=\mu$，$DX_i=\sigma^2$，$0&lt;\sigma^2&lt;+\infty$，$\lim \limits_{n \to \infty}F_n(x)$=$\lim \limits_{n \to \infty}P\{\frac{\sum_{k=1}^nX_k-n\mu}{\sqrt{n}\sigma}≤x\}$=$\int_{-\infty}^x\frac{1}{\sqrt{2\pi}}e^{-\frac{t^2}{2}}{\rm d}t$=$\Phi(x)$。当n充分大时，$\frac{\sum x_i-n\mu}{\sqrt{n}\sigma}\sim N(0, 1)$，$\sum_{i=1}^nX_i\sim N(n\mu, n\sigma^2)$。</li><li>$Y_n$，n，p二项分布近似正态分布，$\Phi_o(x)=\lim \limits_{n \to \infty}P\{\frac{Y_n-np}{\sqrt{np(1-p)}}≤x\}$，其中$Y_n=\sum_{i=1}^nX_i$，$X_i=\begin{cases} 1&amp;发生\\0&amp;未发生 \end{cases}$，$EX_i=P$，$DX_i=p(1-P)$。</li></ol><h2 id="样本及抽样分布"><a href="#样本及抽样分布" class="headerlink" title="样本及抽样分布"></a>样本及抽样分布</h2><h3 id="随机样本"><a href="#随机样本" class="headerlink" title="随机样本"></a>随机样本</h3><p>$X:(0-1)分布$：$P(X_1=x_1,\dots,X_n=x_n)$=$P(X_1=x_1)\dots P(X_n=x_n)$=$P^{x_1}(1-p)^{1-x_1}\dots P^{x_n}(1-p)^{1-x_n}$=$P^{x_1+\dots+x_n}(1-p)^{n-(x_1+\dots +x_n)}$。</p><h3 id="抽样分布"><a href="#抽样分布" class="headerlink" title="抽样分布"></a>抽样分布</h3><ol><li>统计量：不含任何未知参数的样本构造的函数。</li><li>样本平均值：$\hat{X}=\frac{1}{n}\sum_{i=1}^nX_i$。</li><li>未修正样本方差：$S_o^2=\frac{1}{n}\sum_{i=1}^n(X_i-\hat{X})^2$。$S^2=\frac{n}{n-1}S_o^2$。</li><li>样本方差：$S^2=\frac{1}{n-1}\sum_{i=1}^n(X_i-\hat{X})^2$。</li><li>样本标准方差：$S=\sqrt{S^2}$。</li><li>样本k阶（原点）矩：$A_k=\frac{1}{n}\sum_{i=1}^nX_i^k,(k=1,2,\dots)$。$A_1=\hat{X}$。</li><li>样本k阶中心距：$B_k=\frac{1}{n}\sum_{i=1}^n(X_i-\hat{X})^k,(k=2,3,\dots)$。$B_2=S_o^2$。$S^2=\frac{n}{n-1}B_2$。</li><li>协方差：$S_{1,2}=\frac{1}{n}(X_i-\hat{X})(Y_i-Y)$。</li><li>两样本之间的相关系数：$R=\frac{S_{1,2}}{S_1S_2}$。</li><li>总体X的均值为$EX=\mu$，方差为$DX=\sigma^2$，样本（$X_1,X_2,\dots,X_n$）来自总体X，则$E\hat{X}=\mu$，$D\hat{X}=\frac{1}{n}\sigma^2$，$ES^2=\sigma^2$。</li><li>卡方分布：<ul><li>$X_1,\dots,X_n$独立且是来自$N(0, 1)$的样本，则$\chi^2=\sum_{i=1}^nx_i^2\sim \chi^2(n)$。</li><li>$EX=n$，$DX=2n$。</li><li>由中心极限定理得$X\sim \chi^2(n)$，$Y\sim \chi^2(m)$，X, Y独立，则$X+Y\sim \chi^2(m+n)$。</li><li>$X_i\sim \chi^2(m_i)$，独立，$\sum_{i=1}^nX_i\sim \chi^2(\sum_{i=1}^nm_i)$。</li><li>上$\alpha$分位数：$P(\chi^2&gt;\chi^2_alpha(n))=\alpha$。$\chi^2$相当于变量，$\chi^2_alpha(n)$相当于一个点，$\alpha$相当于面积。</li><li>$\chi^2(2)$是$\lambda=\frac{1}{2}$的指数分布。</li><li>$\chi^2(n)$是单峰曲线，在$n-2$时取得最大值。</li><li>当$n=2$时曲线不对称，当n增大图像越接近对称，且在n很大时，可用正态分布近似。</li></ul></li><li>t分布：<ul><li>若$X\sim N(0, 1)$，$Y\sim \chi^2(n)$，X, Y独立，则$t(n)\sim\frac{X}{\sqrt{\frac{Y}{n}}}$。</li><li>上$\alpha$分位数：$P(T&gt;t_\alpha(n))=\alpha$。</li><li>$t_{1-\alpha}(n)$=$-t_\alpha(n)$。</li><li>n越小，其图像与正态分布差距越大（$n≥30$，与正态分布区别很小）。</li></ul></li><li>F分布：<ul><li>$X\sim \chi^2(n_1)$，$Y\sim \chi^2(n_2)$，X, Y独立，$F(n_1, n_2)\sim \frac{\frac{X}{n_1}}{\frac{Y}{n_2}}$。</li><li>$\frac{1}{F}\sim F(n_2, n_1)$。</li><li>上$\alpha$分位数：$P(F&gt;F_\alpha(n_1, n_2)=\alpha$。</li><li>$F_{1-\alpha}(n_1, n_2)=\frac{1}{F_\alpha(n_2, n_1)}$。</li></ul></li><li>正态总体下的抽样分布：<ul><li>$X\sim N(\mu, \sigma^2)$，$\{X_1,\dots,X_n\}$样本，则$E\hat{X}=\mu$，$D\hat{X}=\frac{\sigma^2}{n}$，$\frac{\hat{X}-\mu}{\sigma}\sqrt{n}\sim N(0, 1)$，即$E(S^2)=\sigma^2$。</li><li>$\hat{X}\sim N(\mu, \frac{\sigma^2}{n})$。</li><li>$\frac{(n-1)S^2}{\sigma^2}\sim \chi^2(n-1)$，$\hat{X}$与$S^2$独立。</li><li>$\frac{1}{\sigma^2}\sum_{i=1}^n(X_i-\mu)^2\sim \chi^2(n)$。</li><li>$\frac{\hat{X}-\mu}{S}\sqrt{n}\sim t(n-1)$。</li><li>两个正态总体：$X\sim N(\mu_1, \sigma_1^2)$，$Y\sim N(\mu_2, \sigma_2^2)$，样本$\{X_1,\dots,X_{n_1}\}$，$\{Y_1,\dots,Y_{n_2}\}$，$\begin{cases} \frac{(\hat{X}-\hat{Y})-(\mu_1-\mu_2)}{\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}}\sim N(0, 1)\\\frac{\frac{S_1^2}{\sigma_1^2}}{\frac{S_2^2}{\sigma_2^2}}\sim F(n_1-1, n_2-1)\\ \sigma_1^2=\sigma_2^2=\sigma 时，T=\frac{(\hat{X}-\hat{Y})-(\mu_1-\mu_2)}{\sqrt{\frac{(n_1-1)S_1^2+(n_2-1)S_2^2}{n_1+n_2-2}}\sqrt{\frac{1}{n_1}+\frac{1}{n_2}}}\sim t(n_1+n_2-2) \end{cases}$</li></ul></li></ol><h2 id="参数估计"><a href="#参数估计" class="headerlink" title="参数估计"></a>参数估计</h2><h3 id="点估计"><a href="#点估计" class="headerlink" title="点估计"></a>点估计</h3><ol><li>点估计：通过一个样本估计总体未知参数。</li><li>矩估计法：以样本矩的连续函数作为相应的总体矩的连续函数的估计量。$A_n=\frac{1}{n}\sum X_i^2$。</li><li>极大似然估计法：<ul><li>1.写出总体的概率函数或密度函数。</li><li>2.写出似然函数$L(\lambda)=\prod_{i=1}^2\frac{\lambda^{x_i}}{x_i!}e^{-\lambda}$（此处以泊松分布为例，似然函数即将样本观测值代入1.式并连乘）。</li><li>3.需使似然函数取最大值，两边取$ln$。</li><li>4.对$\lambda$求导（此处$\lambda$根据概率函数或者密度函数改变）。</li></ul></li></ol><h3 id="估计量的评选标准"><a href="#估计量的评选标准" class="headerlink" title="估计量的评选标准"></a>估计量的评选标准</h3><ol><li>无偏性：<ul><li>估计的参数的估计值的期望是其真实的值，即$E\hat{\theta}=\theta$。</li><li>总体$X$，$EX=\mu$，$DX=\sigma^2$，$(X_1,\dots,X_n)$，总体与任何分布无关，则$\begin{cases}\hat{X}是\mu的无偏估计，E\hat{X}=\mu。\\样本方差S^2是\sigma^2的无偏估计，ES^2=\sigma^2。\\未修正样本方差S_o^2是\sigma^2的有偏估计。\\n \to \infty，渐进无偏估计。\\ \hat{\theta}是\theta的无偏估计，g(\hat{\theta})不一定是g(\theta)的无偏估计。\\DS=\sigma^2-(ES)^2，ES=\sqrt{\sigma^2-DS}≤\sigma（一般不等于）。 \end{cases}$</li></ul></li><li>有效性：$D(\hat{\theta}_1)≤D(\hat{\theta}_2)$，方差越小越有效。</li><li>相合性（一致性）：$\lim \limits_{n \to +\infty}P(|\hat{\theta}-\theta|&lt;\epsilon)=1$。</li></ol><h3 id="区间估计"><a href="#区间估计" class="headerlink" title="区间估计"></a>区间估计</h3><ol><li>置信区间：$[\hat{\theta_1},\hat{\theta_2}]$能套住$\theta$的概率，即以区间估计的区域套住$\theta$的概率。</li><li>枢轴变量：即通过先确定两个数来确定未知数。<ul><li>$I=I(T, \theta)$，其中$T$已知，$\theta$未知，枢轴变量I的分布F已知且与$\theta$无关。</li><li>给定$1-\alpha$，确定F分布的上$$分位数，上$$分位数，即$P\{V_{1-\frac{\alpha}{2}}≤I(T, \theta)≤V_{\frac{\alpha}{2}}\}=1-\alpha$。</li></ul></li></ol><h3 id="正态总体均值与方差的区间估计"><a href="#正态总体均值与方差的区间估计" class="headerlink" title="正态总体均值与方差的区间估计"></a>正态总体均值与方差的区间估计</h3><ol><li>若给定置信水平$1-\alpha$，$X_1,\dots,X_n$为$N(\mu, \sigma^2)$的样本，已知$\hat{X}$，$S^2$。<ul><li>$\sigma^2$已知，枢轴变量$\frac{\hat{X}-\mu}{\frac{\sigma}{\sqrt{n}}}$，$1-\alpha$的置信区间$(\hat{X}±\frac{\sigma}{\sqrt{n}}z_{\frac{\alpha}{2}})$。</li><li>$\sigma^2$未知，枢轴变量$\frac{\hat{X}-\mu}{\frac{\sigma}{\sqrt{n}}}\sim t(n-1)$，$1-\alpha$的置信区间$(\hat{X}±\frac{S}{\sqrt{n}}t_{\frac{\alpha}{2}}(n-1))$。</li></ul></li><li>单个总体$N(\mu, \sigma^2)$情况表<table><thead><tr><th>估计表</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>$\mu$</td><td>$\sigma^2$已知</td><td>$\frac{\hat{X}-\mu}{\sigma}\sqrt{n}\sim N(0, 1)$</td><td>$[\hat{X}-\frac{\sigma}{\sqrt{n}}\mu_{\frac{\alpha}{2}}, \hat{X}+\frac{\sigma}{\sqrt{n}}\mu_{\frac{\alpha}{2}}]$</td></tr><tr><td>$\mu$</td><td>$\sigma^2$未知</td><td>$\frac{\hat{X}-\mu}{S}\sqrt{n}\sim t(n-1)$</td><td>$[\hat{X}-\frac{S}{\sqrt{n}}t_{\frac{\alpha}{2}}(n-1), \hat{X}+\frac{S}{\sqrt{n}}t_{\frac{\alpha}{2}}(n-1)]$</td></tr><tr><td>$\sigma^2$</td><td>$\mu$已知</td><td>$\frac{1}{\sigma^2}\sum_{i=1}^n(X_i-\mu)^2\sim \chi^2(n)$</td><td>$[\frac{\sum(X_i-\mu)^2}{\chi^2_{\frac{\alpha}{2}}(n)}, \frac{\sum(X_i-\mu)^2}{\chi^2_{1-\frac{\alpha}{2}}(n)}]$</td></tr><tr><td>$\sigma^2$</td><td>$\mu$未知</td><td>$\frac{(n-1)S^2}{\sigma^2}\sim \chi^2(n-1)$</td><td>$[\frac{(n-1)S^2}{\chi^2_{\frac{\alpha}{2}}(n-1)}, \frac{(n-1)S^2}{\chi^2_{1-\frac{\alpha}{2}}(n-1)}]$</td></tr></tbody></table></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学</title>
      <link href="/posts/93e4730e/"/>
      <url>/posts/93e4730e/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/higherMathematics.png"></p><h2 id="函数与极限"><a href="#函数与极限" class="headerlink" title="函数与极限"></a>函数与极限</h2><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><ol><li>$D_f$是定义域(domain)，$R_f$是值域(range)。$x∈X$，对应的 y 是唯一的。（$R_f\subset Y, R_f≠Y$）</li><li>满射：$R_f=Y$。</li><li>单射：$x_1≠x_2, f(x_1)≠f(x_2)$，即x和f(x)唯一对应。</li><li>一一映射：满足单射和满射。</li><li>逆映射：设$f:X→Y$且满足单射，每个$y∈R_f$，有唯一的$x∈X, f(x)=y, g:R_f→X$，则$D_{f^{-1}}=R_f, R_{f^{-1}}=X$。</li><li>复合映射：$g:X→Y_1, f:Y_2→Z$，且$Y_1 \subset Y_2, x∈X$，则$f[g(x)]∈Z$。</li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol><li>函数特性：有界性、单调性、奇偶性和周期性。</li><li>反函数：若$f:D→f(D)$，且满足单射，则$f^{-1}:f(D)→D$。$f$与$f^{-1}$关于$y=x$对称，所以$f$单调增(减)时，$f^{-1}$也单调增(减)。</li><li>复合函数：$y=f(t), t=g(x)$，则$y=f(g(x))$，其中$t=g(x)$的值域必须落在$y=f(t)$的定义域内。</li><li>初等函数：由常数和基本初等函数（幂、指数、对数、三角和反三角函数）经过有限次的四则运算和函数复合所构成的函数。</li></ol><h3 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h3><ol><li>数列极限定义：$\forall \epsilon &gt;0$，$\exists 正整数N$，当$n&gt;N$时，$|x_n-a|&lt;\epsilon$，其中a就是极限，记作$\lim \limits_{n \to \infty} x_n=a$或$x_n \to a(n \to \infty)$。也就是说N是数列中的某一项，$n&gt;N$表示该项后面的所有项，$|x_n-a|&lt;\epsilon$表示该项后面的所有项都落在$\epsilon$那么大的小区域中。</li><li>自变量趋于有限值时函数的极限定义：$\forall \epsilon &gt;0$，$\exists \delta&gt;0$，当$0&lt;|x-x_0|&lt; \delta$时，有$|f(x)-A|&lt;\epsilon$，记作$\lim \limits_{x \to x_0} f(x)=A$或$f(x) \to A(x \to x_0)$。也就是说当x趋于$x_0$时，函数f(x)趋于A，f(x)在$x_0$的去心领域内有定义（注在$x_0$处可以没有定义）。</li><li>自变量趋于无穷大时函数的极限定义：$\forall \epsilon &gt;0$，$\exists X&gt;0$，当$|x|&gt; X$时，有$|f(x)-A|&lt;\epsilon$，记作$\lim \limits_{x \to \infty} f(x)=A$或$f(x) \to A(x \to \infty)$。</li><li>单侧极限：<ul><li>左极限：$\lim \limits_{x \to x_o^-} f(x)=A$，从左边逼近；</li><li>右极限：$\lim \limits_{x \to x_o^+} f(x)=A$，从右边逼近；</li><li>f(x)极限存在。$\Leftrightarrow$左右极限均存在且相等。</li></ul></li><li>极限性质<table><thead><tr><th>类型</th><th>性质</th></tr></thead><tbody><tr><td>数列</td><td>1.极限唯一；<br>2.有界性；<br>3.保号性；<br>4.若数列$\{x_n\}$收敛于a，那么它的任一子数列也收敛，且极限也是a。</td></tr><tr><td>函数</td><td>1.极限唯一；<br>2.局部有界性；<br>3.局部保号性；<br>4.海涅定理：若$\lim \limits_{x \to x_o} f(x)=A$，且$\{x_n\} \to x_0$，则$\lim \limits_{n \to \infty} f(x_n)=\lim \limits_{x \to x_o} f(x)=A$。</td></tr></tbody></table></li></ol><h3 id="无穷小和无穷大"><a href="#无穷小和无穷大" class="headerlink" title="无穷小和无穷大"></a>无穷小和无穷大</h3><ol><li>无穷小定义：$x \to x_0(x \to \infty)$，$f(x)$的极限是0。（0是可以作为无穷小的唯一常数。）</li><li>无穷大定义：$x \to x_0(x \to \infty)$，$f(x)$的极限是$\infty$。</li><li>$f(x)$是无穷小，则$\frac{1}{f(x)}$是无穷大；$f(x)$是无穷大，则$\frac{1}{f(x)}$是无穷小。</li></ol><h3 id="极限运算法则"><a href="#极限运算法则" class="headerlink" title="极限运算法则"></a>极限运算法则</h3><ol><li>有限个无穷小的和(差)是无穷小。</li><li>有界函数与无穷小的乘积是无穷小。</li><li>常数与无穷小的乘积是无穷小。</li><li>有限个无穷小的乘积是无穷小。</li><li>若$\phi(x)≥\psi(x)$，则$\lim \phi(x)≥\lim \psi(x)$。</li><li>$\lim \limits_{x \to \infty} \frac{a_0x^m+a_1x^{m-1}+\cdots+a_m}{b_0x^n+b_1x^{n-1}+\cdots+b_n} = \begin{cases} 0,&amp;当n&gt;m,\\\frac{a_0}{b_0},&amp;当n=m,\\\infty,&amp;当n&lt;m. \end{cases}$</li></ol><h3 id="极限存在准则，两个重要极限"><a href="#极限存在准则，两个重要极限" class="headerlink" title="极限存在准则，两个重要极限"></a>极限存在准则，两个重要极限</h3><ol><li>夹逼准则：$g(x)≤f(x)≤h(x)$，若$\lim g(x)=A$,$\lim h(x)=A$，则$\lim f(x)=A$。</li><li>$\lim \limits_{x \to 0} \frac{sinx}{x}=A$。</li><li>单调有界数列必有极限。</li><li>$\lim \limits_{x \to \infty} (1+\frac{1}{x})^x=e$或$\lim \limits_{x \to 0} (1+x)^\frac{1}{x}=e$。即$(1+0)^\infty$的样子。</li><li>柯西极限存在准则：$\{x_n\}$收敛$\Leftrightarrow$$\forall \epsilon, \exists N, m&gt;N, n&gt;N$时，则$|x_n-x_m|&lt;\epsilon$。即任取某一项N，在该项之后任取两项m和n，他们之间的距离很小。</li></ol><h3 id="无穷小的比较"><a href="#无穷小的比较" class="headerlink" title="无穷小的比较"></a>无穷小的比较</h3><p>无穷小的比较即比较趋向于0的速度快慢。</p><ol><li>$\lim \frac{\beta}{\alpha}=0$，则$\beta$是比$\alpha$高阶的无穷小，记作$\beta=o(\alpha)$。<br> $\lim \frac{\beta}{\alpha}=\infty$，则$\beta$是比$\alpha$低阶的无穷小。<br> $\lim \frac{\beta}{\alpha}=c≠0$，则$\beta$与$\alpha$是同阶无穷小。<br> $\lim \frac{\beta}{\alpha^k}=c≠0$，则$\beta$是关于$\alpha$的k阶无穷小<br> $\lim \frac{\beta}{\alpha}=1$，则$\beta$与$\alpha$是等价无穷小，记作$\alpha\sim\beta$。</li><li>$\beta$与$\alpha$等价。$\Leftrightarrow$$\beta=\alpha+o(\alpha)$。</li><li>$\alpha\sim\widetilde{\alpha}$，$\beta\sim\widetilde{\beta}$，且$\lim \frac{\widetilde{\beta}}{\widetilde{\alpha}}$存在，则$\lim \frac{\beta}{\alpha}=\lim \frac{\widetilde{\beta}}{\widetilde{\alpha}}$</li><li>当$x \to 0$时，求两个无穷小比(做乘除运算)的极限时，分子及分母可用等价无穷小来替换。常用等价替换：<table><tbody><tr><td>$sinx\sim x$</td><td>$tanx\sim x$</td></tr><tr><td>$arcsinx\sim x$</td><td>$arctanx\sim x$</td></tr><tr><td>$ln(1+x)\sim x$</td><td>$e^x-1\sim x$</td></tr><tr><td>$a^x\sim 1+xlna$</td><td>$1-cosx\sim \frac{1}{2}x^2$</td></tr><tr><td>$(1+x)^\frac{1}{n}-1\sim \frac{1}{n}x$</td><td>$(1+x)^\alpha\sim 1+\alpha x$</td></tr></tbody></table><h3 id="函数的连续性与间断点"><a href="#函数的连续性与间断点" class="headerlink" title="函数的连续性与间断点"></a>函数的连续性与间断点</h3></li><li>$\lim \limits_{\Delta x \to 0} \Delta y=\lim \limits_{\Delta x \to 0} [f(x_0+\Delta x)-f(x_0)]=0$。</li><li>$\lim \limits_{x \to x_0} f(x)=f(x_0)$。即连续性的条件为$\begin{cases} 1.在x_0处有极限。\\2.在x_0处有定义。\\3.极限等于函数值。 \end{cases}$</li><li>连续。$\Leftrightarrow$左、右连续。<br> 左连续：$\lim \limits_{x \to x_0^-} f(x)=f(x_0)$。<br> 右连续：$\lim \limits_{x \to x_0^+} f(x)=f(x_0)$。</li><li>间断即不满足连续的条件。间断点类型：<br> 第一类间断点(左右极限都存在)：可去间断点、跳跃间断点。<br> 第二类间断点(左右极限至少一个不存在)：无穷间断点、震荡间断点。</li></ol><h3 id="连续函数的运算与初等函数的连续性"><a href="#连续函数的运算与初等函数的连续性" class="headerlink" title="连续函数的运算与初等函数的连续性"></a>连续函数的运算与初等函数的连续性</h3><ol><li>函数$f(x)$和$g(x)$在点$x_0$连续，则它们的和(差)、积(商)都在点$x_0$处连续。</li><li>如果函数$y=f(x)$在区间$I_x$上单调递增(或单调递减)且连续，那么它的反函数$x=f^{-1}(y)$也在对应的区间$I_y$上单调递(或单调递减)增且连续。</li><li>$y=f[g(x)]$由$u=g(x)$与$y=f(u)$复合而成，若$\lim \limits_{x \to x_0} g(x)=u_0$，而$y=f(u)$在$u=u_0$连续，则$\lim \limits_{x \to x_0} f[g(x)]=\lim \limits_{u \to u_0} f(u)=f(u_0)$。即$\lim \limits_{x \to x_0} f[g(x)]=f[\lim \limits_{x \to x_0} g(x)]$。</li><li>$y=f[g(x)]$由$u=g(x)$与$y=f(u)$复合而成，若$u=g(x)$在$x=x_0$连续，且$g(x_0)=u_0$，而$y=f(u)$在$u=u_0$连续，则$y=f[g(x)]$在$x=x_0$也连续。</li><li>基本初等函数在其定义域内都是连续的；一切初等函数在其定义区间内都是连续的。</li></ol><h3 id="闭区间上连续函数的性质"><a href="#闭区间上连续函数的性质" class="headerlink" title="闭区间上连续函数的性质"></a>闭区间上连续函数的性质</h3><ol><li>在闭区间上连续的函数在该区间上有界且一定能取得它的最大值和最小值。</li><li>零点定理：函数$f(x)$在闭区间$[a, b]$上连续，且$f(a)$与$f(b)$异号(即$f(a)*f(b)&lt;0$)，则在开区间$(a, b)$内至少有一点$\xi$，使得$f(\xi)=0$。</li><li>介值定理：函数$f(x)$在闭区间$[a, b]$上连续，且在该区间的端点取不同的函数值$f(a)=A$及$f(b)=B$，则对于A与B之间的任意一个数C，在开区间$(a, b)$内至少有一点$\xi$，使得$f(\xi)=C(a&lt;\xi&lt;b)$。</li><li>在闭区间$[a, b]$上连续的函数$f(x)$的值域为闭区间$[m, M]$，其中m与M依次为$f(x)$在$[a, b]$上的最小值与最大值。</li></ol><h2 id="导数与微分"><a href="#导数与微分" class="headerlink" title="导数与微分"></a>导数与微分</h2><h3 id="导数概念"><a href="#导数概念" class="headerlink" title="导数概念"></a>导数概念</h3><ol><li>由于自变量x的变化引起函数$y=f(x)$变化的“快慢”问题，即函数的变化率称为导数。</li><li>$y=f(x)$在点$x_0$的某个邻域内有定义，当$x$在$x_0$处取得增量$\Delta x$时，$x_0 \to x_0+\Delta x$，$\Delta y = f(x_0+\Delta x)-f(x_0)$。若$\Delta y$与$\Delta x$之比当$\Delta x\to 0$时的极限存在，则称$y=f(x)$在点$x_0$处可导，记为$f^\prime (x_0)$=$\lim \limits_{\Delta x \to 0} \frac{\Delta y}{\Delta x}$=$\lim \limits_{\Delta x \to 0} \frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}$=$\lim \limits_{x \to x_0} \frac{f(x)-f(x_0)}{x-x_0}$或记为$y^\prime |_{x=x_0}$=$\frac{dy}{dx}|_{x=x_0}$=$\frac{df(x)}{dx}|_{x=x_0}$。其中$\frac{dy}{dx}$表示y对x求导。</li><li>单侧导数：<ul><li>左导数：$f^\prime_-$=$\lim \limits_{h \to 0^-} \frac{f(x_0+h)-f(x_0)}{h}$=$\lim \limits_{x \to x_0^-} \frac{f(x)-f(x_0)}{x-x_0}$，从左边逼近；</li><li>右导数：$f^\prime_+$=$\lim \limits_{h \to 0^+} \frac{f(x_0+h)-f(x_0)}{h}$=$\lim \limits_{x \to x_0^+} \frac{f(x)-f(x_0)}{x-x_0}$，从右边逼近；</li><li>可导。$\Leftrightarrow$左右导数均存在且相等。</li></ul></li><li>导数的几何意义：<ul><li>在某一点的导数即该点的切线的斜率，$k_切=f^\prime(x_0)=tan\alpha$，$k_法=-\frac{1}{f^\prime(x_0)}$。</li><li>若$y=f(x)$，$f^\prime(x_0)=\infty$，表切线垂直于x轴。</li></ul></li><li>可导必连续，连续不一定可导。（$\lim \limits_{\Delta x \to 0} \frac{\Delta y}{\Delta x}$存在即可导，$\lim \limits_{\Delta x \to 0} \Delta y=0$即连续。）</li></ol><h3 id="函数的求导法则"><a href="#函数的求导法则" class="headerlink" title="函数的求导法则"></a>函数的求导法则<span id="derivative_formula"></span></h3><ol><li>常数和基本初等函数的导数公式：<table><tbody><tr><td>$(C)^\prime=0$</td><td>$(x^\mu)^\prime=\mu x^{\mu-1}$</td></tr><tr><td>$(a^x)^\prime=a^xlna(a&gt;0, a≠1)$</td><td>$(e^x)^\prime=e^x$</td></tr><tr><td>$(lnx)^\prime=\frac{1}{x}$</td><td>$(log_ax)^\prime=\frac{1}{xlna}(a&gt;0, a≠1)$</td></tr><tr><td>$(sinx)^\prime=cosx$</td><td>$(cosx)^\prime=-sinx$</td></tr><tr><td>$(tanx)^\prime=sec^2x$</td><td>$(cotx)^\prime=-csc^2x$</td></tr><tr><td>$(sec)^\prime=secxtanx$</td><td>$(cscx)^\prime=-cscxcotx$</td></tr><tr><td>$(arcsinx)^\prime=\frac{1}{\sqrt{1-x^2}}$</td><td>$(arccosx)^\prime=-\frac{1}{\sqrt{1-x^2}}$</td></tr><tr><td>$(arctanx)^\prime=\frac{1}{1+x^2}$</td><td>$(arccotx)^\prime=-\frac{1}{1+x^2}$</td></tr><tr><td>$(shx)^\prime=chx$</td><td>$(chx)^\prime=shx$</td></tr><tr><td>$(thx)^\prime=\frac{1}{ch^2x}$</td><td>$(arshx)^\prime=\frac{1}{\sqrt{1+x^2}}$</td></tr><tr><td>$(archx)^\prime=\frac{1}{\sqrt{x^2-1}}$</td><td>$(arthx)^\prime=\frac{1}{1-x^2}$</td></tr></tbody></table></li><li>函数的和、差、积、商的求导法则：<table><tbody><tr><td>$(u±v)^\prime=u^\prime±v^\prime$</td><td>$(Cu)^\prime=Cu^\prime(C是常数)$</td></tr><tr><td>$(uv)^\prime=u^\prime v+uv^\prime$</td><td>$(\frac{u}{v})^\prime=\frac{u^\prime v-uv^\prime}{v^2}$</td></tr></tbody></table></li><li>反函数求导：$x=f(y)$在$I_y$内单调、可导且$f^\prime(y)≠0$，则其反函数$y=f^\prime(x)$在对应区间内也可导，$[f^\prime(x)]^\prime=\frac{1}{f^\prime(y)}$或$\frac{dy}{dx}=\frac{1}{\frac{dx}{dy}}$。即反函数的导数等于直接函数导数的倒数。</li><li>复合函数求导：若$u=g(x)$在点x可导，而$y=f(u)$在点$u=g(x)$可导，则$y=f[g(x)]$在点x可导，$\frac{dy}{dx}=f^\prime(u)·g^\prime(x)$或$\frac{dy}{dx}=\frac{dy}{du}·\frac{du}{dx}$。</li></ol><h3 id="高阶导数"><a href="#高阶导数" class="headerlink" title="高阶导数"></a>高阶导数</h3><ol><li>对函数做n次求导叫做n阶导数，记作$\frac{d^ny}{dx^n}$或$y^{(n)}(x)$。</li><li>常用高阶导数：<table><tbody><tr><td>$(a^x)^{(n)}=a^x(lna)^n$</td><td>$(sinx)^{(n)}=sin(x+\frac{n\pi}{2})$</td></tr><tr><td>$(cosx)^{(n)}=cos(x+\frac{n\pi}{2})$</td><td>$(x^n)^{(n)}=n!$</td></tr><tr><td>$(x^n)^{(n+k)}=0(k=1, 2, \dots)$</td><td>$(uv)^{(n)}=\sum_{k=0}^n C_n^ku^{(n-k)}v^{(k)}$</td></tr><tr><td>$[ln(1+x)]^{(n)}=(-1)^{(n-1)}\frac{(n-1)!}{(1+x)^n}$</td><td></td></tr></tbody></table></li></ol><h3 id="隐函数及参数方程求导"><a href="#隐函数及参数方程求导" class="headerlink" title="隐函数及参数方程求导"></a>隐函数及参数方程求导</h3><ol><li>$y=sinx$类型是显函数，$x+y^3-1=0$类型是隐函数。此处隐函数同时两边对x求导得到$y^\prime=\dots$的型式即可。</li><li>参数方程$\begin{cases} x=\phi(t)\\y=\Phi(t) \end{cases}$，$\frac{dy}{dx}=\frac{\frac{dy}{dt}}{\frac{dx}{dt}}=\frac{\Phi^\prime}{\phi^\prime}$。</li></ol><h3 id="函数的微分"><a href="#函数的微分" class="headerlink" title="函数的微分"></a>函数的微分</h3><ol><li>由于自变量x的微小改变（增量$|\Delta x|$很小时）引起$y=f(x)$的改变量$\Delta y$的近似值问题，即微分问题。</li><li>$y=f(x)$在某区间内有定义，若$x_0 \to x_0+\Delta x$，则$\Delta y=f(x_0+\Delta x)-f(x_0)$（精确值）可表示成$\Delta y=A\Delta x+o(\Delta x)$（近似值，$o(\Delta x)$可忽略不计），A是不依赖$\Delta x$的常数，称$y=f(x)$可微。其中$A\Delta x$叫做$y=f(x)$在点$x_0$相应于$\Delta X$的微分，记作$dy=A\Delta x$。</li><li>可微。$\Leftrightarrow$可导，$dy=f^\prime(x)dx$（$\Delta x=dx$，$A=f^\prime(x)$）。</li></ol><h3 id="函数的微分运算法则"><a href="#函数的微分运算法则" class="headerlink" title="函数的微分运算法则"></a>函数的微分运算法则</h3><p>微分公式与法则都和<a href="#derivative_formula">导数</a>差不多。</p><h3 id="微分的几何意义"><a href="#微分的几何意义" class="headerlink" title="微分的几何意义"></a>微分的几何意义</h3><p>通过$\Delta y=f(x_0+\Delta x)-f(x_0)$与$dy=f^\prime(x_0)\Delta x$作图即可得知。（曲线，切线，$x_0$，$x_0+\Delta x$，$\Delta y$和$dy$）</p><h2 id="微分中值定理与导数的应用"><a href="#微分中值定理与导数的应用" class="headerlink" title="微分中值定理与导数的应用"></a>微分中值定理与导数的应用</h2><h3 id="微分中值定理"><a href="#微分中值定理" class="headerlink" title="微分中值定理"></a>微分中值定理</h3><ol><li>费马引理：$f(x)$在点$x_0$的某邻域$U(x_0)$内有定义，且在$x_0$处可导，若$f(x)≤f(x_0)$（$f(x)≥f(x_0)$），$\forall x∈U(x_0)$，则$f^\prime(x_0)=0$。</li><li>罗尔定理：$f(x)$满足$\begin{cases} 1.在[a, b]上连续。\\2.在(a, b)内可导。\\3.f(a)=f(b)。 \end{cases}$，则至少有一点$\xi∈(a, b)$，使得$f^\prime(\xi)=0$。</li><li>拉格朗日中值定理：$f(x)$满足$\begin{cases} 1.在[a, b]上连续。\\2.在(a, b)内可导。 \end{cases}$，则至少有一点$\xi∈(a, b)$，使得$f(b)-f(a)=f^\prime(\xi)(b-a)$。即$f^\prime(\xi)=\frac{f(b)-f(a)}{b-a}$，相当于求斜率。</li><li>柯西中值定理：$f(x)$及$F(x)$满足$\begin{cases} 1.在[a, b]上连续。\\2.在(a, b)内可导。\\3.\forall x∈(a, b)，F^\prime(x)≠0。 \end{cases}$，则至少有一点$\xi∈(a, b)$，使得$\frac{f(b)-f(a)}{F(b)-F(a)}=\frac{f^\prime(\xi)}{F^\prime(\xi)}$。</li><li>$f(x)$在区间I上连续，在I内可导且导数恒为零，则$f(x)=C$（C为常数）。</li></ol><h3 id="洛必达法则"><a href="#洛必达法则" class="headerlink" title="洛必达法则"></a>洛必达法则</h3><p>若$\begin{cases} 1.当x \to a时，f(x)和F(x) \to 0。\\2.在点a的某去心邻域内，f^\prime(x)及F^\prime(x)都存在且F^\prime≠0。\\3.\lim \limits_{x \to a} \frac{f^\prime(x)}{F^\prime(x)}存在或为无穷大。\\ \end{cases}$，则$\lim \limits_{x \to a} \frac{f(x)}{F(x)}=\lim \limits_{x \to a} \frac{f^\prime(x)}{F^\prime(x)}$。（将条件$x \to a$改为$x \to \infty$同样适用。）</p><h3 id="泰勒公式"><a href="#泰勒公式" class="headerlink" title="泰勒公式"></a>泰勒公式</h3><ol><li>泰勒中值定理1：$f(x)$在$x_0$处有n阶导数，$\exists x_0$的一个邻域，对于该邻域内的任一x，有$f(x)=f(x_0)+f^\prime(x_0)(x-x_0)+\frac{f^{\prime\prime}(x_0)}{2!}(x-x_0)^2+\dots+\frac{f^{(n)}(x_0)}{n!}(x-x_0)^n+R_n(x)$，其中$R_n(x)=o((x-x_0)^n)$。</li><li>泰勒中值定理2：$f(x)$在$x_0$的某个邻域$U(x_0)$内具有(n+1)阶导数，$\forall x∈U(x_0)$，有泰勒中值定理1的公式，其中$R_n(x)=\frac{f^{(n+1)}(\xi)}{(n+1)!}(x-x_0)^{n+1}$($\xi$是$x_0$与$x$之间的某个值)。</li><li>当泰勒中值定理2的公式中$n=0$时，就变成了拉格朗日中值公式。</li><li>当泰勒中值定理1的公式中$x_0=0$时，就变成了带有佩亚诺余项的麦克劳林公式，$f(x)=f(0)+f^\prime(0)x+\frac{f^{\prime\prime}(0)}{2!}x^2+\dots+\frac{f^{(n)}(0)}{n!}x^n+o(x^n)$。</li><li>当泰勒中值定理2的公式中$x_0=0$时，就变成了带有拉格朗日余项的麦克劳林公式，$f(x)=f(0)+f^\prime(0)x+\frac{f^{\prime\prime}(0)}{2!}x^2+\dots+\frac{f^{(n)}(0)}{n!}x^n+\frac{f^{(n+1)}(\theta x)}{(n+1)!}x^{n+1}(0&lt;\theta&lt;1)$。</li></ol><h3 id="函数的单调性与曲线的凹凸性"><a href="#函数的单调性与曲线的凹凸性" class="headerlink" title="函数的单调性与曲线的凹凸性"></a>函数的单调性与曲线的凹凸性</h3><ol><li>$y=f(x)$在$[a, b]$上连续，在$(a, b)$内可导。则在$(a, b)$内$f^\prime(x)≥0$($f^\prime(x)≤0$)，且等号仅在有限多个点处成立，则$y=f(x)$在$[a, b]$上单调增加(减少)。</li><li>$y=f(x)$在$[a, b]$上连续，在$(a, b)$内具有一阶和二阶导数。则在$(a, b)$内$f^{\prime\prime}(x)&gt;0$($f^{\prime\prime}(x)&lt;0$)，$y=f(x)$在$[a, b]$上的图形是凹(凸)的。</li><li>导数为零的点称为驻点或临界点；在$f^{\prime\prime}(x)=0$或二阶导数不存在的点左右异号则该点就是拐点。</li></ol><h3 id="函数的极值与最大值最小值"><a href="#函数的极值与最大值最小值" class="headerlink" title="函数的极值与最大值最小值"></a>函数的极值与最大值最小值</h3><ol><li>$f(x)$在$x_0$处可导，且在$x_0$处取得极值，则$f^\prime(x_0)=0$。</li><li>$f(x)$在$x_0$处连续，且在$x_0$的某去心邻域可导。<ul><li>若$x∈(x_0-\delta, x_0)$时，$f^\prime(x)&gt;0$，而$x∈(x_0, x_0+\delta)$，$f^\prime(x)&lt;0$，则$f(x)$在$x_0$处取得极大值。</li><li>若$x∈(x_0-\delta, x_0)$时，$f^\prime(x)&lt;0$，而$x∈(x_0, x_0+\delta)$，$f^\prime(x)&gt;0$，则$f(x)$在$x_0$处取得极小值。</li><li>若$x∈(x_0-\delta, x_0)\bigcup(x_0, x_0+\delta)$时，$f^\prime(x)$的符号保持不变，则$f(x)$在$x_0$处没有极值。</li></ul></li><li>$f(x)$在$x_0$处具有二阶导数且$f^\prime(x_0)=0$，$f^{\prime\prime}≠0$，则当$f^{\prime\prime}&lt;0$($f^{\prime\prime}&gt;0$)时，$f(x)$在$x_0$处取得极大值(极小值)。</li><li>将驻点及不可导点带入函数取区间上的最大值和最小值就是函数的最大值和最小值。</li></ol><h3 id="函数图形的描绘"><a href="#函数图形的描绘" class="headerlink" title="函数图形的描绘"></a>函数图形的描绘</h3><p>描绘步骤为：</p><ol><li>确定定义域和间断点，判断函数的奇偶性和周期性。</li><li>求$f^\prime(x)$和$f^{\prime\prime}$，根据$f^\prime(x)=0$、$f^{\prime\prime}=0$以及间断点分开区间。</li><li>确定$y=f(x)$的单调增、减区间，求出极值。</li><li>确定$y=f(x)$的凹凸区间和拐点。</li><li>取间断点求渐近线方程，共三种：<ul><li>斜率渐近线：$k=\lim \limits{x \to +\infty} \frac{f(x)}{x}$，$b=\lim \limits{x \to +\infty}[f(x)-kx]$。</li><li>垂直渐近线：$x \to x_0$时，$f(x) \to \infty$，则$x=x_0$就是渐近线。</li><li>水平渐近线：$k=0$时的渐近线。</li></ul></li><li>作表作图。</li></ol><h2 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h2><h3 id="不定积分的概念与性质"><a href="#不定积分的概念与性质" class="headerlink" title="不定积分的概念与性质"></a>不定积分的概念与性质</h3><ol><li>$F^\prime(x)=f(x)$，$F(x)+C$($C$是常数)是原函数，$f(x)$称为导函数。原函数存在的条件为连续函数一定有原函数。</li><li>在区间I上，$f(x)$带有任意常数项的原函数称为$f(x)$(或$f(x)dx$)在区间I上的不定积分，记作$\int f(x){\rm d}x$，即$\int f(x){\rm d}x=F(x)+C$($C$是常数)。</li><li>不定积分的几何含义：即一组平行的曲线簇。</li><li>不定积分的性质：<table><tbody><tr><td>$\int [f(x)+g(x)]{\rm d}x=\int f(x){\rm d}x+\int g(x){\rm d}x$</td></tr><tr><td>$\int kf(x){\rm d}x=k\int f(x){\rm d}x$</td></tr></tbody></table></li><li>基本积分表：<table><tbody><tr><td>$\int k{\rm d}x=kx+C$($k是常数$)</td><td>$\int x^\mu{\rm d}x=\frac{x^{\mu+1}}{\mu+1}+C$</td></tr><tr><td>$\int \frac{1}{x}{\rm d}x=ln|x|+C$</td><td>$\int \frac{1}{1+x^2}{\rm d}x=arctanx+C$</td></tr><tr><td>$\int \frac{1}{\sqrt{1-x^2}}{\rm d}x=arcsinx+C$</td><td>$\int cosx{\rm d}x=sinx+C$</td></tr><tr><td>$\int sinx{\rm d}x=-cosx+C$</td><td>$\int sec^2x{\rm d}x=tanx+C$</td></tr><tr><td>$\int csc^2x{\rm d}x=-cotx+C$</td><td>$\int secxtanx{\rm d}x=secx+C$</td></tr><tr><td>$\int cscxcotx{\rm d}x=-cscx+C$</td><td>$\int e^x{\rm d}x=e^x+C$</td></tr><tr><td>$\int a^x{\rm d}x=\frac{a^x}{lna}+C$</td><td>$\int shx{\rm d}x=chx+C$</td></tr><tr><td>$\int chx{\rm d}x=shx+C$</td><td>$\int tanx{\rm d}x=-ln|cosx|+C$</td></tr><tr><td>$\int cotx{\rm d}x=ln|sinx|+C$</td><td>$\int secx{\rm d}x=ln|secx+tanx|+C$</td></tr><tr><td>$\int cscx{\rm d}x=ln|cscx-cotx|+C$</td><td>$\int \frac{1}{a^2+x^2}{\rm d}x=\frac{1}{a}arctan\frac{x}{a}+C$</td></tr><tr><td>$\int \frac{1}{x^2-a^2}{\rm d}x=\frac{1}{2a}ln|\frac{x-a}{x+a}|+C$</td><td>$\int \frac{1}{\sqrt{a^2-x^2}}{\rm d}x=arcsin\frac{x}{a}+C$</td></tr><tr><td>$\int \frac{1}{\sqrt{x^2+a^2}}{\rm d}x=ln(x+\sqrt{x^2+a^2})+C$</td><td>$\int \frac{1}{\sqrt{x^2-a^2}}{\rm d}x=ln|x+\sqrt{x^2-a^2}|+C$</td></tr><tr><td>$\int \sqrt{x^2+a^2}{\rm d}x=\frac{a^2}{2}ln(\sqrt{a^2+x^2}+x)+\frac{x}{2}\sqrt{a^2+x^2}+C$</td><td>$\int \sqrt{x^2-a^2}{\rm d}x=\frac{a^2}{2}ln(\sqrt{x^2-a^2}+x)+\frac{x}{2}\sqrt{x^2-a^2}+C$</td></tr></tbody></table></li></ol><h3 id="换元积分法"><a href="#换元积分法" class="headerlink" title="换元积分法"></a>换元积分法</h3><ol><li>第一类换元法：$\int f(\phi(x))\phi^\prime(x){\rm d}x=\int f(\phi(x)){\rm d}\phi(x)=F(\phi(x))+C$。</li><li>第二类换元法：$\int f(x)dx=\int f(\phi(t))\phi^\prime(t)dt=g(t)+C$，其中$t=\phi^{-1}(x)$，因此$g(t)+C$=$g(\phi^{-1}(x))+C$。做题步骤：<ul><li>1.设$x=\phi(t)$，并求积。</li><li>2.将t换回x。（此处可画直角三角形辅助，例$sinx=\frac{x}{a}$，则斜边a、对边x、临边$\sqrt{a^2-x^2}$，$cosx$就等于$\frac{\sqrt{a^2-x^2}}{a}$）</li></ul></li></ol><h3 id="分部积分法"><a href="#分部积分法" class="headerlink" title="分部积分法"></a>分部积分法</h3><ol><li>$\int u {\rm d}v=uv-\int v {\rm d}u$。</li><li>选择$\int u {\rm d}v$中u的优先级顺序：对数函数、反三角函数、幂函数、三角函数和指数函数（对反幂三指，其中对反可以互换，三指也可以互换）。</li></ol><h3 id="有理函数的积分"><a href="#有理函数的积分" class="headerlink" title="有理函数的积分"></a>有理函数的积分</h3><ol><li>$R(x)=\frac{P_m(x)}{Q_n(x)}\begin{cases} m≥n，&amp;有理假分式。\\m&lt;n，&amp;有理真分式。 \end{cases}$，其中$P(x)$和$Q(x)$是两个多项式，m和n是多项式的最高次幂。有理假分式需要通过长除法变成有理真分式进行求解。</li><li>$\frac{A}{(x-a)^n}$型式化成$\frac{A_1}{(x-a)^n}+\frac{A_2}{(x-a)^{n-1}}+\dots+\frac{A_n}{x-a}$；<br> $\frac{Bx+C}{(x^2+px+q)^n}$型式化成$\frac{B_1x+C_1}{(x^2+px+q)^n}+\frac{B_2x+C_2}{(x^2+px+q)^{n-1}}+\dots+\frac{B_nx+C_n}{x^2+px+q}$。</li><li><table><tbody><tr><td></td><td>$\int \frac{1}{ax^2+bx+c}{\rm d}x$</td><td>$\int \frac{dx+e}{ax^2+bx+c}{\rm d}x$</td></tr><tr><td>b^2-4ac=0</td><td>$a(x-x_1)^2$</td><td>$a(x-x_1)^2$，将d凑成和分母类似</td></tr><tr><td>b^2-4ac&gt;0</td><td>$a(x-x_1)(x-x_2)$，化成$\frac{A_1}{x-x_1}+\frac{A_2}{x-x_2}$型式</td><td>与左边相同。</td></tr><tr><td>b^2-4ac&lt;0</td><td>先配方，然后将d凑成和分母类似</td><td>与左边相同。</td></tr></tbody></table></li><li><table><tbody><tr><td>$\int R(sinx, cosx){\rm d}x$</td><td>另$t=tan\frac{x}{2}$。</td></tr><tr><td>$\int R(tanx){\rm d}x$&lt;br&gt;<br>$\int R(sin^2x, cos^2 x){\rm d}x$&lt;br&gt;<br>$\int R(sin2x, cos2x){\rm d}x$<br></td><td>另$t=tanx$。</td></tr><tr><td>$\int R(x, \sqrt[n]{\frac{ax+b}{cx+h}}){\rm d}x$</td><td>另$t=\sqrt[n]{\frac{ax+b}{cx+h}}$。</td></tr><tr><td>$\int R(x, \sqrt{ax^2+bx+c}){\rm d}x$</td><td>先配方，然后对根式选择适当的三角变换去掉根式，化为三角函数有理式的积分。</td></tr></tbody></table></li></ol><h2 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h2><h3 id="定积分的概念与性质"><a href="#定积分的概念与性质" class="headerlink" title="定积分的概念与性质"></a>定积分的概念与性质</h3><ol><li>$f(x)$在$[a, b]$上有界，在$[a, b]$上任意插入若干个分点将其分成n个小区间$\Delta x_1,\Delta x_2,\dots,\Delta x_n$，在每个小区间上任取一点$\xi_i$，$I=\lim \limits_{\lambda \to 0} \sum_{i=1}^n f(\xi_i)\Delta x_i$($\lambda=max\{\Delta x_1,\Delta x_2,\dots,\Delta x_n\}$)，称这个极限I为$f(x)$在$[a, b]$上的定积分，记作$\int_a^b f(x){\rm d}x$。就是说若要取一个曲边梯形的面积，则可以用若干个小长方形的面积相加近似的获取其面积。</li><li>$f(x)$在$[a, b]$上连续，则$f(x)$在$[a, b]$上可积。</li><li>$f(x)$在$[a, b]$上有界，且只有有限个间断点，则$f(x)$在$[a, b]$上可积。</li><li>当$b=a$时，则$\int_a^a f(x){\rm d}x=0$。</li><li>$\int_a^b f(x){\rm d}x$=$-\int_b^a f(x){\rm d}x$。</li><li>$\int_a^b [\alpha f(x)+\beta g(x)]{\rm d}x$=$\alpha\int_a^b f(x){\rm d}x$+$\beta\int_a^b g(x){\rm d}x$。</li><li>当$a&lt;c&lt;b$时，$\int_a^b f(x){\rm d}x$=$\int_a^c f(x){\rm d}x$+$\int_c^b f(x){\rm d}x$。</li><li>在$[a, b]$上$f(x)\equiv 1$，则$\int_a^b 1{\rm d}x$=$\int_a^b {\rm d}x$=$b-a$。</li><li>在$[a, b]$上$f(x)≥0$($f(x)≤0$)，则$\int_a^b f(x){\rm d}x≥0$($\int_a^b f(x){\rm d}x≤0$)，其中$a&lt;b$。</li><li>在$[a, b]$上$f(x)≤g(x)$，则$\int_a^b f(x){\rm d}x≤\int_a^b g(x){\rm d}x$，其中$a&lt;b$。</li><li>$|\int_a^b f(x){\rm d}x|≤\int_a^b |f(x)|{\rm d}x$，其中$a&lt;b$。</li><li>若M及m分别是$f(x)$在$[a, b]$上的最大值和最小值，则$m(b-a)≤\int_a^b f(x){\rm d}x≤M(b-a)$，其中$a&lt;b$。</li><li>定积分中值定理：若$f(x)$在$[a, b]$上连续，$\exists \xi∈[a, b]$，使得$\int_a^b f(x){\rm d}x=f(\xi)(b-a)$。</li></ol><h3 id="微积分基本共识"><a href="#微积分基本共识" class="headerlink" title="微积分基本共识"></a>微积分基本共识</h3><ol><li>$f(x)$在$[a, b]$上连续，则积分上限的函数在$[a, b]$上可导，其导数为$\Phi^\prime(x)=\frac{d}{dx}\int_a^xf(t){\rm d}t=f(x)$，其中($a≤x≤b$)。</li><li>$\int_{\psi(x)}^{\phi(x)}[f(t){\rm d}t]^\prime=f(\phi(x))\phi^\prime(x)-f(\psi(x))\psi^\prime(x)$。</li><li>牛顿-莱布尼茨公式：$F(x)$是连续函数$f(x)$在$[a, b]$上的一个原函数，则$\int_a^bf(x){\rm d}x=F(b)-F(a)$。</li></ol><h3 id="定积分的换元法和分部积分法"><a href="#定积分的换元法和分部积分法" class="headerlink" title="定积分的换元法和分部积分法"></a>定积分的换元法和分部积分法</h3><ol><li>$x=\phi(t)$，若$\phi(\alpha)=a$，$\phi(\beta)=b$，则$\int_a^bf(x){\rm d}x=\int_{\alpha}^{\beta}f[\phi(t)]\phi^\prime(t){\rm d}t$。（一定要注意上下限也要替换。）</li><li>$f(x)$在$[-a, a]$上连续且为偶函数，则$\int_{-a}^af(x){\rm d}x=2\int_0^af(x){\rm d}x$；$f(x)$在$[-a, a]$上连续且为奇函数，则$\int_{-a}^af(x){\rm d}x=0$。</li><li>$f(x)$在$[0, 1]$上连续，则$\int_0^{\frac{\pi}{2}}f(sinx){\rm d}x=\int_0^{\frac{\pi}{2}}f(cosx){\rm d}x$，$\int_0^{\pi}xf(sinx){\rm d}x=\frac{\pi}{2}\int_0^{\pi}f(sinx){\rm d}x$。</li><li>$f(x)$是连续的周期函数，则$\int_a^{a+T}f(x){\rm d}x=\int_0^Tf(x){\rm d}x$，$\int_a^{a+nT}f(x){\rm d}x=n\int_0^Tf(x){\rm d}x$（$n∈N$）。</li><li>$\int_a^b u {\rm d}v=[uv]_a^b-\int_a^b v {\rm d}u$。</li></ol><h3 id="反常积分（广义积分）"><a href="#反常积分（广义积分）" class="headerlink" title="反常积分（广义积分）"></a>反常积分（广义积分）</h3><ol><li>无穷限的反常积分：<ul><li>$\int_a^{+\infty}f(x)dx=\lim \limits_{t \to +\infty}\int_a^tf(x){\rm d}x$，若极限存在则收敛，否则发散。</li><li>$\int_{-\infty}^{a}f(x)dx=\lim \limits_{t \to -\infty}\int_t^af(x){\rm d}x$，若极限存在则收敛，否则发散。</li><li>$\int_{-\infty}^{+\infty}f(x)dx=\int_{-\infty}^{0}f(x)dx+\int_{0}^{+\infty}f(x)dx$，若右式均收敛则左式收敛，否则发散。</li></ul></li><li>无界函数的反常积分：（注意函数无定义点。）<ul><li>若$f(x)$在$(a, b]$上连续，则a就是$f(x)$的瑕点。任取$t&gt;a$，则$\int_a^bf(x){\rm d}x=\lim \limits_{t \to a^+}\int_t^bf(x){\rm d}x$。</li><li>若$f(x)$在$[a, b)$上连续，则b就是$f(x)$的瑕点。任取$t&lt;b$，则$\int_a^bf(x){\rm d}x=\lim \limits_{t \to b^-}\int_a^tf(x){\rm d}x$。</li><li>若$f(x)$在$[a, c)$及$(c, b]$上连续，则c就是$f(x)$的瑕点。$\int_a^bf(x){\rm d}x=\int_a^cf(x){\rm d}x+\int_c^bf(x){\rm d}x$。</li></ul></li></ol><h3 id="Gamma-函数"><a href="#Gamma-函数" class="headerlink" title="$\Gamma$函数"></a>$\Gamma$函数</h3><ol><li>$\Gamma(s)$=$\int_0^{+\infty}e^{-x}x^{s-1}{\rm d}x$，其中$s&gt;0$。</li><li>$\Gamma(s+1)$=$s\Gamma(s)$，其中$s&gt;0$。</li><li>$\Gamma(n+1)=n!$。</li></ol><h2 id="定积分的应用"><a href="#定积分的应用" class="headerlink" title="定积分的应用"></a>定积分的应用</h2><h3 id="定积分在几何学上的应用"><a href="#定积分在几何学上的应用" class="headerlink" title="定积分在几何学上的应用"></a>定积分在几何学上的应用</h3><ol><li>平面图形的面积：$A=\int_a^bf(x){\rm d}x$。<ul><li>X型区域：若在x轴的$[a, b]$上$g(x)≤f(x)$，则$S=\int_a^b[f(x)-g(x)]{\rm d}x$。</li><li>Y型区域：若在y轴的$[c, e]$上$g(y)≤f(y)$，则$S=\int_c^e[f(y)-g(y)]{\rm d}y$。</li></ul></li><li>椭圆的面积：$S=\frac{ab\pi}{4}$。<ul><li>根据$sin^2t+cos^2t=1$与$(\frac{x}{a})^2+(\frac{y}{b})^2=1$推出$\begin{cases} x=acost\\y=bsint \end{cases}$，其中$0≤t≤\frac{\pi}{2}$。</li><li>$S=4\int_0^ay{\rm d}x=\int_0^{\frac{\pi}{2}}absin^2t{\rm d}t=\frac{\pi ab}{4}$</li></ul></li><li>极坐标情形：$A=\int_\alpha^\beta\frac{1}{2}[p(\theta)]^2{\rm d}\theta$。</li><li>旋转体的体积：<ul><li>X型区域：若在x轴的$[a, b]$上，$\int_a^b\pi f^2(x){\rm d}x$=$\int_a^bA(x){\rm d}x$。</li><li>Y型区域：若在y轴的$[c, e]$上，$\int_c^e\pi \phi^2(y){\rm d}y$=$\int_c^eA(y){\rm d}y$。</li></ul></li><li>旋转体的侧面积：曲线$y=f(x)≥0$，$a≤x≤b$，绕X轴旋转，得到的旋转体侧面积为$S=\int_a^b2\pi f(x)\sqrt{1+f^{\prime 2}(x)}{\rm d}x$。</li><li>光滑曲线弧是可求长的，求弧长公式为：<ul><li>$\begin{cases} x=\phi(t)\\y=\psi(t) \end{cases}$，其中$\alpha≤t≤\beta$，则$s=\int_\alpha^\beta\sqrt{\phi^{\prime 2}(t)+\psi^{\prime 2}(t)}{\rm d}t$。</li><li>$\begin{cases} x=x\\y=f(x) \end{cases}$，其中$a≤x≤b$，则$s=\int_a^b\sqrt{1+y^{\prime 2}}{\rm d}x$。</li><li>$\rho=\rho(\theta)$，($\alpha≤\theta≤\beta$)，$\begin{cases} x=x(\theta)=\rho(\theta)cos\theta\\y=y(\theta)=\rho(\theta)sin\theta \end{cases}$，$s=\int_\alpha^\beta\sqrt{\rho^2(\theta)+\rho^{\prime 2}(\theta)}{\rm d}\theta$。</li></ul></li></ol><h2 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h2><h3 id="微分方程的基本概念"><a href="#微分方程的基本概念" class="headerlink" title="微分方程的基本概念"></a>微分方程的基本概念</h3><ol><li>通俗说含导数的即微分方程。</li><li>任意常数的个数与微分方程的阶数相同，这样的解叫做微分方程的通解。</li></ol><h3 id="可分离变量的微分方程"><a href="#可分离变量的微分方程" class="headerlink" title="可分离变量的微分方程"></a>可分离变量的微分方程</h3><p>$y^\prime=f(x, y)$化为$g(y){\rm d}y=f(x){\rm d}x$，两边同时作积。</p><h3 id="齐次方程"><a href="#齐次方程" class="headerlink" title="齐次方程"></a>齐次方程</h3><ol><li>齐次方程：$\frac{dy}{dx}=\phi(\frac{y}{x})$，例如：$\frac{dy}{dx}=\frac{1+(\frac{y}{x})^2}{1-2(\frac{y}{x})^2}$，即$\frac{y}{x}$是整体出现的。求解步骤：<ul><li>$u=\frac{y}{x}$。</li><li>$y=xu$。</li><li>$\frac{dy}{dx}=u+x\frac{du}{dx}$。</li><li>分离变量。</li></ul></li><li>可化为齐次方程：$\frac{dy}{dx}=\frac{ax+by+c}{a_1x+b_1y+c_1}$，当$c=c_1$时是其次的，否则是非齐次的。将非齐次化作齐次方程令$x=X+h$，$y=Y+k$，所以$\frac{dY}{dX}=\frac{aX+bY+ah+bk+c}{a_1X+b_1Y+a_1h+b_1k+c_1}$，若方程组$\begin{cases} ah+bk+c=0,\\a_1h+b_1k+c_1=0\end{cases}$中：<ul><li>若$\frac{a_1}{a}≠\frac{b_1}{b}$，则$\frac{dY}{dX}=\frac{aX+bY}{a_1X+b_1Y}$。</li><li>若$\frac{a_1}{a}=\frac{b_1}{b}$，则令$\frac{a_1}{a}=\frac{b_1}{b}=\lambda$，$\frac{dy}{dx}=\frac{ax+by+c}{\lambda(ax+by)+c_1}$，引入变量$v=ax+by$，则$\frac{dv}{dx}=a+b\frac{dy}{dx}$或$\frac{dy}{dx}=\frac{1}{b}(\frac{dv}{dx}-a)$，于是最终方程为$\frac{1}{b}(\frac{dv}{dx}-a)=\frac{v+c}{\lambda v+c_1}$。</li></ul></li></ol><h3 id="一阶线性微分方程"><a href="#一阶线性微分方程" class="headerlink" title="一阶线性微分方程"></a>一阶线性微分方程</h3><p>$\frac{dy}{dx}+P(x)y=Q(x)$称为一阶线性微分方程：</p><ul><li>若$Q(x)\equiv 0$则称为齐次线性微分方程，其通解为$y=Ce^{-\int P(x){\rm d}x}$，其中$C=±e^{C_1}$。</li><li>若$Q(x)≠0$则称为非齐次线性微分方程，另$y=ue^{-\int P(x){\rm d}x}$代入原方程可得到其特解$y=e^{-\int P(x){\rm d}x}(\int Q(x)e^{\int P(x){\rm d}x}{\rm d}x+C)$，其解为通解加上特解为$y=Ce^{-\int P(x){\rm d}x}+e^{-\int P(x){\rm d}x}\int Q(x)e^{\int P(x){\rm d}x}{\rm d}x$。</li></ul><h3 id="可降阶的高阶微分方程"><a href="#可降阶的高阶微分方程" class="headerlink" title="可降阶的高阶微分方程"></a>可降阶的高阶微分方程</h3><ol><li>$y^{(n)}=f(x)$：几阶导就求几次积分。</li><li>$y^{\prime\prime}=f(x, y^\prime)$：设$y^\prime=p$，则$y^{\prime\prime}=p^\prime$，$p^\prime=f(x, p)$，分离变量求积。</li><li>$y^{\prime\prime}=f(y, y^\prime)$：设$y^\prime=p$，则$y^{\prime\prime}=p^\prime=\frac{dp}{dx}=\frac{dp}{dy}\frac{dy}{dx}=p\frac{dp}{dy}$，分离变量求积。</li></ol><h3 id="高阶线性微分方程"><a href="#高阶线性微分方程" class="headerlink" title="高阶线性微分方程"></a>高阶线性微分方程</h3><ol><li>二阶齐次线性方程：$y^{\prime\prime}+P(x)y^\prime+Q(x)y=0$，其解为$y=C_1y_1(x)+C_2y_2(x)$。</li><li>二阶非齐次线性方程：$y^{\prime\prime}+P(x)y^\prime+Q(x)y=f(x)$，设$y^<em>(x)$是特解，$Y(x)$是通解，则其解为$y=Y(x)+y^</em>(x)$。</li></ol><h3 id="常系数齐次线性微分方程"><a href="#常系数齐次线性微分方程" class="headerlink" title="常系数齐次线性微分方程"></a>常系数齐次线性微分方程</h3><p>将$y^{\prime\prime}+P(x)y^\prime+Q(x)y=0$写为$y^{\prime\prime}+py^\prime+qy=0$，求解：</p><table><tbody><tr><th>$r^2+pr+q=0$</th><th>$y^{\prime\prime}+P(x)y^\prime+Q(x)y=0$</th></tr><tr><td>$p^2-4q&gt;0$，$r=\frac{-p±\sqrt{p^2-4q}}{2}$</td><td>$y=C_1e^{r_1x}+C_2e^{r_2x}$</td></tr><tr><td>$p^2-4q=0$，$r=-\frac{p}{2}$</td><td>$y=(C_1+C_2x)e^{r_1x}$</td></tr><tr><td>$p^2-4q&lt;0$，$r=\alpha ±\beta i$，$\alpha=-\frac{p}{2}, \beta=\frac{\sqrt{4q-p^2}}{2}$</td><td>$e^{\alpha x}(C_1cos\beta x+C_2sin\beta x)$</td></tr></tbody></table><h3 id="常系数非齐次线性微分方程"><a href="#常系数非齐次线性微分方程" class="headerlink" title="常系数非齐次线性微分方程"></a>常系数非齐次线性微分方程</h3><ol><li><p>$f(x)=e^{\lambda x}P_m(x)$，其特解为：$y*=e^{\lambda x}Q_m(x)$，</p><ul><li>$\lambda=\begin{cases} 0,&amp;\lambda与特征方程两个特征根均不相等\\1&amp;\lambda与特征方程其中一个特征根相等\\2&amp;\lambda与特征方程两个特征根均相等 \end{cases}$。</li><li>$Q_m(x)$与$P_m(x)$是同次的多项式，例如$P_m(x)=x^2+3$，则$Q_m(x)=ax^2+bx+c$。</li></ul></li><li><p>$f(x)=e^{\lambda x}[P_l(x)cos\psi x+Q_n(x)sin \psi x]$，其特解为：$y^*=x^ke^{\lambda x}[R_m^{(1)}(x)cos\psi x+R_m^{(2)}(x)sin\psi x]$，</p><ul><li>$\lambda=\begin{cases} 0,&amp;\lambda±i\psi不是特征方程的根 \\1,&amp;\lambda±i\psi是特征方程的根 \end{cases}$。</li><li>$P_l(x)$和$Q_n(x)$是两个多项式，$R_m(x)$中的$m=Max\{l, n\}$。</li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数</title>
      <link href="/posts/c23efd5b/"/>
      <url>/posts/c23efd5b/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/linearAlgebra.png"></p><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><h3 id="行列式定义"><a href="#行列式定义" class="headerlink" title="行列式定义"></a>行列式定义</h3><ol><li>$\begin{vmatrix} a&amp;b\\ c&amp;d \end{vmatrix}=ad-bc$</li><li>三阶行列式：展开式共六项，其中三个正项，三个负项。（n 阶行列式展开式共 n! 项。）</li><li>n 阶行列式：行取自然排列（例123），列取排列所有可能（例123、132、$\dots$），不同行不同列取 n 个元素相乘，符号由列标排列逆序数的奇偶决定。</li><li>下三角、上三角和对角形的行列式为主对角线元素相乘。</li><li>山寨下三角、山寨上三角和山寨对角形的行列式为 $(-1)^{\frac{n(n-1)}{2}}$ 与次对角线元素相乘。</li></ol><h3 id="行列式性质"><a href="#行列式性质" class="headerlink" title="行列式性质"></a>行列式性质</h3><ol><li>转置：$D^T=D$</li><li>交换两行（列），行列式变号。</li><li>两行（列）元素相等，D=0。</li><li>某一行（列）有公因子 k，k 外提一次。<br>所有行（列）都有公因子 k，k 外提 n 次。</li><li>两行（列）元素成比例，D=0。</li><li>某一行（列）元素全为0，D=0。</li><li>某一行（列）元素全是两数之和，拆成两个行列式。（只拆该行或列，其余行或列保持不变。）</li><li>某一行（列）乘以一个数加到另一行（列），D 不变。</li></ol><h3 id="行列式展开"><a href="#行列式展开" class="headerlink" title="行列式展开"></a>行列式展开</h3><ol><li>D = 某一行（列）元素与其代数余子式乘积之和。（将$(i, j)$所在的行列划去留下的就是余子式，代数余子式是带符号的余子式，其符号为$(-1)^{i+j}$。）</li><li>异乘变零：某行（列）元素与其他行（列）的代数余子式乘积之和为0。</li><li>拉普拉斯定理：任取 k 行（列），由这 k 行（列）元素组成的所有 k 阶子式与其代数余子式乘积之和为 D。（常用于解某一块都是0的行列式。）</li><li>克拉默法则：n 个方程 n 个未知数的方程组，系数行列式若不等于0则有唯一解：$x_i=\frac{D_i}{D}$，其中 $D_i$ 为用常数项替代 i 列，而其他列不变的行列式的值。n 个方程 n 个未知数的齐次方程组，系数行列式若不等于0则有零解；若等于0则有非零解。</li><li>范德蒙德行列式： $$\begin{vmatrix} 1&amp;1&amp;\cdots&amp;1\\ x_1&amp;x_2&amp;\cdots&amp;x_n\\ \cdots&amp;\cdots&amp;\cdots&amp;\cdots\\ {x_{1}}^{n-1}&amp;{x_{2}}^{n-1}&amp;\cdots&amp;{x_{n}}^{n-1} \end{vmatrix}=\prod_{1≤j&lt;i≤n}(x_i-x_j)$$</li><li>对称行列式主对角线无要求，上下位置对应相等；反对称行列式主对角线全为零，上下位置对应成相反数。</li></ol><h2 id="矩阵及其运算"><a href="#矩阵及其运算" class="headerlink" title="矩阵及其运算"></a>矩阵及其运算</h2><h3 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h3><ol><li>负矩阵：A，-A；n阶方阵：行数=列数，$A_{n×n}=A_n$；单位阵：方阵对角线都是1，其余为0，记作E。</li><li>矩阵加（减）法：同型矩阵，对应元素相加（减）。</li><li>矩阵数乘：kA，用 k 乘以 A 的每个元素。</li><li>矩阵提公因子：每个元素都有公因子则向外提一次。</li><li>AB 相乘条件：A 的列数=B 的行数。</li><li>C=AB，结果矩阵形状：C 的行数=A 的行数；C 的列数=B 的列数。</li><li>矩阵乘法不满足：<ul><li>AB 一般不等于 BA。</li><li>AB=AC，且 A≠0，推不出 B=C。</li><li>AB=0，推不出 A=0，或 B=0。</li></ul></li><li>与零矩阵相乘：$A_{4×3}O_{3×2}=O_{4×2}$；<br> 与E相乘：$AE=A$，$EB=B$；<br> 运算规则：$\begin{cases}(AB)C=A(BC)\\(A+B)C=AC+BC\\k(A+B)=(kA)B=A(kB)\end{cases}$。</li><li>次幂：$A^k=AA\cdots A$（k 个 A 相乘）。</li><li>$A^m×A^n=A^{m+n}$<br>$(A^m)^n=A^{mn}$<br>$(P^{-1}AP)^n=P^{-1}A^nP$</li><li>$(A^T)^T=A$<br>$(kA)^T=kA^T$<br>$(A+B)^T=A^T+B^T$<br>$(AB)^T=B^TA^T$</li><li>$diag(1, 2, 3)=\begin{bmatrix}1&amp;0&amp;0\\0&amp;2&amp;0\\0&amp;0&amp;3\end{bmatrix}$。</li><li>对称矩阵：$A^T=A$<br>反对称矩阵：$A^T=-A$</li><li>$|A^T|=|A|$<br>$|kA|=k^n|A|$<br>$|AB|=|A||B|$</li><li>分块矩阵求转置分两步：<ul><li>将分块矩阵的块看作普通元素求转置。</li><li>对每一个块求转置。</li><li>$\begin{bmatrix} A_1&amp;0&amp;0&amp;0\\0&amp;A_2&amp;0&amp;0\\0&amp;0&amp;A_3&amp;0\\0&amp;0&amp;0&amp;A_4 \end{bmatrix}$=$\begin{bmatrix} A_1^{-1}&amp;0&amp;0&amp;0\\0&amp;A_2^{-1}&amp;0&amp;0\\0&amp;0&amp;A_3^{-1}&amp;0\\0&amp;0&amp;0&amp;A_4^{-1} \end{bmatrix}$；$H=\begin{bmatrix} A&amp;C\\0&amp;B \end{bmatrix}$，$H^{-1}=\begin{bmatrix} A^{-1}&amp;A^{-1}CB^{-1}\\0&amp;B^{-1} \end{bmatrix}$。</li></ul></li><li>标准形：<ul><li>对角线全0或全1。</li><li>对角线从上到下是连续的1和连续的0。</li><li>可以不是方阵。</li></ul></li></ol><h3 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h3><ol><li>逆矩阵：$AB=BA=E$，逆矩阵一定是方阵。<br>推论：$AB=E$，A, B 均可逆，所以 $A^{-1}=B$, $B^{-1}=A$</li><li>求 $A^{-1}$：<ul><li>伴随矩阵法：$A^{-1}=\frac{1}{|A|}A^*$</li><li>初等变换法：$(\begin{array}{c:c}A&amp;E\end{array}) \longrightarrow (\begin{array}{c:c}E&amp;A^{-1}\end{array})$</li></ul></li><li>$(A^{-1})^{-1}=A$<br>$(AB)^{-1}=B^{-1}A^{-1}$</li><li>$(A^T)^{-1}=(A^{-1})^T$<br>$(kA)^{-1}=\frac{1}{k}A^{-1}$</li><li>$|A^{-1}|=\frac{1}{|A|}$<br>$(A^{-1})^{\ast}=(A^*)^{-1}=\frac{1}{|A|}A$</li><li>A 可逆则 $|A|≠0$。</li></ol><h3 id="伴随矩阵"><a href="#伴随矩阵" class="headerlink" title="伴随矩阵"></a>伴随矩阵</h3><ol><li>按行求代数余子式，按列放，伴随矩阵一定是方阵。</li><li>$AA^{\ast}=A^{\ast}A=|A|E$</li><li>$|A^{\ast}|=|A|^{n-1}$</li><li>$A^{-1}=\frac{1}{|A|}A^{\ast} \longrightarrow A^{\ast}=|A|A^{-1}$</li><li>$R(A^{\ast})=\begin{cases} n,&amp;若 R(A)=n\\ 1,&amp;若 R(A)=n-1\\ 0,&amp;若 R(A)&lt;n-1 \end{cases}$</li></ol><h2 id="矩阵的初等变换"><a href="#矩阵的初等变换" class="headerlink" title="矩阵的初等变换"></a>矩阵的初等变换</h2><h3 id="初等矩阵初等变换"><a href="#初等矩阵初等变换" class="headerlink" title="初等矩阵初等变换"></a>初等矩阵初等变换</h3><ol><li>三种初等行变换，三种初等列变换：<ul><li>交换两行（列）。</li><li>用一个非0数乘某一行（列）。</li><li>某一行（列）的 k 倍加到另一行（列）上去。</li></ul></li><li>等价：AB 是同型矩阵，A 经初等变换得到 B（同型矩阵行列相等）。</li><li>等价：AB 是同型矩阵，存在可逆 P, Q，使得 $PAQ=B$。</li><li>初等矩阵即对E做y一次初等变换得到的矩阵。</li><li>初等矩阵均可逆，其逆矩阵也是初等矩阵，转置矩阵也是初等矩阵。</li><li>初等矩阵左乘 A，相当于对 A 做初等行变换。<br>初等矩阵右乘 A，相当于对 A 做初等列变换。</li><li>初等矩阵 $E(i, j)$ 表示交换 i, j 行。其中 $|E(i, j)|=-1$，$E^{-1}(i, j)=E(i, j)$。<br>初等矩阵 $E(i(k))$ 表示用 k 乘第 i 行。其中 $|E(i(k))|=k$，$E^{-1}(i(k))=E(i(\frac{1}{k}))$。<br>初等矩阵 $E(i, j(k))$ 表示用第 j 行的 k 倍加到第 i 行上。其中 $|E(i, j(k))|=1$，$E^{-1}(i, j(k))=E(i, j(-k))$。</li></ol><h3 id="矩阵的秩"><a href="#矩阵的秩" class="headerlink" title="矩阵的秩"></a>矩阵的秩</h3><ol><li>R(A)：非零子式的最高阶数。</li><li>零矩阵的秩为0。</li><li>$0≤R(A)≤min\{行数, 列数\}$，若$R(A)=min\{行数, 列数\}$则称为满秩，若$R(A)＜min\{行数, 列数\}$则称为降秩。</li><li>若A是方阵且满秩即|A|≠0，则A可逆。</li><li>$R(A)=r \Longleftrightarrow $有一个 r 阶非零子式，所有 r+1 阶子式均为0。</li><li>初等变换（行, 列）不改变矩阵的秩。</li><li>求 R(A)，将 A 化为阶梯型（初等行列变换均可），数非零行的行数。阶梯型画线横线可跨多个数，竖线只能跨一个数。行简化阶梯型：在阶梯型的基础上，非零行的首非零元是1；首非零元所在列其余元素是0。</li><li>$R(A)=R(A^T)$</li><li>P, Q 可逆，$R(A)=R(PA)=R(AQ)=R(PAQ)$。</li><li>$max\{R(A), R(B)\}≤R(A, B)≤R(A)+R(B)$</li><li>$R(A+B)≤R(A)+R(B)$</li><li>$R(AB)≤min\{R(A), R(B)\}$</li><li>$A_{m×n}·B_{n×l}=0$，则 $R(A)+R(B)≤n$。</li><li>$A·B=0$，若 A 为列满秩矩阵，则 $B=0$。（列满秩矩阵即矩阵的秩等于矩阵的列数。）</li></ol><h2 id="向量组的线性相关性"><a href="#向量组的线性相关性" class="headerlink" title="向量组的线性相关性"></a>向量组的线性相关性</h2><h3 id="向量的线性组合"><a href="#向量的线性组合" class="headerlink" title="向量的线性组合"></a>向量的线性组合</h3><ol><li>$kα=0 \Longleftrightarrow k=0 或 α=0$</li><li>零向量可由任意向量组表示。</li><li>向量组中的一个向量可由该向量组表示。</li><li>任意向量可由单位向量组表示。</li><li>向量组等价：两向量组可相互表示。</li></ol><h3 id="线性相关-amp-amp-线性无关"><a href="#线性相关-amp-amp-线性无关" class="headerlink" title="线性相关 &amp;&amp; 线性无关"></a>线性相关 &amp;&amp; 线性无关</h3><ol><li>线性相关：存在不全是0的 $k_1, \cdots, k_n$，使 $kα_1+ \cdots +kα_n=0$。</li><li>线性无关：$kα_1+ \cdots +kα_n=0$ 成立，$k_1, \cdots, k_n$ 全取0。</li></ol><h3 id="线性相关、无关的性质"><a href="#线性相关、无关的性质" class="headerlink" title="线性相关、无关的性质"></a>线性相关、无关的性质</h3><ol><li>向量组中两个向量分量成比例，向量组线性相关。</li><li>一个零向量线性相关，一个非零向量线性无关。</li><li>含零向量的向量组必线性相关。</li><li>部分组线性相关，则整体组线性相关。<br>整体组线性无关，则部分组线性无关。</li><li>向量组线性无关，则接长组线性无关。<br>向量组线性相关，则截短组线性相关。</li><li>n 个 n 维向量线性无关 $\Longleftrightarrow D≠0$<br>n 个 n 维向量线性相关 $\Longleftrightarrow D=0$</li></ol><h3 id="线性相关、无关的定理"><a href="#线性相关、无关的定理" class="headerlink" title="线性相关、无关的定理"></a>线性相关、无关的定理</h3><ol><li>向量线性相关 $\Longleftrightarrow$ 至少一个向量是其余向量的线性组合。</li><li>$α_1, \cdots, α_s$ 线性无关，$α_1, \cdots, α_s, β$ 线性相关，则 β 可由 $α_1, \cdots, α_s$ 唯一线性表示。</li><li>$α_1, \cdots, α_s$ 线性无关，可由 $β_1, \cdots, β_t$ 线性表示，则 $s≤t$。</li><li>$α_1, \cdots, α_s$ 可由 $β_1, \cdots, β_t$ 线性表示，且 $s&gt;t$，则 $α_1, \cdots, α_s$ 线性相关。</li><li>向量个数 &gt; 向量维数，向量组线性相关。</li><li>n+1 个 n 维向量必线性相关。</li><li>等价的线性无关的向量组，含相同个数的向量。</li></ol><h3 id="极大线性无关组"><a href="#极大线性无关组" class="headerlink" title="极大线性无关组"></a>极大线性无关组</h3><ol><li>线性无关组的定义：$α_1, α_2, \cdots, α_r$ 的部分组如 $α_1, α_2$ 无关且每个向量均可由 $α_1, α_2$ 表示。</li><li>线性无关向量组的极大无关组是本身。</li><li>向量组与其极大无关组等价。</li><li>向量组的不同极大无关组含向量个数相同。</li><li>向量组的秩：极大无关组含向量的个数。</li><li>$0≤R(α_1, \cdots, α_s)≤min\{向量个数, 向量维数\}$</li><li>A 的行秩=A 的列秩= R(A)</li><li>$R(AB)≤min\{R(A), R(B)\}$</li><li>求极大线性无关组：<ul><li>不管向量是行或列，均按行构成矩阵。</li><li>只做初等行变化，化成行最简形矩阵。</li><li>首非零元所在列做极大无关组。</li><li>其余向量表示系数直接写出即可。</li></ul></li></ol><h2 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h2><h3 id="AX-B-有解判定"><a href="#AX-B-有解判定" class="headerlink" title="AX=B 有解判定"></a>AX=B 有解判定</h3><ol><li>$R(A)=R(Ā)=n$，有唯一解。（$R(Ā)$是带上等式右边的矩阵的秩。）</li><li>$R(A)=R(Ā)&lt;n$，有无穷解。</li><li>$R(A)≠R(Ā)$，无解。</li><li>一般解计算方法：<ul><li>写出Ā。</li><li>通过初等行变化转换成阶梯型。</li><li>判断解的个数。</li><li>化为行简化阶梯型，非零行的首非零元留在等式左边，其余变量留在等式右边得一般解。</li></ul></li></ol><h3 id="AX-0-齐次方程组"><a href="#AX-0-齐次方程组" class="headerlink" title="AX=0 齐次方程组"></a>AX=0 齐次方程组</h3><ol><li>齐次方程组一定有解，至少有零解。</li><li>齐次方程组仅有零解 $\Longleftrightarrow R(A)=n$。</li><li>齐次方程组有非零解 $\Longleftrightarrow R(A)&lt;n$。</li><li>齐次方程组中，方程个数&lt;未知数个数，有非零解。</li><li>齐次方程组中，方程个数=未知数个数，<br>有非零解 $\Longleftrightarrow$ 系数行列式等于零；<br>仅有零解 $\Longleftrightarrow$ 系数行列式不等于零。</li></ol><h3 id="AX-0-解的结构"><a href="#AX-0-解的结构" class="headerlink" title="AX=0 解的结构"></a>AX=0 解的结构</h3><ol><li>$AX=0$ 的两个解相加仍然是解。</li><li>η 是 $AX=0$ 的解，则 cη 也是解。</li><li>$AX=0$ 的解的线性组合仍然是解。</li><li>基础解系：$η_1, \cdots, η_s$ 是解，满足：<ul><li>$η_1, \cdots, η_s$ 线性无关。</li><li>任意解可有 $η_1, \cdots, η_s$ 表示。</li></ul></li><li>$AB=0$，则 $R(A)+R(B)≤n$。</li></ol><h3 id="AX-B-解的结构"><a href="#AX-B-解的结构" class="headerlink" title="AX=B 解的结构"></a>AX=B 解的结构</h3><ol><li>$AX=B \longrightarrow AX=0$（导出组） </li><li>$AX=B$ 的两个解相减是 $AX=0$ 的解。</li><li>$AX=B$ 的一个解和 $AX=0$ 的一个解相加是 $AX=B$ 的另一个解。</li><li>$AX=B$ 的通解：特解 + 基础解系的线性组合。<ul><li>$AX=B$ 的一个特解。</li><li>$AX=0$ 的基础解系。</li></ul></li></ol><h2 id="相似矩阵及其二次型"><a href="#相似矩阵及其二次型" class="headerlink" title="相似矩阵及其二次型"></a>相似矩阵及其二次型</h2><h3 id="特征值-amp-amp-特征向量"><a href="#特征值-amp-amp-特征向量" class="headerlink" title="特征值 &amp;&amp; 特征向量"></a>特征值 &amp;&amp; 特征向量</h3><ol><li>$Aα=λα$，其中$λ$是特征值，$α$是对应于$λ$的特征向量。特征值可以是零，特征向量是非零向量。</li><li>$|λE-A|=0$，用于求特征值。<br>$(λE-A)X=0$ 的非零解，用于求特征向量。<br>解法：<ul><li>1.写出$|λE-A|$。</li><li>2.把某行尽可能转化为零后再按行展开。</li><li>3.提关于$λ$的公因子。</li><li>4.将$λ$代入$|λE-A|$，做初等行变化转换成行简化阶梯型，计算其基础解系。</li></ul></li><li>A 和 $A^T$ 有相同的特征值。</li><li>$\sum λ_i=\sum a_{ii}$<br>$λ_1, \cdots, λ_n=|A|$</li><li>矩阵的迹 $tr(A)=\sum a_{ii}$</li><li>不同特征值对应的特征向量线性无关。（实对称矩阵，不同特征值对应的特征向量一定正交。）</li><li>k 重特征值的线性无关的特征向量个数小于等于 k 个。</li><li>kλ 是 kA 的特征值。</li><li>$λ^k$ 是 $A^k$ 的特征值。</li><li>求 A 的多项式的特征值：A 替换成 λ，E 替换成 1。</li><li>$λ^{-1}$ 是 $A^{-1}$ 的特征值。</li><li>$\frac{1}{λ}|A|$ 是 $A^*$ 的特征值</li></ol><h3 id="相似矩阵"><a href="#相似矩阵" class="headerlink" title="相似矩阵"></a>相似矩阵</h3><ol><li>A, B 是同阶方阵，存在可逆 P，$P^{-1}AP=B$。</li><li>相似矩阵具有反身性，对称性和传递性。</li><li>$A\sim B\begin{cases} A, B 有相同的特征值。\\ |A|=|B|\\ tr(A)=tr(B)\\ |A|和|B| 同时为零或同时不为零，因此 A, B 同时不可逆或同时可逆。\\ A, B 若可逆则 A^{-1}\sim B^{-1}。\\ A^m\sim B^m \end{cases}$</li></ol><h3 id="对角化"><a href="#对角化" class="headerlink" title="对角化"></a>对角化</h3><ol><li>A 相似于对角行 $\Longleftrightarrow$ A 有 n 个线性无关的特征向量。</li><li>A 有 n 个互异特征值，可对角化。</li><li>不管单根，若每个 k 重特征根，都有 k 个特征向量，则可对角化。</li><li>特征向量做列构成 P， 特征值做主对角线构成 A，特征值和特征向量位置对应。</li></ol><h3 id="内积"><a href="#内积" class="headerlink" title="内积"></a>内积</h3><ol><li>$[α, β]=α^Tβ$，若 α, β 是列向量。</li><li>内积是一个数。</li><li>$[α, α]≥0$, $[α, α]=0$ $\Longleftrightarrow$ $α=0$</li><li>$[α, β]=[β, α]$<br>$[kα, β]=k[β, α]=k[α, β]$<br>$[α+β, γ]=[α, γ]+[β, γ]$</li><li>长度 $||α||=\sqrt{[α, α]}$<br>$||α||^2=[α, α]$<br>$[α, α]=||α||^2$</li><li>$||α||≥0$, $||α||=0$ $\Longleftrightarrow$ $α=0$</li><li>$||kα||=|k|·||α||$<br>$|[α, β]|≤||α||·||β||$</li><li>$||α+β||≤||α||+||β||$</li><li>$[α, β]=0$，即正交，$α \bot β$。</li><li>正交向量组：不含零向量，两两正交。</li><li>标准正交向量组：正交向量组，每个向量都是单位向量。</li><li>施密特正交化：<br>$α_1, α_2, α_3$ | $β_1, β_2, β_3$<br>$β_1=α_1$<br>$β_2=α_2-\frac{[α_2, β_1]}{[β_1, β_1]}β_1$<br>$β_3=α_3-\frac{[α_3, β_1]}{[β_1, β_1]}β_1-\frac{[α_3, β_2]}{[β_2, β_2]}β_2$<br>$\cdots$</li></ol><h3 id="正交"><a href="#正交" class="headerlink" title="正交"></a>正交</h3><ol><li>A 是方阵，$A^TA=E$，A 为正交矩阵。</li><li>A 正交，$|A|=1 或 -1$，$|A^{-1}|=A^T$。</li><li>A 正交，$A^{-1}$ 和 $A^T$ 也正交。<br>A, B 正交，$AB$ 也正交。</li><li>A 正交，$[Aα, Aβ]=[α, β]$。</li><li>A 正交 $\Longleftrightarrow$ 列（行）向量组是标准正交向量组。</li></ol><h3 id="正交相似"><a href="#正交相似" class="headerlink" title="正交相似"></a>正交相似</h3><ol><li>实对称矩阵 A 的不同特征值的特征向量必正交。</li><li>正交相似：A, B 是同阶方阵，存在正交 P，$P^{-1}AP=B$。</li><li>A 是实对称矩阵，存在正交 Q，$Q^{-1}AQ=\bigwedge$。</li><li>Q：正交单位化后的特征向量做列。<br>$\bigwedge$：特征值作为主对角线元素。</li></ol><h3 id="二次型"><a href="#二次型" class="headerlink" title="二次型"></a>二次型</h3><ol><li>二次型 $\longrightarrow$ 矩阵：<ul><li>平方项系数做主对角线。</li><li>交叉项系数除以二放两对称位置。</li></ul></li><li>矩阵 $\longrightarrow$ 二次型：<ul><li>主对角线做平方项系数。</li><li>主对角线右上角元素乘以二做交叉项系数。（如矩阵不对称则先将矩阵化为对称矩阵）</li></ul></li><li>二次型的矩阵对称。</li><li>$X=CY$，线性替换。</li></ol><h3 id="合同"><a href="#合同" class="headerlink" title="合同"></a>合同</h3><ol><li>A, B 是 n 阶方阵，存在可逆 C，$C^TAC=B$。</li><li>合同矩阵具有反身性，对称性和传递性。</li><li>$A\simeq B\begin{cases} R(A)=R(B)\\ A 对称 \Longleftrightarrow B 对称\\ A, B 可逆，A^{-1}\simeq B^{-1}\\ A^T\simeq B^T \end{cases}$</li></ol><h3 id="标准形"><a href="#标准形" class="headerlink" title="标准形"></a>标准形</h3><ol><li>标准形：只有平方项，没有交叉项。</li><li>标准形不唯一。</li><li>化标准形三种方法：<ul><li>配方法：先处理 $x_1$，使后边的项中不再出现 $x_1$，再依次对 $x_2, x_3, \cdots, x_n$ 进行配方法处理。</li><li>初等变换法：$(\begin{array}{c:c}A\\E\end{array}) \longrightarrow (\begin{array}{c:c}\bigwedge\\C\end{array})$（对 A, E 做列变换，只对 A 做相应的行变换，$\bigwedge$是对角矩阵即除了对角线以外都是零。）</li><li>正交替换法：正交 Q，$Q^TAQ=\bigwedge$。，</li></ul></li></ol><h3 id="规范形"><a href="#规范形" class="headerlink" title="规范形"></a>规范形</h3><ol><li>规范形：只有平方项，系数只能为1, -1, 0，且变量的下标是连着的。（1, -1, 0 系数不可变换位置）</li><li>规范形是唯一的。</li><li>正惯性指数：规范形的正项个数。<br>负惯性指数：规范形的负项个数。<br>符号差：正惯性指数-负惯性指数。</li><li>$A\simeq B$ $\Longleftrightarrow$ 有相同的秩和正惯性指数。</li></ol><h3 id="正定"><a href="#正定" class="headerlink" title="正定"></a>正定</h3><ol><li>二次型 $X^TAX$，任意 $X≠0$：<ul><li>$X^TAX&gt;0$，正定。</li><li>$X^TAX&lt;0$，负定。</li><li>$X^TAX≥0$，半正定。</li><li>$X^TAX≤0$，半负定。</li></ul></li><li>正定二次型经过非退化替换仍化为正定二次型。</li><li>二次型正定 $\Longleftrightarrow$ 标准形每个变量的系数都大于零。</li><li>二次型正定 $\Longleftrightarrow$ 正惯性指数为 n。</li><li>A 正定，$|A|&gt;0$。</li><li>A 正定 $\Longleftrightarrow$ A 的特征值都大于零。</li><li>A 正定 $\Longleftrightarrow$ A 各阶顺序主子式大于零。</li><li>A 正定 $\longrightarrow$ ①$A^{-1}正定$②${A^*正定}$③$A^k正定$④A 主对角线元素都大于零。</li><li>A 正定，B（半）正定 $\longrightarrow$ A+B 正定。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="外提-k"><a href="#外提-k" class="headerlink" title="外提 k"></a>外提 k</h3><ol><li>行列式一行（列）有公因子 k，向外提一次。</li><li>矩阵所有元素都有公因子 k，向外提一次。</li><li>向量所有分量都有公因子 k，向外提一次。</li><li>$|kA|=k^n|A|$</li><li>$(kA)^{-1}=\frac{1}{k}A^{-1}$</li><li>$(kA)^<em>=k^{n-1}A^</em>$</li><li>$(kA)^T=kA^T$</li><li>$[kα, β]=k[α, β]$</li><li>$||kα||=|k|·||α||$</li></ol><h3 id="方阵-A-可逆充要条件"><a href="#方阵-A-可逆充要条件" class="headerlink" title="方阵 A 可逆充要条件"></a>方阵 A 可逆充要条件</h3><ol><li>$|A|≠0$</li><li>A 满秩。（R(A)=行，R(A)=列。）</li><li>A 的标准形是 E。</li><li>$A=E_1E_2 \cdots E_s$，$E_i$是初等矩阵。</li><li>A 的所有特征值不为0。</li><li>$R(A)=n$</li><li>$A 的行秩=A 的列秩=R(A)=n$</li><li>A 的行（列）向量组无关。</li><li>A 的非零子式最高阶数为 n。</li><li>AX=0 只有零解。<br>AX=B 有唯一解。</li></ol><h3 id="等价、相似、正交相似、合同"><a href="#等价、相似、正交相似、合同" class="headerlink" title="等价、相似、正交相似、合同"></a>等价、相似、正交相似、合同</h3><ol><li>$\cong$ 等价：A, B 同型，存在可逆 P, Q，$PAQ=B$。</li><li>$\sim$ 相似：A, B 方阵，存在可逆 P，$P^{-1}AP=B$。</li><li>$\sim$ 正交相似：A, B 方阵，存在正交 P，$P^{-1}AP=B$。</li><li>$\simeq$ 合同：A, B 方阵，存在可逆 P，$P^TAP=B$。</li><li>正交相似肯定相似，且一定合同（$P^{-1}=P^T$）。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django（二）：ORM</title>
      <link href="/posts/b179370b/"/>
      <url>/posts/b179370b/</url>
      
        <content type="html"><![CDATA[<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>Django ORM 默认使用 SQLite 数据库，它是一款轻型的数据库，是遵守ACID的关系型数据库管理系统，它包含在一个相对小的 C 库中。也可以使用其他数据库，例如 MySQL，修改 Django 的默认连接为 MySQL<br> 方式之后，即可通过 Django 的 ORM 操作 MySQL 数据库。</p><h2 id="默认数据库连接"><a href="#默认数据库连接" class="headerlink" title="默认数据库连接"></a>默认数据库连接</h2><p>修改默认数据库连接可以通过修改主目录文件夹下的 settings.py 文件中的 DATABASES 参数。此处以 MySQL 为例，代码如下：</p><pre class=" language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'数据库名'</span><span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token string">'3306'</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果是低版本的 pymysql 连接数据库则还需要再主目录文件夹下的 __init__.py 文件夹中输入如下代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqlpymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h2><p>Django 支持在应用的 models.py 中进行数据表的增删改操作，示例代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment" spellcheck="true"># 此处User在数据库中的表名为user.user，因为该models在user应用下，其中类名会自动小写。</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 此处department在数据库中的字段名为department_id，Django会自动增加_id为尾缀</span>    department <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">"Department"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Department</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span></code></pre><h3 id="字段参考"><a href="#字段参考" class="headerlink" title="字段参考"></a>字段参考</h3><table><thead><tr><th>字段名</th><th>作用</th></tr></thead><tbody><tr><td>models.AutoField</td><td>int 类型=int(11)。如果类中没有 models.AutoField，则默认会创建一个字段名为 id 的自增列，且默认标注为主键。</td></tr><tr><td>models.CharField</td><td>字符串类型=varchar。必须有 max_length 参数。</td></tr><tr><td>models.BooleanField</td><td>boolean 类型=tinyint(1)。不能为空，Blank=True。</td></tr><tr><td>models.ComaSeparatedIntegerField</td><td>用逗号分割的数字=varchar。继承CharField，所以必须 max_length 参数。</td></tr><tr><td>models.DateField</td><td>日期类型=date。对于参数，auto_now=True 则每次更新都会更新这个时间；auto_now_add=True 则只是第一次创建时添加，之后的更新不再改变。</td></tr><tr><td>models.DateTimeField</td><td>日期类型=datetime。同 DateField 的参数。</td></tr><tr><td>models.Decimal</td><td>十进制小数类型=decimal。必须指定整数位 max_digits 和小数位 decimal_places。</td></tr><tr><td>models.EmailField</td><td>字符串类型（正则表达式邮箱）=varchar。对字符串进行邮箱正则表达式验证。</td></tr><tr><td>models.FloatField</td><td>浮点类型=double。</td></tr><tr><td>models.IntegerField</td><td>整型=int。</td></tr><tr><td>models.BigIntegerField</td><td>长整型=bigint。</td></tr><tr><td>models.IPAddressField</td><td>字符串类型（ip4 正则表达式）</td></tr><tr><td>models.GenericIPAddressField</td><td>字符串类型（ip4 或 ip6 正则表达式）。参数 protocol 可以是：both、ipv4 或 ipv6</td></tr><tr><td>models.NullBooleanField</td><td>允许为空的布尔类型。</td></tr><tr><td>models.PositiveIntegerFile</td><td>正 integer。</td></tr><tr><td>models.PositiveSmallIntegerField</td><td>正 smallInteger。</td></tr><tr><td>models.SlugField</td><td>减号、下划线、字母和数字。</td></tr><tr><td>models.SmallIntegerField</td><td>整型，对应数据库中的 tinyint、smallint、int、bigint。</td></tr><tr><td>models.TextField</td><td>字符串类型=longtext。</td></tr><tr><td>models.TimeField</td><td>时间。HH:MM[:ss[.uuuuuu]]。</td></tr><tr><td>models.URLField</td><td>字符串类型（正则表达式地址）。</td></tr><tr><td>models.BinaryField</td><td>二进制=binary。</td></tr><tr><td>models.ImageField</td><td>图片。存储图片名，常与 upload_to 参数连用，设置图片路径。</td></tr><tr><td>models.FilePathField</td><td>文件。存储文件名常与 upload_to 参数连用，设置文件路径。</td></tr><tr><td>models.ForeignKey(其他表类名)</td><td>多对一，参数 on_delete 必须。例如动物和狗，则在狗中添加 ForeignKey。</td></tr><tr><td>models.OneToOneField(其他表类名)</td><td>一对一，参数 on_delete 必须。例如主表和从表，则在从表中添加 OneToOneField。</td></tr><tr><td>models.ManyToManyField(其他表类名)</td><td>多对多。</td></tr></tbody></table><h3 id="参数参考"><a href="#参数参考" class="headerlink" title="参数参考"></a>参数参考</h3><table><thead><tr><th>参数（默认值）</th><th>作用</th></tr></thead><tbody><tr><td>null=True</td><td>数据库中字段是否可以为空，True 可以。</td></tr><tr><td>blank=True</td><td>django 的 admin 中添加数据时是否可允许空值，True 可以。</td></tr><tr><td>primary_key=False</td><td>主键，对 AutoField 设置主键后会代替原来的自增 id 列 ，True 作为主键列。</td></tr><tr><td>auto_now</td><td>自动创建，无论添加或修改都是会修改成当前操作的时间。</td></tr><tr><td>auto_now_add</td><td>自动创建，时间永远是创建时的时间。</td></tr><tr><td>choices</td><td>常用于下拉菜单。例如使用<code>M</code>可以获得<code>Male</code>：<br>class Person(models.Model):<br>　　GENDER_CHOICES = (<br>　　　　　(‘M’, ‘Male’),<br> 　　　　　(‘F’, ‘Female’),<br>　　)<br>　　models.CharField(max_length=2, choices=GENDER_CHOICES)<br>Person(gender=”M”)</td></tr><tr><td>max_length</td><td>最大长度。</td></tr><tr><td>default</td><td>该字段默认值。</td></tr><tr><td>verbose_name</td><td>admin 中字段的显示名称。</td></tr><tr><td>name</td><td>db_column</td></tr><tr><td>unique=True</td><td>是否允许重复，True 不允许。</td></tr><tr><td>db_index=True</td><td>是否允许数据库索引，True 允许。</td></tr><tr><td>editable=True</td><td>在 admin 里是否可编辑。</td></tr><tr><td>error_messages=None</td><td>错误信息提示，True 允许。</td></tr><tr><td>auto_created=False</td><td>自动创建，True 允许。</td></tr><tr><td>help_text</td><td>在 admin 中提示帮助信息。</td></tr><tr><td>upload_to</td><td>常用于设置文件、图片的上传路径。</td></tr><tr><td>on_delete</td><td>有CASCADE、PROTECT、SET_NULL、SET_DEFAULT、SET()五个可选择的值。<br>CASCADE：级联删除，常用。<br>PROTECT：报完整性错误。<br>SET_NULL：把外键设置为 null，前提是允许为 null。<br>SET_DEFAULT：为外键设置默认值。<br>SET()：此调用其他值，可以是一个函数。</td></tr></tbody></table><h2 id="数据行操作"><a href="#数据行操作" class="headerlink" title="数据行操作"></a>数据行操作</h2><p>进行数据库行操作时，首先需要导入该模块的 models。例如导入 user 模块的 models，代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> user <span class="token keyword">import</span> models</code></pre><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><ul><li>自动提交（传对应参数）<pre class=" language-python"><code class="language-python">  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">)</span></code></pre></li><li>自动提交（传字典，字典中 key 与数据库字段名一一对应）<pre class=" language-python"><code class="language-python">  user_info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"123456"</span><span class="token punctuation">}</span>  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>user_info<span class="token punctuation">)</span></code></pre></li><li>手动提交<pre class=" language-python"><code class="language-python">  obj <span class="token operator">=</span> models<span class="token punctuation">.</span>objects<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">)</span>  obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre class=" language-python"><code class="language-python">models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3></li><li>自动提交<pre class=" language-python"><code class="language-python">  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>password<span class="token operator">=</span><span class="token string">'654321'</span><span class="token punctuation">)</span></code></pre></li><li>手动提交<pre class=" language-python"><code class="language-python">  obj <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">)</span>  obj<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">'654321'</span>  obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3></li><li>根据条件查找单个<pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true"># 查找 username 为 root 的用户</span>  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">)</span></code></pre></li><li>查找所有<pre class=" language-python"><code class="language-python">  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li>查找所有，但只取 values 参数中选定的列<pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true"># 只取 username 列</span>  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span> </code></pre></li><li>查找所有，但只取 values_list 参数中选定的列，并返回一个 list（默认 tuple）。<pre class=" language-python"><code class="language-python">  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values_list<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">)</span></code></pre></li><li>获取所查表行数。<pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true"># 查 user 表一共有多少条数据</span>  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li>根据条件查找。<pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true"># 查找 id = 1 的</span>  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查找 id > 1 的</span>  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id__gt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查找 id &lt; 1 的</span>  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id__lt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="自定义-SQL-语句操作"><a href="#自定义-SQL-语句操作" class="headerlink" title="自定义 SQL 语句操作"></a>自定义 SQL 语句操作</h3><p>获取 django.db.connection 后，直接通过 pymysql 进行操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> connectioncursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 增加(插入一条数据成功返回主键，失败返回0)</span><span class="token keyword">def</span> <span class="token function">create_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token string">"insert语句"</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取插入的数据 id</span>        result <span class="token operator">=</span> connection<span class="token punctuation">.</span>insert_id<span class="token punctuation">(</span><span class="token punctuation">)</span>        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> ex<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"插入异常："</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span>        connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token comment" spellcheck="true"># 增加(插入多条数据成功返回更新条数，失败返回0)</span><span class="token keyword">def</span> <span class="token function">create_many</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token string">"insert语句"</span>    info_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"321"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>createmany_sql<span class="token punctuation">,</span> info_list<span class="token punctuation">)</span>        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> ex<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"插入异常："</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span>        connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token comment" spellcheck="true"># 更新一条数据，返回影响条数</span><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token string">"update|delete语句"</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>rowcount        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> ex<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"更新异常："</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span>        connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token comment" spellcheck="true"># 查询数据，返回查询的数据，失败返回None</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token string">"selete语句"</span>    result <span class="token operator">=</span> None    <span class="token keyword">try</span><span class="token punctuation">:</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 查询单条用fetchone，查询多条用fetchall</span>        result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> ex<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"查找异常："</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> transaction<span class="token keyword">with</span> transaction<span class="token punctuation">.</span>atomic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    数据库操作语句</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django（一）：简介</title>
      <link href="/posts/1e026f1b/"/>
      <url>/posts/1e026f1b/</url>
      
        <content type="html"><![CDATA[<h2 id="MTV-框架模式"><a href="#MTV-框架模式" class="headerlink" title="MTV 框架模式"></a>MTV 框架模式</h2><p>Django 是一个遵循 MVC 设计模式的框架，采用了 MTV 的框架模式（T 即 Template），其中控制器接受用户输入的部分由框架自行处理，因此 Django 更关注模板部分。</p><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><p>Django 所需命令可以通过<code>django-admin help</code>查看所拥有的命令，使用<code>django-admin help 命令名字</code>可以查看该命令如何使用。</p><h3 id="Django-目录结构"><a href="#Django-目录结构" class="headerlink" title="Django 目录结构"></a>Django 目录结构</h3><p><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/directoryLevel.png"></p><ul><li>templates：存放视图文件。</li><li>static：存放静态文件。</li><li>django_temp：存放项目相关文件。<ol><li>settings.py：项目相关配置。</li><li>urls.py：路由配置。</li></ol></li><li>user：存放应用模块相关文件。<ol><li>admin.py：后台管理相关配置。</li><li>dao.py：数据库操作相关。</li><li>models.py：自定义类，并根据类创建数据库表。</li><li>tests.py：单元测试。</li><li>views.py：业务处理。</li></ol></li></ul><h3 id="配置静态文件夹"><a href="#配置静态文件夹" class="headerlink" title="配置静态文件夹"></a>配置静态文件夹</h3><p>在 settings 中配置静态文件夹，代码如下：</p><pre class=" language-python"><code class="language-python">STATIC_URL <span class="token operator">=</span> <span class="token string">'/static/'</span>STATICFILES_DIRS <span class="token operator">=</span> <span class="token punctuation">[</span>    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="配置模板文件夹"><a href="#配置模板文件夹" class="headerlink" title="配置模板文件夹"></a>配置模板文件夹</h3><p>在 settings 中配置模板文件夹，修改<code>DIRS</code>中的<code>templates</code>即可修改模板文件夹位置。代码如下：</p><pre class=" language-python"><code class="language-python">TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.template.backends.django.DjangoTemplates'</span><span class="token punctuation">,</span>        <span class="token string">'DIRS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'templates'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">,</span>        <span class="token string">'APP_DIRS'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'context_processors'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token string">'django.template.context_processors.debug'</span><span class="token punctuation">,</span>                <span class="token string">'django.template.context_processors.request'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.auth.context_processors.auth'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.messages.context_processors.messages'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="创建一个应用"><a href="#创建一个应用" class="headerlink" title="创建一个应用"></a>创建一个应用</h3><p>首先通过命令<code>python manage.py startapp 名字</code>创建应用。其次在 settings 中添加新增的应用即可。例如新创建的应用名为user，代码如下：</p><pre class=" language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>    <span class="token string">'user'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><ol><li>在 urls.py 中的<code>urlpatterns</code>新增路由即可。path 中第一个参数为 URI 映射位置，后一个参数为需要映射到的服务位置（方法），代码如下：<pre class=" language-python"><code class="language-python"> urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>     path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>     path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> user_controller<span class="token punctuation">.</span>login<span class="token punctuation">)</span><span class="token punctuation">,</span>     path<span class="token punctuation">(</span><span class="token string">'register/'</span><span class="token punctuation">,</span> user_controller<span class="token punctuation">.</span>register<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span></code></pre></li><li>URL 也可以动态匹配，常用于 Restful 设计风格。函数只需多加变量，即可获得该匹配的 URI 地址，代码如下：<pre class=" language-python"><code class="language-python"> urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token comment" spellcheck="true"># 匹配0和任意整数</span>     path<span class="token punctuation">(</span><span class="token string">'user/&lt;int:uid>/'</span><span class="token punctuation">,</span> user_controller<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 匹配除了'/'以外的非空字符串</span>     path<span class="token punctuation">(</span><span class="token string">'user/&lt;str:username>/'</span><span class="token punctuation">,</span> user_controller<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 匹配任意由 ASCII 字母或数字以及连字符和下划线组成的短标签</span>     path<span class="token punctuation">(</span><span class="token string">'user/&lt;slug:username>/'</span><span class="token punctuation">,</span> user_controller<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>uid<span class="token punctuation">)</span></code></pre></li><li>项目主文件夹的 urls.py 还可以通过 include() 函数包含其他子文件夹的路由映射。例如在主文件中包含 user 文件夹下的 urls.py，此时所有 user 文件夹下的路径都会加上<code>user/</code>的前缀：<pre class=" language-python"><code class="language-python"> <span class="token comment" spellcheck="true"># main.py</span> <span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin <span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>     path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>     path<span class="token punctuation">(</span><span class="token string">'user/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">"user.urls"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"> <span class="token comment" spellcheck="true"># user文件夹下的 urls.py</span> <span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path <span class="token keyword">from</span> user<span class="token punctuation">.</span>views <span class="token keyword">import</span> login<span class="token punctuation">,</span> register<span class="token punctuation">,</span> index<span class="token punctuation">,</span> temp urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>     path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> login<span class="token punctuation">)</span><span class="token punctuation">,</span>     path<span class="token punctuation">(</span><span class="token string">'register/'</span><span class="token punctuation">,</span> register<span class="token punctuation">)</span><span class="token punctuation">,</span>     path<span class="token punctuation">(</span><span class="token string">'index/'</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">,</span>     path<span class="token punctuation">(</span><span class="token string">'temp/&lt;str:slug>/'</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span></code></pre></li><li>path 可以取别名，此时在前端页面可以通过花括号内% url 名字 [参数] %的形式调用。当目录过深时，会使用别名取代长路径，代码如下：<pre class=" language-python"><code class="language-python"> urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>     path<span class="token punctuation">(</span><span class="token string">'temp/&lt;str:slug>/'</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span></code></pre><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url 名字 参数%}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     花括号内输入% csrf_token % <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>411</code></pre></li></ol><h3 id="初始化-Django-数据库"><a href="#初始化-Django-数据库" class="headerlink" title="初始化 Django 数据库"></a>初始化 Django 数据库</h3><ol><li>Django 拥有自带的数据库，但此处使用 Mysql 数据库为例（需要安装 mysqlclient），在应用的<code>models.py</code>中通过表创建数据库。此处建立一个 User 表，代码如下：<pre class=" language-python"><code class="language-python"> <span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>     username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span></code></pre></li><li>通过命令行输入<code>python manage.py makemigrations</code>保存修改在本地。</li><li>输入<code>python manage.py migrate</code>提交本地修改至数据库，即可完成建表操作。</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="Django-CSRF-提交问题"><a href="#Django-CSRF-提交问题" class="headerlink" title="Django CSRF 提交问题"></a>Django CSRF 提交问题</h3><p>Django 中设置防跨站请求伪造功能，当用 POST 提交数据的时候，Django 会去检查是否有一个 CSRF 的随机字符串，如果没有则会报错（Forbidden 403）。</p><ol><li>在表单中通过 POST 方法提交出现问题，则需要再表单中输入花括号内包含<code>% csrf_token %</code>即可完成完成操作。代码如下：<pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 花括号内输入% csrf_token % <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li><li>通过 AJAX 提交 POST 请求，需要在 data 中添加<code>csrfmiddlewaretoken</code>数据即可完成提交。代码如下：<pre class=" language-js"><code class="language-js"> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     url<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>     type<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>     data<span class="token punctuation">:</span> <span class="token punctuation">{</span>         csrfmiddlewaretoken<span class="token punctuation">:</span> <span class="token string">"{{ csrf_token }}"</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="支持-PUT-和-DELETE"><a href="#支持-PUT-和-DELETE" class="headerlink" title="支持 PUT 和 DELETE"></a>支持 PUT 和 DELETE</h3>支持 PUT 和 DELETE 请求，修改 ajaxSetup 函数即可。代码如下：<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">csrfSafeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token regex">/^(GET|HEAD|OPTIONS|TRACE)$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>$<span class="token punctuation">.</span><span class="token function">ajaxSetup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> beforeSend<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">,</span> settings<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">csrfSafeMethod</span><span class="token punctuation">(</span>settings<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>crossDomain<span class="token punctuation">)</span> <span class="token punctuation">{</span>         xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"X-CSRFToken"</span><span class="token punctuation">,</span> <span class="token string">"{{ csrf_token }}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>后台获取 DELETE 和 PUT 请求携带的参数代码如下：<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> QueryDictQueryDict<span class="token punctuation">(</span>request<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"参数名"</span><span class="token punctuation">)</span></code></pre></li></ol><h3 id="session-存储对象"><a href="#session-存储对象" class="headerlink" title="session 存储对象"></a>session 存储对象</h3><p>session 存储对象需要对对象进行序列化。Django 中用 session 序列化对象需要在 settings.py 中添加如下代码：</p><pre class=" language-python"><code class="language-python">SESSION_SERIALIZER <span class="token operator">=</span> <span class="token string">'django.contrib.sessions.serializers.PickleSerializer'</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：邮件发布</title>
      <link href="/posts/1530706b/"/>
      <url>/posts/1530706b/</url>
      
        <content type="html"><![CDATA[<h2 id="发送模板"><a href="#发送模板" class="headerlink" title="发送模板"></a>发送模板</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMETextsmtp_obj <span class="token operator">=</span> None<span class="token comment" spellcheck="true"># QQ邮箱host</span>host <span class="token operator">=</span> <span class="token string">"smtp.qq.com"</span><span class="token comment" spellcheck="true"># QQ邮箱port</span>port <span class="token operator">=</span> <span class="token number">465</span>password <span class="token operator">=</span> <span class="token string">""</span><span class="token comment" spellcheck="true"># 邮件内容</span>content <span class="token operator">=</span> <span class="token string">"内容"</span><span class="token comment" spellcheck="true"># MIMIE邮件体</span>message <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 邮件标题</span>message<span class="token punctuation">[</span><span class="token string">"Subject"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"标题"</span>message<span class="token punctuation">[</span><span class="token string">"From"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1398524980@qq.com"</span>message<span class="token punctuation">[</span><span class="token string">"To"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1134177664@qq.com"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 基于SSL安全协议和发送邮件</span>    smtp_obj <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 邮件发送人验证</span>    smtp_obj<span class="token punctuation">.</span>login<span class="token punctuation">(</span>message<span class="token punctuation">[</span><span class="token string">"From"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span>    smtp_obj<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>message<span class="token punctuation">[</span><span class="token string">"From"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> message<span class="token punctuation">[</span><span class="token string">"To"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"发送失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    smtp_obj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"发送成功"</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（十四）：监控管理</title>
      <link href="/posts/81ac1c26/"/>
      <url>/posts/81ac1c26/</url>
      
        <content type="html"><![CDATA[<h2 id="监控管理"><a href="#监控管理" class="headerlink" title="监控管理"></a>监控管理</h2><p>SpringBoot 通过引入 actuator 依赖，可以获得应用监控和管理功能。可以通过 HTTP、JMX 和 SSH 协议来进行操作，自动得到审计、健康及指标信息等。监控和管理端点信息如下：</p><table><thead><tr><th>端点名</th><th>描述</th></tr></thead><tbody><tr><td>autoconfig</td><td>所有自动配置信息</td></tr><tr><td>auditevents</td><td>审计事件</td></tr><tr><td>beans</td><td>所有 Bean 的信息</td></tr><tr><td>configprops</td><td>所有配置属性(<code>application.yml</code>中的配置)</td></tr><tr><td>dump</td><td>线程状态信息</td></tr><tr><td>env</td><td>当前环境信息（服务器设置，系统环境变量等）</td></tr><tr><td>health</td><td>应用健康信息</td></tr><tr><td>info</td><td>当前应用信息（内存大小，剩余用量等）</td></tr><tr><td>metrics</td><td>应用的各项指标</td></tr><tr><td>mappings</td><td>应用<code>@RequestMapping</code>映射路径</td></tr><tr><td>shutdown</td><td>关闭当前应用（默认关闭）</td></tr><tr><td>trace</td><td>追踪信息（获取最新的 HTTP 请求）</td></tr></tbody></table><h2 id="SpringBoot-整合监控管理"><a href="#SpringBoot-整合监控管理" class="headerlink" title="SpringBoot 整合监控管理"></a>SpringBoot 整合监控管理</h2><ul><li>引入 actuator 依赖<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li>通过 HTTP 方式访问监控端点，如<code>http://localhost:8080/actuator/</code>获取可访问地址列表。</li></ul><h2 id="定制端点信息"><a href="#定制端点信息" class="headerlink" title="定制端点信息"></a>定制端点信息</h2><ul><li>定制端点一般通过 endpoints + 原端点名 + 属性名来设置。</li><li>修改端点 ID，如<code>endpoints.beans.id=myBean</code>。</li><li>开启远程应用关闭功能，如<code>endpoints.shutdown.enabled=true</code>。</li><li>关闭端点，如<code>endpoints.beans.enabled=false</code>。</li><li>关闭所有端点访问：<code>endpoints.enabled=false</code>。</li><li>开启所需端点：<code>endpoints.beans.enabled=true</code>。（如关闭所有端点访问，该开启端点可以进行访问。）</li><li>定制端点访问路径，如<code>management.context-path=/manage</code>。</li><li>关闭 HTTP 端点，如<code>management.port=-1</code>；也可以修改端口，如<code>management.port=8181</code>。</li></ul><h2 id="自定义-healthIndicator"><a href="#自定义-healthIndicator" class="headerlink" title="自定义 healthIndicator"></a>自定义 healthIndicator</h2><p>实现 healthIndicator 接口，指示器名必须为<code>xxxHealthIndicator</code>。代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/12/6 16:31 * @Description 自定义状态监测 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomHealthIndicator</span> <span class="token keyword">implements</span> <span class="token class-name">HealthIndicator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Health <span class="token function">health</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * 自定义检查方法：         * Health.up().build() 表健康。         * Health.down().withDetail("message", "服务异常").build() 表关闭，附带关闭信息。         */</span>        <span class="token keyword">return</span> Health<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withDetail</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"服务异常"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（十三）：热部署</title>
      <link href="/posts/64a44bcd/"/>
      <url>/posts/64a44bcd/</url>
      
        <content type="html"><![CDATA[<h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>在开发中修改一个 Java 文件后想要看到效果不得不重启应用，这将导致花费大量的时间，因此希望在不重启应用的情况下，程序可以自动部署（热部署）。</p><h2 id="热部署方式"><a href="#热部署方式" class="headerlink" title="热部署方式"></a>热部署方式</h2><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><ol><li>在 Spring Boot 中开发情况下禁用模板引擎的 cache。</li><li>页面模板改变时重新编译当前页面生效。</li></ol><h3 id="Spring-Loaded"><a href="#Spring-Loaded" class="headerlink" title="Spring Loaded"></a>Spring Loaded</h3><p>Spring 官方提供的热部署程序，实现修改类文件的热部署。</p><ol><li>下载 <a href="https://github.com/spring-projects/spring-loaded" target="_blank" rel="noopener">Spring Loaded</a>。</li><li>添加运行时参数：<code>-javaagent:[热部署程序jar包所在位置] -noverify</code>。</li></ol><h3 id="JRebel"><a href="#JRebel" class="headerlink" title="JRebel"></a>JRebel</h3><p><a href="https://www.jrebel.com/products/jrebel" target="_blank" rel="noopener">JRebel</a> 是收费的一个热部署软件，在idea 或 eclipse 安装相应插件即可使用。</p><h3 id="Spring-Boot-Devtools"><a href="#Spring-Boot-Devtools" class="headerlink" title="Spring Boot Devtools"></a>Spring Boot Devtools</h3><ol><li>引入依赖<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li>修改编辑器的运行应用程序更新策略（此处以 IDEA 为例）。<br> <img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/ideaPolicies.png"><ul><li><code>update resources</code>：更新资源（如果引入了依赖则为热部署更新）。</li><li><code>update classes and resources</code>：更新类文件和资源（如果引入了依赖则为热部署更新）。</li><li><code>hot swap classes and uodate trigger file if failed</code>：热部署更新类和目标文件，当热部署更新失败时重启应用。</li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（十二）：分布式</title>
      <link href="/posts/e0109747/"/>
      <url>/posts/e0109747/</url>
      
        <content type="html"><![CDATA[<h2 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h2><h3 id="单一应用架构"><a href="#单一应用架构" class="headerlink" title="单一应用架构"></a>单一应用架构</h3><p>当网站流量很小时，只需一个应用将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架（ORM）是关键。</p><h3 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h3><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的 Web 框架（MVC）是关键。</p><h3 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h3><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架（RPC）是关键。在分布式系统中，国内常用 Dubbo + Zookeeper 组合，而 SpringBoot 推荐使用全栈的 Spring、SpringBoot + SpringCloud。</p><h3 id="流动计算架构"><a href="#流动计算架构" class="headerlink" title="流动计算架构"></a>流动计算架构</h3><p>当服务越来越多，容量的评估，小服务资源的浪费等现象逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心（SOA）是关键。<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/architectureRoadMap.jpg"></p><h2 id="Zookeeper-和-Dubbo"><a href="#Zookeeper-和-Dubbo" class="headerlink" title="Zookeeper 和 Dubbo"></a>Zookeeper 和 Dubbo</h2><h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><p>Zookeeper 是一个分布式的，开放源码的分布式应用程序协调服务（即注册中心）。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步和组服务等。</p><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><p>Dubbo 是 Alibaba 开源的分布式服务框架，它最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或最大限度地松耦合）。从服务模型的角度来看，Dubbo 采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象处服务提供方（Provider）和服务消费方（Consumer）两个角色。<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/dubboArchitecture.png"></p><ol><li>Container 在启动时负责加载运行 Provider。</li><li>Provider 在运行时将所拥有的服务信息注册至 Registry。</li><li>Consumer 在启动时会从 Registry 订阅所需服务，Registry 将 Consumer 所需服务的地址列表返回给 Registry。当 Provider 的服务信息有变更时，Registry 会基于长连接的方式将更新推送给 Consumer。</li><li>Consumer 需要调用服务时，可以根据负载均衡机制找到服务提供者位置并调用服务，如调用失败则可从服务地址列表中查找该服务的其他提供者调用服务直至调用成功为止。</li><li>Monitor 用于监控调用信息。</li></ol><h3 id="SpringBoot-整合-Dubbo、Zookeeper"><a href="#SpringBoot-整合-Dubbo、Zookeeper" class="headerlink" title="SpringBoot 整合 Dubbo、Zookeeper"></a>SpringBoot 整合 Dubbo、Zookeeper</h3><ul><li><p>父类 MAVEN 项目 springboot_dubbo，仅用于控制模块的依赖版本。pom 文件如下：</p><pre class=" language-xml"><code class="language-xml">  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springboot_dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>provider-ticket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>provider-ticket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>项目模块 provider-ticket，用于继承父类依赖实现出票功能。</p><ol><li>pom 文件继承父类 Dubbo 和 zookeeper 依赖版本。<pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springboot_dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>provider-ticket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>provider-ticket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li>配置注册中心相关信息以及服务提供者所在位置，并通过<code>@Service</code>注解暴露服务。<ul><li><code>application.yml</code>配置包扫描+<code>@Service</code>配置方式（注意此处导入的一定要是<code>import org.apache.dubbo.config.annotation.Service</code>）。<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">dubbo</span><span class="token punctuation">:</span><span class="token key atrule">application</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> provider<span class="token punctuation">-</span>ticket<span class="token key atrule">registry</span><span class="token punctuation">:</span>  <span class="token key atrule">address</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">21810</span><span class="token key atrule">scan</span><span class="token punctuation">:</span>  <span class="token key atrule">base-packages</span><span class="token punctuation">:</span> com.kuukokawaii.ticket.service</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/12/6 10:42* @Description 出票 service 实现*/</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"取到票了！！"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><code>@DubboComponentScan</code>或<code>@EnableDubbo</code>注解+<code>@Service</code>的配置方式。<code>@DubboComponentScan</code>和<code>@EnableDubbo</code>注解二选一标注于主程序类上，接口实现类仍需<code>@Service</code>注解（注意导入 dubbo 的注解），而<code>application.yml</code>中则无需配置包扫描。<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/12/6 10:47* @Description 主程序*/</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//@DubboComponentScan("com.kuukokawaii.ticket.service") </span><span class="token annotation punctuation">@EnableDubbo</span><span class="token punctuation">(</span>scanBasePackages <span class="token operator">=</span> <span class="token string">"com.kuukokawaii.ticket.service"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderTicketApplication</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProviderTicketApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/12/6 10:42* @Description 出票 service 实现*/</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"取到票了！！"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol></li><li><p>项目模块 consumer-user，用于继承父类依赖调用 provider-ticket 模块的出票功能。</p><ol><li>pom 文件继承父类 Dubbo 和 zookeeper 依赖版本。<pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springboot_dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>consumer-user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>consumer-user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li>配置注册中心地址（与 provider-ticket 模块同）。<pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">dubbo</span><span class="token punctuation">:</span>   <span class="token key atrule">application</span><span class="token punctuation">:</span>     <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer<span class="token punctuation">-</span>user   <span class="token key atrule">registry</span><span class="token punctuation">:</span>     <span class="token key atrule">address</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">21810</span></code></pre></li><li>consumer-user 模块通过<code>@Reference</code>注解远程引用 provider-ticket 模块的服务则需要先编写服务接口，必须是与 provider-ticket 模块服务接口相同的全限定名。例如此处的<code>com.kuukokawaii.ticket.service.TicketService;</code>（不需要实现类）。<pre class=" language-java"><code class="language-java"> <span class="token keyword">package</span> com<span class="token punctuation">.</span>kuukokawaii<span class="token punctuation">.</span>ticket<span class="token punctuation">.</span>service<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 11:21  * @Description 远程调用出票服务  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 出票服务      *      * @return 出票String      */</span>     String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li>通过 dubbo 的<code>@Reference</code>注解远程引用服务，注意此处导入的<code>@Service</code>注解为<code>org.springframework.stereotype.Service</code>。<pre class=" language-java"><code class="language-java"> <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Reference<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 11:22  * @Description 用户 service  */</span> <span class="token annotation punctuation">@Service</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Reference</span>     <span class="token keyword">private</span> TicketService ticketService<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ticketService<span class="token punctuation">.</span><span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h2 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h2></li></ol></li><li><p>Spring Cloud 是一个分布式的整体解决方案。Spring Cloud 为开发者提供了在分布式系统中快速构建的工具，使用 Spring Cloud 的开发者可以快速的启动服务或构建应用、同时能够快速和云平台资源进行对接。</p></li><li><p>Spring Cloud 分布式开发五大常用组件：</p><ol><li>Netflix Eureka：服务发现。</li><li>Netflix Ribbon：客户端负载均衡。</li><li>Netflix Hystrix：断路器。</li><li>Netflix Zuul：服务网关。</li><li>Spring Cloud Config：分布式配置。</li></ol></li><li><p>Spring Cloud 对配置管理、服务发现、熔断、路由、微代理、控制总线、一次性 token、全局锁、leader 选举、分布式 session 和集群管理等问题都提供了相应的解决方案。</p></li></ul><h3 id="Spring-Cloud-注册中心"><a href="#Spring-Cloud-注册中心" class="headerlink" title="Spring Cloud 注册中心"></a>Spring Cloud 注册中心</h3><p>Spring Cloud 使用 eureka server 作为注册中心。</p><ul><li>引入 Spring Cloud eureka server 依赖<pre class=" language-xml"><code class="language-xml">  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Hoxton.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li>配置 eureka server 信息<pre class=" language-yaml"><code class="language-yaml">  <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span>  <span class="token key atrule">eureka</span><span class="token punctuation">:</span>    <span class="token key atrule">instance</span><span class="token punctuation">:</span>      <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>server    <span class="token key atrule">client</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 是否注册到 eureka 服务器，此处没必要自己注册自己到服务器</span>      <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment" spellcheck="true"># 不从 eureka 上获取服务的注册信息</span>      <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment" spellcheck="true"># 设置注册中心地址</span>      <span class="token key atrule">service-url</span><span class="token punctuation">:</span>        <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/</code></pre></li><li>通过<code>@EnableEurekaServer</code>注解标注主程序启用 eureka server。<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/12/6 12:39   * @Description 注册中心主程序   */</span>  <span class="token annotation punctuation">@EnableEurekaServer</span>  <span class="token annotation punctuation">@SpringBootApplication</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaServerApplication</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="provider-服务提供者"><a href="#provider-服务提供者" class="headerlink" title="provider 服务提供者"></a>provider 服务提供者</h3></li><li>引入 Spring Cloud Eureka Discovery Client 依赖<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>provider-ticket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>provider-ticket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Hoxton.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li>配置 eureka client provider 信息<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">application</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> provider<span class="token punctuation">-</span>ticket<span class="token key atrule">eureka</span><span class="token punctuation">:</span><span class="token key atrule">instance</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 注册服务时使用服务的IP地址作为前缀</span>  <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">client</span><span class="token punctuation">:</span>  <span class="token key atrule">service-url</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 必须要和 eureka server 相同</span>    <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8761/eureka/</code></pre></li><li>eureka 提供服务<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/12/6 13:12   * @Description 出票 service   */</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 出票功能       * @return 出票String       */</span>      String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/12/6 13:08   * @Description 出票 service 实现   */</span>  <span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token string">"出票了！！"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/12/6 13:10   * @Description 出票 controller   */</span>  <span class="token annotation punctuation">@RestController</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketController</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Resource</span>      <span class="token keyword">private</span> TicketServiceImpl ticketService<span class="token punctuation">;</span>      <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/ticket"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> ticketService<span class="token punctuation">.</span><span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="consumer-服务使用者"><a href="#consumer-服务使用者" class="headerlink" title="consumer 服务使用者"></a>consumer 服务使用者</h3></li><li>引入 Spring Cloud Eureka Discovery Client 依赖<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>consumer-user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>consumer-user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Hoxton.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li>配置 eureka client consumer 信息<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8002</span><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">application</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer<span class="token punctuation">-</span>user<span class="token key atrule">eureka</span><span class="token punctuation">:</span><span class="token key atrule">instance</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 注册服务时使用服务的IP地址作为前缀</span>  <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">client</span><span class="token punctuation">:</span>  <span class="token key atrule">service-url</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 必须要和 eureka server 相同</span>    <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8761/eureka/</code></pre></li><li>通过<code>@EnableDiscoveryClient</code>注解开启发现服务功能<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/12/6 12:43* @Description consumer 主程序*/</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerUserApplication</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsumerUserApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * "@LoadBalanced"启用负载均衡机制。   * "RestTemplate"是Spring提供的用于访问Rest服务的客户端，提供了多种便捷访问远程Http服务的方法。   * 此处用于远程引用provider的服务。   * @return Rest服务客户端对象   */</span>  <span class="token annotation punctuation">@LoadBalanced</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>consumer 调用 provider 服务<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/12/6 13:53* @Description 用户 controller*/</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Resource</span>  <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/buy"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">buyTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// getForObject根据URL获取服务（此处填写需要获取的provider名和服务名），第二个参数为返回类型。</span>      <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://PROVIDER-TICKET/ticket"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（十一）：安全</title>
      <link href="/posts/f4c26338/"/>
      <url>/posts/f4c26338/</url>
      
        <content type="html"><![CDATA[<h2 id="安全机制"><a href="#安全机制" class="headerlink" title="安全机制"></a>安全机制</h2><p>安全机制主要包含认证（注册主体）和授权（访问权限控制）两个区域的控制。</p><ol><li>认证：是建立一个声明主体的过程（主体通常指用户、设备或一些可以在应用程序中执行动作的其他系统）。</li><li>授权：确定一个主体是否允许在应用程序中执行一个动作的过程(授权前主体的身份必须通过了认证过程的建立)。</li></ol><h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><p>Spring Security 是针对 Spring 项目的安全框架，也是 Spring Boot 底层安全模块默认的技术选型。对于安全控制，只需引入 Security 模块并进行少量的配置即可实现安全管理。Spring Security 通过<code>WebSecurityConfigurerAdapter</code>和<code>AuthenticationManagerBuilder</code>两个类提供自定义 Security 策略和认证策略功能。</p><ol><li>引入 Security 依赖。<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li>编写 SpringSecurity 配置类，需要通过<code>@EnableWebSecurity</code>注解开启 SpringSecurity 支持。<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/12/4 19:22* @Description Security 配置类*/</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> DataSource dataSource<span class="token punctuation">;</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/*      * 自定义授权规则：      *      1.放行静态资源。      *      2.管理员页面需要管理员身份。      *      3.来宾页面需要来宾身份。      *      4.开启自动配置的登陆功能，如未登陆将自动跳转`/login`登陆界面，登陆失败将跳转至`/login?error`页面;      *          `successForwardUrl`自定义登陆成功跳转页面，`failureForwardUrl`自定义登陆失败跳转页面；      *          默认'POST'请求'/login'表示进行登陆验证，'GET'请求'/login'表示跳转登陆页面；      *          `loginPage`自定义登陆界面，此时该页面的`GET`和`POST`分别成为了登陆验证和跳转登陆页面功能，      *          可以通过`loginProcessingUrl`设置成默认的登陆验证；      *          `usernameParameter`可以自定义账号参数名，`passwordParameter`可以自定义密码参数名。      *      5.开启自动配置的注销功能，访问`/logout`表示用户注销，清空session，如果注销成功跳转至`/login?logout`页面；      *          `logoutSuccessUrl`设置注销成功跳转页面。      *      6.开启记住我功能，即自动帮忙登陆（该功能会保存cookie，注销会删除该cookie），      *          通过`rememberMeParameter()`可以自定义HTML中`checkbox`表单的`name`实现该功能。      */</span>     http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/css/**"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/admin/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"ADMIN"</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"guest/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"GUEST"</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">*</span> <span class="token annotation punctuation">@Bean</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> UserDetailsService <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token operator">/</span><span class="token operator">/</span> 使用默认的加密方式 bcrypt，PasswordEncoderFactories<span class="token punctuation">.</span><span class="token function">createDelegatingPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>中实现了 <span class="token number">10</span> 种加密方式。     PasswordEncoder passwordEncoder <span class="token operator">=</span> PasswordEncoderFactories<span class="token punctuation">.</span><span class="token function">createDelegatingPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     UserDetails root <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"GUEST"</span><span class="token punctuation">,</span> <span class="token string">"ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     UserDetails guest <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"GUEST"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">/</span><span class="token operator">/</span> 用户信息存储于内存中     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> guest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token operator">*</span><span class="token operator">/</span> <span class="token annotation punctuation">@Bean</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> UserDetailsService <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 使用自定义的加密方式</span>     Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> PasswordEncoder<span class="token operator">></span> encoders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     encoders<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>password<span class="token punctuation">.</span>MessageDigestPasswordEncoder</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     PasswordEncoder passwordEncoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingPasswordEncoder</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">,</span> encoders<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 项目启动时默认创建两个用户</span>     UserDetails root <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"GUEST"</span><span class="token punctuation">,</span> <span class="token string">"ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     UserDetails guest <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"GUEST"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     JdbcUserDetailsManager jdbcUserDetailsManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcUserDetailsManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>     jdbcUserDetailsManager<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>     jdbcUserDetailsManager<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>guest<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 用户信息持久化</span>     <span class="token keyword">return</span> jdbcUserDetailsManager<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>在 HTML 界面显示授权信息，需要先整合 thymeleaf 和 security，即引入相关依赖即可。<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- spring security 和 thymeleaf 整合--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-springsecurity5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"> <span class="token doctype">&lt;!DOCTYPE html></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>sec</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org/extras/spring-security<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/bootstrap.min.css}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 是否认证，如果认证成功了则不显示登陆超链接 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登陆页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 是否认证，如果认证成功了则显示注销超链接和认证信息 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>账号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">sec:</span>authentication</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>所有身份信息：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">sec:</span>authentication</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>principal.authorities<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/logout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注销<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 是否拥有管理员权限，有则显示管理员信息超链接 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hasRole(<span class="token punctuation">'</span>ADMIN<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/admin/info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>管理员信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 是否拥有来宾权限，有则显示来宾信息超链接 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hasRole(<span class="token punctuation">'</span>GUEST<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/guest/info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>来宾信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（十）：任务</title>
      <link href="/posts/454051ae/"/>
      <url>/posts/454051ae/</url>
      
        <content type="html"><![CDATA[<h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>spring 提供了异步任务的功能。</p><ul><li>在主程序类上开启异步注解支持<code>@EnableAsync</code>。<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootStudyApplication</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootStudyApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>在方法上使用异步注解<code>@Async</code>。<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/12/4 14:20* @Description 异步任务 service*/</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncService</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Async</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理数据中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>Spring 通过<code>TaskExecutor</code>和<code>TaskScheduler</code>接口提供了异步执行任务调度的方式。</p><ul><li><p>在主程序类上开启定时任务注解支持<code>@EnableScheduling</code>。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableScheduling</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootStudyApplication</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootStudyApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>在方法上使用异步注解<code>@Scheduled</code>。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/12/4 14:52* @Description 定时任务 service*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledService</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 * * * * MON-FRI"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>cron 表达式<br>cron表达式一共有六个字段，分别为秒，分，时，日，月和周几，每个字段之间通过空格来间隔。</p><table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒</td><td>0-59</td><td>, - * /</td></tr><tr><td>分</td><td>0-59</td><td>, - * /</td></tr><tr><td>时</td><td>0-23</td><td>, - * /</td></tr><tr><td>日</td><td>1-31</td><td>, - * ? / L W C</td></tr><tr><td>月</td><td>1-12</td><td>, - * /</td></tr><tr><td>星期</td><td>0-7 或 SUN-SAT(0和7都是周日)</td><td>, - * ? / L C #</td></tr></tbody></table><table><thead><tr><th>特殊字符</th><th>含义</th></tr></thead><tbody><tr><td>,</td><td>枚举，例如<code>0,1,2</code>代表这几个值都会被匹配。</td></tr><tr><td>-</td><td>区间，例如<code>0-2</code>代表0,1,2这几个值都会被匹配。</td></tr><tr><td>*</td><td>任意，所有允许值都会被匹配。</td></tr><tr><td>/</td><td>步长，例如<code>0-2</code>，在秒字段代表从0开始每2秒就会被匹配。</td></tr><tr><td>?</td><td>日和星期冲突时，在日或者星期上标<code>?</code>表示按照另一个未标<code>?</code>的时间来匹配。</td></tr><tr><td>L</td><td>最后，具体看标识字段。例如<code>0 0 2 ? * 6L</code>表每个月最后一个周六，<code>0 0 2 LW * ?</code>表每个月最后一个工作日。</td></tr><tr><td>W</td><td>工作日，匹配工作日，只能标识在日上。</td></tr><tr><td>C</td><td>和 calendar 联系后计算过的值</td></tr><tr><td>#</td><td>第几个星期，如4#2表示第二个星期四，只能标识在星期上。</td></tr></tbody></table></li></ul><h2 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h2><p>SpringBoot 使用了<code>jakarta-mail</code>作为默认的邮件模块，通过引入相应的 starter 并配置些许配置即可使用邮件功能。</p><ul><li>引入 mail 依赖<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><code>application.yml</code>中配置 mail 相关配置<pre class=" language-xml"><code class="language-xml">  spring:    mail:      username: 账号      password: 授权码      host: smtp.qq.com      # 如果不加 port 则无需配置 properties。（此处为使用 SSL 加密方式发送邮件）      port: 465      properties:        mail:          smtp:            ssl:              enable: true</code></pre></li><li>简单邮件发送<pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Resource</span>  <span class="token keyword">private</span> JavaMailSender javaMailSender<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      SimpleMailMessage simpleMailMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      simpleMailMessage<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"邮件标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      simpleMailMessage<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"邮件内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      simpleMailMessage<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"目标邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      simpleMailMessage<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"发送邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>simpleMailMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li>复杂邮件发送<pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Resource</span>  <span class="token keyword">private</span> JavaMailSender javaMailSender<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException <span class="token punctuation">{</span>      MimeMessage mimeMessage <span class="token operator">=</span> javaMailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 第二个参数为是否要上传文件编码。</span>      MimeMessageHelper mimeMessageHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"邮件标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 第二个参数为是否开启 html 支持。</span>      mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"&lt;b style='color: red'>邮件内容&lt;/b>"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"目标邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"发送邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 上传附件</span>      mimeMessageHelper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"附件地址"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mimeMessageHelper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">"2.jpg"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"附件地址"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（九）：检索</title>
      <link href="/posts/8146c289/"/>
      <url>/posts/8146c289/</url>
      
        <content type="html"><![CDATA[<h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><ul><li><p>ElasticSearch 是一个开源的分布式搜索服务，且提供 Restful API，底层基于 Lucene，采用多 shard（分片）的方式保证数据安全，并且提供自动 Resharding 的功能。SpringBoot 通过整合 Spring Data ElasticSearch 提供了便捷的检索功能支持。</p></li><li><p>ElasticSearch 概念</p><ol><li><p>它是面向文档的，意味着它存储整个对象或文档，并索引每个文档的内容使之可以被检索。</p></li><li><p>将 JSON 作为文档的序列化格式。</p></li><li><p>将存储数据至 ElasticSearch 的行为称之为索引。一个 ElasticSearch 集群可以包含多个索引，每个索引可以包含多个类型，每个类型可以包含多个文档，而每个文档又可以有多个属性（例如雇员文档，一个文档代表一个雇员）。索引文档前需要确定文档存储位置。</p><p> <img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/elasticSearch.png"></p></li><li><p>在 ElasticSearch 中通过<code>PUT</code>、<code>DELETE</code>、<code>PUT</code>和<code>HEAD</code>请求来对文档进行增删改查（增加修改都用<code>PUT</code>）。</p></li><li><p>ElasticSearch 采用 Restful 风格请求处理数据（例如<code>GET /index/type/id</code>）。</p></li><li><p>ElasticSearch 相关文档查看<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">ElasticSearch 官方权威指南</a>。</p></li></ol></li></ul><h2 id="SpringBoot-整合-ElasticSearch"><a href="#SpringBoot-整合-ElasticSearch" class="headerlink" title="SpringBoot 整合 ElasticSearch"></a>SpringBoot 整合 ElasticSearch</h2><p>SpringBoot 默认支持两种技术来和 ElasticSearch 交互：Jest（需要引入依赖） 和 SpringData Elasticsearch（默认使用）。</p><h3 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h3><ol><li>引入 Jest 依赖<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.searchbox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li>存储和查询数据<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/4 12:49  * @Description 文章 entity（JestId标识主键）  */</span> <span class="token annotation punctuation">@Data</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@JestId</span>     <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>     <span class="token keyword">private</span> String title<span class="token punctuation">;</span>     <span class="token keyword">private</span> String author<span class="token punctuation">;</span>     <span class="token keyword">private</span> String content<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> JestClient jestClient<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Article article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     article<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     article<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"新闻标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     article<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     article<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"新闻内容！！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 构建一个索引功能。索引构建器，索引位置，类型，[.id()文档id]，构建</span>     Index index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Index<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"news"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 执行存储操作（出现读取时间超时，在application.yml中设置读取时间）</span>         jestClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     String json <span class="token operator">=</span> <span class="token string">"{\n"</span> <span class="token operator">+</span>         <span class="token string">"    \"query\": {\n"</span> <span class="token operator">+</span>         <span class="token string">"        \"match\": {\n"</span> <span class="token operator">+</span>         <span class="token string">"            \"content\": \"内容\"\n"</span> <span class="token operator">+</span>         <span class="token string">"        }\n"</span> <span class="token operator">+</span>         <span class="token string">"    }\n"</span> <span class="token operator">+</span>         <span class="token string">"}"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 构建一个检索功能。检索构建器，索引位置，类型，[.id()文档id]，构建</span>     Search search <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Search<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIndex</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span><span class="token string">"news"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         SearchResult searchResult <span class="token operator">=</span> jestClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>searchResult<span class="token punctuation">.</span><span class="token function">getJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3 id="SpringData-Elasticsearch"><a href="#SpringData-Elasticsearch" class="headerlink" title="SpringData Elasticsearch"></a>SpringData Elasticsearch</h3></li><li>引入 SpringData Elasticsearch 依赖<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li>通过 ElasticsearchRepository 调用 Elasticsearch<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/4 12:32  * @Description 书本 entity  */</span> <span class="token annotation punctuation">@Data</span> <span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>indexName <span class="token operator">=</span> <span class="token string">"kuukokawaii"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"book"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>     <span class="token keyword">private</span> String bookName<span class="token punctuation">;</span>     <span class="token keyword">private</span> String author<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> BookRepository bookRepository<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Book book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     book<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     book<span class="token punctuation">.</span><span class="token function">setBookName</span><span class="token punctuation">(</span><span class="token string">"书本名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     book<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"书本作者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     bookRepository<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>Book book <span class="token operator">:</span> bookRepository<span class="token punctuation">.</span><span class="token function">findBooksByBookNameLike</span><span class="token punctuation">(</span><span class="token string">"书"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li>通过 ElasticsearchTemplate 调用 Elasticsearch<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/4 12:32  * @Description 书本 entity  */</span> <span class="token annotation punctuation">@Data</span> <span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>indexName <span class="token operator">=</span> <span class="token string">"kuukokawaii"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"book"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>     <span class="token keyword">private</span> String bookName<span class="token punctuation">;</span>     <span class="token keyword">private</span> String author<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> ElasticsearchRestTemplate elasticsearchRestTemplate<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Book book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     book<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     book<span class="token punctuation">.</span><span class="token function">setBookName</span><span class="token punctuation">(</span><span class="token string">"书本名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     book<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"书本作者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 构建索引构建器</span>     IndexQuery indexQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withObject</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 存储数据</span>     elasticsearchRestTemplate<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>indexQuery<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 查询语句</span>     MatchQueryBuilder matchQueryBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"bookName"</span><span class="token punctuation">,</span> <span class="token string">"书本"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 根据查询语句构建查询构建器</span>     SearchQuery searchQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NativeSearchQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withQuery</span><span class="token punctuation">(</span>matchQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 进行查询，查询构建器，查询的类</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>Book book <span class="token operator">:</span> elasticsearchRestTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>searchQuery<span class="token punctuation">,</span> Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（八）：消息队列</title>
      <link href="/posts/2b1dfb69/"/>
      <url>/posts/2b1dfb69/</url>
      
        <content type="html"><![CDATA[<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>大多应用中可通过消息服务中间件来提升系统异步通信、扩展解耦能力。在消息服务中有消息代理和目的地两个重要的概念，即当消息发送者发送消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地。在消息队列中主要拥有两种形式的目的地，分别为队列和主题，前者用于点对点消息通信，后者用于发布/订阅消息通信。</p><h3 id="JMS-和-AMQP-比对"><a href="#JMS-和-AMQP-比对" class="headerlink" title="JMS 和 AMQP 比对"></a>JMS 和 AMQP 比对</h3><table><thead><tr><th></th><th>JMS</th><th>AMQP</th></tr></thead><tbody><tr><td>定义</td><td>Java api</td><td>网络线级协议</td></tr><tr><td>跨语言</td><td>否</td><td>是</td></tr><tr><td>跨平台</td><td>否</td><td>是</td></tr><tr><td>Model</td><td>提供两种消息模型：<br>1.Peer-2-Peer<br>2.Pub/Sub</td><td>提供五种消息模型：<br>1.direct exchange<br>2.fanout exchange<br>3.topic exchange<br>4.headers exchange<br>5.system exchange<br>本质来讲，后四种和 JMS 的 Pub/Sub 模型没有太大差别，仅是在路由机制上做了更详细的划分。</td></tr><tr><td>支持消息类型</td><td>多种消息类型：<br>1.TextMessage<br>2.MapMessage<br>3.BytesMessage<br>4.StreamMessage<br>5.ObjectMessage<br>6.Message（只有消息头和属性）</td><td>byte[]<br>当实际应用时，有复杂的消息，可以将消息序列化后发送。</td></tr><tr><td>综合评价</td><td>JMS 定义了 JAVA API 层面的标准。<br>在 JAVA 体系中，多个 client 均可以通过 JMS 进行交互，不需要应用修改代码，但是其对跨平台的支持较差。</td><td>AMQP 定义了 wire-level 层的协议标准，天然具有跨平台、跨语言特性。</td></tr></tbody></table><h3 id="SpringBoot-中的消息队列"><a href="#SpringBoot-中的消息队列" class="headerlink" title="SpringBoot 中的消息队列"></a>SpringBoot 中的消息队列</h3><ol><li>spring-jms 提供了对 JMS 的支持。</li><li>spring-rabbit 提供了对 AMQP 的支持。</li><li>需要<code>ConnectionFactory</code>的实现来连接消息代理。</li><li>提供<code>JmsTemplate</code>和<code>RabbitTemplate</code>来发送消息。</li><li>将<code>@JmsListener</code>（JMS）和<code>@RabbitListener</code>（AMQP）注解在方法上监听消息代理发布的消息。</li><li><code>@EnableJms</code>和<code>@EnableRabbit</code>开启注解支持。</li></ol><h2 id="RabbitMQ-简介"><a href="#RabbitMQ-简介" class="headerlink" title="RabbitMQ 简介"></a>RabbitMQ 简介</h2><p>RabbitMQ 是一个由 erlang 开发的 AMQP（Advanced Message Queue Protocol） 的开源实现。</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><table><thead><tr><th>组件</th><th>作用</th></tr></thead><tbody><tr><td>Message</td><td>消息由消息头和消息体组成。其中消息体是不透明的，消息头则由一系列的可选属性组成，这些属性包括<code>routing-key</code>（路由键，决定消息目的地）、<code>priority</code>（相对于其他消息的优先权）和<code>delivery-mode</code>（标明该消息是否需要持久性存储）等。</td></tr><tr><td>Publisher</td><td>消息的生产者，用于向交换器发布消息，即向消息代理发送消息。</td></tr><tr><td>Exchange</td><td>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列（根据路由键选择队列）。</td></tr><tr><td>Queue</td><td>消息队列，用来保存消息直到发送给消费者，一个消息可投入一个或多个队列。</td></tr><tr><td>Binding</td><td>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列l连接起来的又有规则，Exchange 和 Queue 的绑定可以是多对多的关系。</td></tr><tr><td>Connection</td><td>网络连接，比如一个 TCP 连接。</td></tr><tr><td>Channel</td><td>信道是建立在真实的 TCP 连接内的虚拟连接，AMQP 的命令都是通过信道发送出去。因为对于操作系统来说建立和销毁 TCP 都是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。（类似线程与进程）</td></tr><tr><td>Consumer</td><td>消息的消费者，用于从消息队列中获取消息。</td></tr><tr><td>Virtual Host</td><td>虚拟主机（简称 vhost），是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个缩小版的 RabbitMQ 服务器，消息代理中可以有多个 vhost 。在连接时，必须指定具体的 vhost，RabbitMQ 默认的 vhost 是 <code>/</code></td></tr><tr><td>Broker</td><td>消息代理，表示消息队列服务器的实体</td></tr></tbody></table><p><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/rabbitMQ.png"></p><h3 id="Exchange-类型"><a href="#Exchange-类型" class="headerlink" title="Exchange 类型"></a>Exchange 类型</h3><ol><li><p>direct：当消息中的路由键和 Binding 中的 binding key 一致时，交换器就将消息发到对应的队列中。<br> <img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/direct_exchange.jpg"></p></li><li><p>fanout：交换器会将消息发送到所有与自己绑定的队列上，速度是交换器中最快的（类似广播）。<br> <img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/fanout_exchange.jpg"></p></li><li><p>topic：交换器通过模式匹配分配消息的路由键属性，将路由器和某一个模式进行匹配，此时队列需要绑定到一个模式上。通过识别两个通配符<code>#</code>和<code>*</code>对路由键和绑定键的字符串进行切分，其中前者匹配0个或多个单词，后者匹配一个单词。</p><p> <img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/topic_exchange.jpg"></p></li><li><p>header：header 匹配 AMQP 消息的 header 而不是路由键，与 direct 交换器类似但性能差许多，通常不用。</p></li></ol><h2 id="整合-RabbitMQ"><a href="#整合-RabbitMQ" class="headerlink" title="整合 RabbitMQ"></a>整合 RabbitMQ</h2><ol><li>引入 RabbitMQ 依赖<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><code>application.yml</code>中配置 RabbitMQ 相关配置<pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>     <span class="token key atrule">username</span><span class="token punctuation">:</span> 账号     <span class="token key atrule">password</span><span class="token punctuation">:</span> 密码     <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> <span class="token string">"/"</span></code></pre></li><li>RabbitTemplate 用于发送和接收消息<pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 自动序列化发送消息（使用send方法不会自动序列化）</span>     rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"study.direct"</span><span class="token punctuation">,</span> <span class="token string">"study.news"</span><span class="token punctuation">,</span> <span class="token string">"消息体可以是对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 自动反序列化转化接收的消息</span>     Object message <span class="token operator">=</span> rabbitTemplate<span class="token punctuation">.</span><span class="token function">receiveAndConvert</span><span class="token punctuation">(</span><span class="token string">"study.news"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li>配置消息转换器序列化方式<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/2 22:04  * @Description AMQP 配置  */</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmqpConfig</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> MessageConverter <span class="token function">messageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><code>@EnableRabbit</code>+<code>@RabbitListener</code>注解用于监听消息队列<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/11/21 22:07  * @Description SpringBoot应用主程序  */</span> <span class="token annotation punctuation">@EnableRabbit</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootStudyApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootStudyApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/2 22:14  * @Description 书 service  */</span> <span class="token annotation punctuation">@Service</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"study.news"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到的消息："</span> <span class="token operator">+</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"study"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 获取消息体</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 获取消息头</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li>AmqpAdmin 系统管理功能组件，用于创建删除 exchange，queue 和 binding。<pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> AmqpAdmin amqpAdmin<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">createExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 创建 exchange</span>     amqpAdmin<span class="token punctuation">.</span><span class="token function">declareExchange</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"study.direct"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 创建 queue，是否开启持久化</span>     amqpAdmin<span class="token punctuation">.</span><span class="token function">declareQueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"study.queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 创建 binding （绑定目的地名[此处队列名]，绑定目的地类型[此处队列]，交换名，路由键，参数）</span>     amqpAdmin<span class="token punctuation">.</span><span class="token function">declareBinding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"study.queue"</span><span class="token punctuation">,</span> Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>         <span class="token string">"study.direct"</span><span class="token punctuation">,</span> <span class="token string">"study"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（七）：缓存</title>
      <link href="/posts/676006d6/"/>
      <url>/posts/676006d6/</url>
      
        <content type="html"><![CDATA[<h2 id="JSR-107"><a href="#JSR-107" class="headerlink" title="JSR-107"></a>JSR-107</h2><p>Java Caching 定义了5个核心接口，分别为：</p><ol><li>CachingProvider：定义了创建、配置、获取、管理和控制多个 CacheManager。一个应用可以在运行期间访问多个 CachingProvider。</li><li>CacheManager：定义了创建、配置、获取、管理和控制多个唯一命名的 Cache，这些 Cache 存在于 CacheManager 的上下文中。且一个 CacheManager 仅被一个 CachingProvider 所拥有。</li><li>Cache：类似 Map 的数据结构并临时存储以 Key 为索引的值。一个 Cache 仅被一个 CacheManager 所拥有。</li><li>Entry： 存储在 Cache 中的 Key-Value 对。</li><li>Expiry： 每一个存储在 Cache 中的条目有一个定义的有效期。一旦超过这个时间，Entry 就变为了过期状态。一旦过期，Entry 将不可访问、更新和删除。缓存有效期可以通过 <code>ExpiryPolicy</code>设置。</li></ol><p><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/JSR107.png"><br>JSR-107 只需引入如下依赖即可使用：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cache-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="Spring-缓存抽象"><a href="#Spring-缓存抽象" class="headerlink" title="Spring 缓存抽象"></a>Spring 缓存抽象</h2><p>为了简化开发，Spring 定义了 Cache 和 CacheManager 接口来统一不同的缓存技术，同时 Spring 也支持使用 JCache（JSR-107）注解简化开发。</p><h3 id="Spring-缓存注解"><a href="#Spring-缓存注解" class="headerlink" title="Spring 缓存注解"></a>Spring 缓存注解</h3><table><thead><tr><th>注解及参数</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td><code>@Cacheable</code></td><td>根据方法的请求参数对其结果进行缓存，常用于创建。</td><td>1.<code>cacheNames/value</code>：指定缓存组件名（可以多个）。<br>2.<code>key</code>：缓存数据使用的 Key（默认使用方法参数的值，可以使用 SpEL 表达式）。<br>3.<code>keyGenerator</code>：Key 的生成器，可以指定 Key 生成器的组件 id（与<code>key</code>二选一）。<br>4.<code>cacheManager</code>：指定缓存管理器。<br>5.<code>cacheResolver</code>：指定获取解析器（与<code>cacheManager</code>二选一）。<br>6.<code>condition</code>：指定符合条件的情况下才缓存。<br><code>unless</code>：指定符合条件的情况下不进行缓存，并且可以获取缓存结果进行判断。<br>7.<code>sync</code>：是否使用异步模式，此时不支持<code>unless</code>参数。</td></tr><tr><td><code>@CachePut</code></td><td>保证方法一定会被调用且结果会被缓存，常用于更新，如果指定 key 被更新则需要同时更新 key。</td><td></td></tr><tr><td><code>@CacheEvict</code></td><td>清空缓存，常用于删除，需要指定删除的 key。</td><td>1.<code>key</code>：如未指定则会使用默认策略生成的 key。<br>2.<code>allEntries</code>：是否删除指定 cache 中的所有数据。<br>3.<code>beforeInvocation</code>：缓存的清除是否在方法之前执行（默认 false）。</td></tr><tr><td><code>@EnableCaching</code></td><td>开启基于注解的缓存。</td><td></td></tr><tr><td><code>@Caching</code></td><td>是<code>@Cacheable</code>、<code>@CachePut</code>和<code>@CacheEvict</code>的组合注解。</td><td></td></tr><tr><td><code>@CacheConfig</code></td><td>抽取缓存的公共配置，标注于类上，类中的缓存注解会默认使用公共配置的参数。</td><td></td></tr><tr><td><code>keyGenerator</code></td><td>缓存数据时 Key 的生成策略。</td><td></td></tr><tr><td><code>serialize</code></td><td>缓存数据时 Value 序列化策略。</td><td></td></tr></tbody></table><h3 id="Cacheable可用-SpEL-表达式"><a href="#Cacheable可用-SpEL-表达式" class="headerlink" title="@Cacheable可用 SpEL 表达式"></a><code>@Cacheable</code>可用 SpEL 表达式</h3><table><thead><tr><th>名字</th><th>位置</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>methodName</td><td>root object</td><td>当前被调用的方法名。</td><td><code>#root.methodName</code></td></tr><tr><td>method</td><td>root object</td><td>当前被调用的方法。</td><td><code>#root.method.name</code></td></tr><tr><td>target</td><td>root object</td><td>当前被调用的目标对象。</td><td><code>#root.target</code></td></tr><tr><td>targetClass</td><td>root object</td><td>当前被调用的目标对象类。</td><td><code>#root.targetClass</code></td></tr><tr><td>args</td><td>root object</td><td>当前被调用的方法的参数列表。</td><td><code>#root.args[0]</code></td></tr><tr><td>caches</td><td>root object</td><td>当前方法调用的缓存列表（如<code>@Cacheable(cacheNames={"cache1","cache2"})</code>）。</td><td><code>#root.caches[0].name</code></td></tr><tr><td>argument name</td><td>evaluation context</td><td>方法参数的名字，可以直接<code>#参数名</code>，也可以使用<code>#p0</code>或<code>#a0</code>的形式，其中0代表参数的的索引。</td><td><code>#iban</code>、<code>#a0</code>、<code>#p0</code></td></tr><tr><td>result</td><td>evaluation context</td><td>方法执行后的返回值（仅当方法执行之后的判断有效）。</td><td><code>#result</code></td></tr></tbody></table><h3 id="缓存使用注意事项"><a href="#缓存使用注意事项" class="headerlink" title="缓存使用注意事项"></a>缓存使用注意事项</h3><ol><li>缓存注解不能定义在接口上。</li><li>加缓存注解的方法必须为公有（public）的。</li><li><code>@Cahcheable</code>必须指定至少一个<code>cacheNames</code>。</li></ol><h3 id="注解使用示例"><a href="#注解使用示例" class="headerlink" title="注解使用示例"></a>注解使用示例</h3><ol><li><code>@Cacheable</code><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span> <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> Employee <span class="token function">getEmployee</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">getEmployeeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><code>@CachePut</code><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span> <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#result.id"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> Employee <span class="token function">updateEmployee</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Employee employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">updateEmployee</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><code>@CacheEvict</code><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span> <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeEmployee</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">removeEmployeeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><code>@Caching</code><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span> <span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>     cacheable <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#lastName"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     put <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#result.id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#result.email"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">)</span> <span class="token keyword">public</span> Employee <span class="token function">getEmployee</span><span class="token punctuation">(</span>String lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">getEmployeeByLastName</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><code>@CacheConfig</code><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Service</span> <span class="token annotation punctuation">@CacheConfig</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmployeeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> EmployeeMapper employeeMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Cacheable</span>    <span class="token keyword">public</span> Employee <span class="token function">getEmployee</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">getEmployeeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h2 id="整合-Redis"><a href="#整合-Redis" class="headerlink" title="整合 Redis"></a>整合 Redis</h2>Redis 是一个开源的，内存中的数据结构存储系统，可以用作数据库、缓存和消息中间件。</li><li>引入 Redis 依赖<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><code>application.yml</code>中配置 Redis 相关配置<pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">redis</span><span class="token punctuation">:</span>     <span class="token key atrule">host</span><span class="token punctuation">:</span> xxx.xxx.xxx.xxx</code></pre></li><li>使用<code>RedisTemplate</code>或<code>StringRedisTemplate</code>操作 Redis<ol><li><code>RedisTemplate</code>用于操作 K-V 都是字符串的数据。</li><li><code>StringRedisTemplate</code>用于操作 K-V 都是对象的数据。</li><li>Redis 常见的五大数据类型：String（字符串）、List（列表）、Set（集合）、Hash（散列）和ZSet（有序集合）。分别通过五类方法操作：<code>opsForValue()</code>、<code>opsForList()</code>、<code>opsForSet()</code>、<code>opsForHash()</code>和<code>opsForZSet()</code>。</li><li><a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">Redis 命令查询</a></li></ol></li><li>配置<code>RedisCacheManager</code>，并修改 Key 和 Value 的保存格式。之后便可使用 Spring 缓存抽象操作 Redis。<pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> RedisCacheManager <span class="token function">cacheManager</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Key 使用 StringRedisSerializer 的方式保存</span>         RedisSerializer<span class="token operator">&lt;</span>String<span class="token operator">></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Value 使用 Jackson2JsonRedisSerializer 的方式保存</span>         Jackson2JsonRedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> jackson2JsonRedisSerializer <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 解决查询缓存反序列化出错问题</span>         ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>         objectMapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>         jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// entryTtl(Duration.ofHours(1))设置生存周期</span>         RedisCacheConfiguration redisCacheConfiguration <span class="token operator">=</span> RedisCacheConfiguration<span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> RedisCacheManager<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>redisCacheConfiguration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（六）：数据访问</title>
      <link href="/posts/fd098bd4/"/>
      <url>/posts/fd098bd4/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringData"><a href="#SpringData" class="headerlink" title="SpringData"></a>SpringData</h2><p>SpringData 主要用于简化数据库的访问，开发者只需声明持久层接口即可。SpringData 支持 NoSQL 和关系数据库存储。</p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><ol><li>引入 JDBC 依赖。<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li>application.yml 配置数据源。<pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">datasource</span><span class="token punctuation">:</span>     <span class="token key atrule">username</span><span class="token punctuation">:</span> 账号     <span class="token key atrule">password</span><span class="token punctuation">:</span> 密码     <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/表名<span class="token punctuation">?</span>serverTimezone=UTC     <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> 数据库驱动     <span class="token comment" spellcheck="true"># 表初始化，默认加载schema.sql（冒号后无空格，不使用请注释）</span>     <span class="token key atrule">schema</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> classpath<span class="token punctuation">:</span>sql/department.sql     <span class="token comment" spellcheck="true"># 数据初始化，默认加载data.sql（冒号后无空格，不使用请注释）</span>     <span class="token key atrule">data</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> classpath<span class="token punctuation">:</span>sql/department_data.sql     <span class="token comment" spellcheck="true"># 初始化模式（不使用请注释）</span>     <span class="token key atrule">initialization-mode</span><span class="token punctuation">:</span> always</code></pre><pre class=" language-mysql"><code class="language-mysql"> # department.sql DROP TABLE IF EXISTS department; CREATE TABLE department(     id INT PRIMARY KEY NOT NULL,     departmentName varchar(45) NOT NULL );</code></pre><pre class=" language-mysql"><code class="language-mysql"> # department_data.sql INSERT INTO department (id, departmentName) SELECT '1', 'AA' FROM dual WHERE NOT EXISTS(SELECT id from department WHERE id = '1');</code></pre></li><li>使用 JdbcTemplate 进行查询。<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/11/27 14:50  * @Description 查询 controller  */</span> <span class="token annotation punctuation">@Controller</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryController</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Autowired</span>     <span class="token keyword">public</span> <span class="token function">QueryController</span><span class="token punctuation">(</span>JdbcTemplate jdbcTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcTemplate <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/query"</span><span class="token punctuation">)</span>     <span class="token annotation punctuation">@ResponseBody</span>     <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">"SELECT id, departmentName FROM department"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li>配置 druid 连接池。（在<code>spring.datasource</code>下配置）<pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">druid</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 初始化大小，最小，最大</span>   <span class="token key atrule">initial-size</span><span class="token punctuation">:</span> <span class="token number">5</span>   <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>   <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">20</span>   <span class="token comment" spellcheck="true"># 配置获取连接等待超时的时间</span>   <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">60000</span>   <span class="token comment" spellcheck="true"># 配置一个连接在池中最小生存的时间，单位是毫秒</span>   <span class="token key atrule">min-evictable-idle-time-millis</span><span class="token punctuation">:</span> <span class="token number">300000</span>   <span class="token comment" spellcheck="true"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span>   <span class="token key atrule">time-between-eviction-runs-millis</span><span class="token punctuation">:</span> <span class="token number">600000</span>   <span class="token key atrule">validation-query</span><span class="token punctuation">:</span> SELECT 1   <span class="token key atrule">test-while-idle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token key atrule">test-on-borrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token key atrule">test-on-return</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment" spellcheck="true"># 打开PSCache，并且指定每个连接上PSCache的大小</span>   <span class="token key atrule">pool-prepared-statements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token key atrule">max-pool-prepared-statement-per-connection-size</span><span class="token punctuation">:</span> <span class="token number">20</span>   <span class="token comment" spellcheck="true"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙。（stat,wall,log4j）</span>   <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall   <span class="token comment" spellcheck="true"># 通过connection-properties属性来打开mergeSql功能；慢SQL记录</span>   <span class="token key atrule">connection-properties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500   <span class="token key atrule">use-global-data-source-stat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment" spellcheck="true"># 配置DruidStatFilter</span>   <span class="token key atrule">web-stat-filter</span><span class="token punctuation">:</span>     <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token key atrule">url-pattern</span><span class="token punctuation">:</span> <span class="token string">"/*"</span>     <span class="token key atrule">exclusions</span><span class="token punctuation">:</span> <span class="token string">"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"</span>   <span class="token comment" spellcheck="true"># 配置DruidStatViewServlet</span>   <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>     <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token key atrule">url-pattern</span><span class="token punctuation">:</span> <span class="token string">"/druid/*"</span>     <span class="token comment" spellcheck="true"># IP白名单(没有配置或者为空，则允许所有访问)</span>     <span class="token key atrule">allow</span><span class="token punctuation">:</span> 127.0.0.1     <span class="token comment" spellcheck="true"># IP黑名单 (存在共同时，deny优先于allow)</span>     <span class="token key atrule">deny</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 禁用HTML页面上的“Reset All”功能</span>     <span class="token key atrule">reset-enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>     <span class="token comment" spellcheck="true"># 登录名</span>     <span class="token key atrule">login-username</span><span class="token punctuation">:</span> root     <span class="token comment" spellcheck="true"># 登录密码</span>     <span class="token key atrule">login-password</span><span class="token punctuation">:</span> root</code></pre><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2></li><li>引入 Mybatis 依赖。<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li>注解的方式进行 dao 操作。（可以去掉<code>@Mapper</code>注解，应用入口程序处添加<code>@MapperScan</code>注解批量扫描包。）<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/11/27 19:00  * @Description 部门 dao  */</span> <span class="token annotation punctuation">@Mapper</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DepartmentDao</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 根据部门id查询部门对象      *      * @param id 部门id      * @return 部门对象      */</span>     <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT id, departmentName FROM department WHERE id = #{id}"</span><span class="token punctuation">)</span>     Department <span class="token function">getDepartmentById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * 根据部门id删除部门      *      * @param id 部门id      * @return 更新条数      */</span>     <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM department WHERE id = #{id}"</span><span class="token punctuation">)</span>     <span class="token keyword">int</span> <span class="token function">removeDepartmentById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * 根据部门对象增加部门。（useGeneratedKeys 注解让自增的主键会重新封装入 Department 对象中。）      *      * @param department 部门对象      * @return 更新条数      */</span>     <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO department (departmentName) value (#{departmentName})"</span><span class="token punctuation">)</span>     <span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> keyProperty <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> keyColumn <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>     <span class="token keyword">int</span> <span class="token function">createDepartment</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * 根据id更新部门信息      *      * @param department 部门对象      * @return 更新条数      */</span>     <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"UPDATE department set departmentName = #{department} WHERE id = #{id}"</span><span class="token punctuation">)</span>     <span class="token keyword">int</span> <span class="token function">updateDepartment</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li>配置文件的方式进行 dao 操作。再配置注解扫描的基础上配置 xml 文件所在位置，即通过在<code>application.yml</code>中配置 xml 文件的位置，例如<code>mybatis.mapper-locations: com/kuukokawaii/springbootstudy/**/dao/**.xml</code>，即可实现配置文件的方式进行 dao 操作。<pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 下划线转驼峰命名</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># xml 配置文件路径</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> com/kuukokawaii/springbootstudy/**/dao/**.xml </code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/11/29 14:34  * @Description 员工 dao  */</span> <span class="token annotation punctuation">@Mapper</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 根据 id 查找对应的员工信息。      * @param id 员工id      * @return 员工对象      */</span>     Employee <span class="token function">getEmployeeById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.springbootstudy.employee.dao.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.springbootstudy.employee.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--@mbg.generated--></span>         <span class="token comment" spellcheck="true">&lt;!--@Table employee--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--@mbg.generated--></span>         id, last_name, email, gender, d_id     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmployeeById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         select         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         from employee         where id = #{id,jdbcType=INTEGER}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h2><ul><li><p>基本功能</p><ol><li>JpaRepository 基本功能。<br> Spring Data JPA 具有统一的 Repository 接口，通过继承该接口可以实现 CRUD 和分页等操作。</li><li>定义符合规范的方法命名。<br> 在接口中只需要声明符合规范的方法，即拥有对应的功能。</li><li>通过<code>@Query</code>自定义查询，定制查询 SQL。</li><li>支持动态查询（Specifications 查询）。</li></ol><p><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/spring_data_jpa.png"></p></li><li><p>引入 JPA 依赖</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用 JPA 根据 entity 自动建表，在<code>application.yml</code>中加入如下配置。</p><pre class=" language-yaml"><code class="language-yaml">  <span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">jpa</span><span class="token punctuation">:</span>      <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 根据 entity 更新或者创建数据表结构</span>        <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update      <span class="token comment" spellcheck="true"># 控制台显示 SQL</span>      <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre></li><li><p>新建 entity。</p><ol><li><code>@Entity</code>用于标注该类是实体类。</li><li><code>@Table</code>可以标明该表的表名和所属 schema。</li><li><code>@Id</code>用于标注该属性是主键。</li><li><code>@GeneratedValue</code>包含<code>strategy</code>和<code>generator</code>两个参数。前者包含<code>AUTO</code>、<code>IDENTITY</code>、<code>SEQUENCE</code>和<code>Table</code>四个属性，其作用分别为主键由程序控制（默认值）、主键由数据库生成采用数据库的自增形式（Oracle 不支持）、主键通过数据库的序列生成（Mysql 不支持）和提供特定的数据库产生主键方式（利于数据库移植）；后者用于声明主键生成器的名称。</li><li><code>@Column</code>用于标注数据库列名及该列属性。<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/11/29 15:53* @Description 用户 entity*/</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">,</span> schema <span class="token operator">=</span> <span class="token string">"springboot_study"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@JsonIgnoreProperties</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"hibernateLazyInitializer"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/**  * 用户id  */</span> <span class="token annotation punctuation">@Id</span> <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span> <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 用户名  */</span> <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"last_name"</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 用户邮箱  */</span> <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"email"</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol></li><li><p>编写接口继承<code>JpaRepository</code>接口。接口上泛型分别写对应的实体类和该实体类的主键。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/29 16:09   * @Description 用户 repository   */</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p><code>JpaRepository</code>接口的使用。如果 get 方法出现<code>com.fasterxml.jackson.databind.exc.InvalidDefinitionException:</code>错误，则需要在实体类上加<code>@JsonIgnoreProperties(value={"hibernateLazyInitializer"})</code>的注解，防止<code>jsonplugin</code>操作<code>hibernateLazyInitializer</code>属性。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/29 16:38   * @Description 用户 controller   */</span>  <span class="token annotation punctuation">@RestController</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> UserRepository userRepository<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">public</span> <span class="token function">UserController</span><span class="token punctuation">(</span>UserRepository userRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>userRepository <span class="token operator">=</span> userRepository<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> User <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（五）：Docker</title>
      <link href="/posts/3096723d/"/>
      <url>/posts/3096723d/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Docker"><a href="#什么是-Docker" class="headerlink" title="什么是 Docker"></a>什么是 Docker</h2><p>Docker 是基于 Go 语言并遵从 Apache 协议开源的一个开源的应用容器引擎，支持将软件编译成一个镜像并设置镜像中各软件的配置，获得镜像的其他使用者可以直接使用镜像。Docker 容器是完全使用沙箱机制的，相互之间不会有任何接口，更重要的是容器性能开销极低。</p><h2 id="Docker-核心概念"><a href="#Docker-核心概念" class="headerlink" title="Docker 核心概念"></a>Docker 核心概念</h2><p>Docker 主机从仓库下载所需镜像并通过 daemon 运行镜像产生容器之后，Docker 客户端就可以连接主机进行操作。<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/coreConceptsOfDocker.png"></p><ol><li>Docker 镜像（Images）：Docker 镜像是用于创建 Docker 容器的模板。</li><li>Docker 容器（Container）：容器是独立运行的一个或一组应用。</li><li>Docker 客户端（Client）：客户端通过命令行或者其他工具使用 Docker。</li><li>Docker 主机（Host）：一个物理或虚拟的机器用于执行 Docker 守护进程和容器。</li><li>Docker 仓库（Registry）：Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。<a href="https://hub.docker.com" target="_blank" rel="noopener">Docker Hub</a>提供了庞大的镜像集合供使用。</li></ol><h2 id="Docker-常用操作"><a href="#Docker-常用操作" class="headerlink" title="Docker 常用操作"></a>Docker 常用操作</h2><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><pre><code>| 操作 | 命令 | 说明 || --- | ---- | ---- || 检索 | docker search 关键字 | 常用于检索镜像的详细信息，或镜像版本。 || 拉取 | docker pull 镜像名:tag | `:tag`是可选的，tag 表示标签，多为软件的版本，默认是 latest。 || 列表 | docker images | 查看所有本地镜像。 || 删除 | docker rmi image-id | 删除指定的本地镜像。 |</code></pre><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><pre><code>| 操作 | 命令 | 说明 || --- | ---- | ---- || 运行 | docker run --name container-name &lt;br&gt; -d image-name | `--name`：自定义容器名; &lt;br&gt;`-d`：后台运行; &lt;br&gt;`image-name`：指定镜像模板（推荐加上版本号）。 || 列表 | docker ps | 查看运行中容器，加上`-a`可以查看所有容器。 || 停止 | docker stop container-name/container-id | 停止指定的运行中容器。 || 启动 | docker start container-name/container-id | 启动指定的容器。 || 删除 | docker rm container-id | 删除指定容器。 || 端口映射 | 输入运行容器命令时添加`-p`命令 &lt;br&gt;例：docker run -d -p 6379:6379 镜像名 | `-p`主机端口映射至容器内部的端口。 || 容器日志 | docker logs container-name/container-id | 查看容器日志。 |</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（四）：WEB 开发</title>
      <link href="/posts/4fa653eb/"/>
      <url>/posts/4fa653eb/</url>
      
        <content type="html"><![CDATA[<h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><h3 id="映射规则"><a href="#映射规则" class="headerlink" title="映射规则"></a>映射规则</h3><p>SpringBoot 的静态资源与 SSM 框架整合的静态资源所在位置不同，SSM 框架静态资源存储于 webapp 的 static 中，而 SpringBoot 的静态资源存储于 resources 中。SpringBoot 默认有两种静态资源映射模式：</p><ol><li>webjars 模式<br> 应用使用 MAVEN 导入 <a href="https://www.webjars.org/" target="_blank" rel="noopener">webjars</a> 的静态资源依赖，则所有通过该方法导入的静态资源都存储于<code>classpath:/META-INF/resources/webjars/</code>中。需要访问时，只需要通过类似<code>http://localhost:8080/webjars/所需资源名</code>的方式即可完成调用。</li><li>自定义模式<br> 通过查看 SpringBoot 源码中的<code>WebMvcAutoConfiguration</code>和<code>ResourceProperties</code>类的<code>SERVLET_LOCATIONS</code>和<code>CLASSPATH_RESOURCE_LOCATIONS</code>常量，可以得出静态资源的默认存储位置为<code>classpath:/META-INF/resources/</code>、<code>classpath:/resources/</code>、<code>classpath:/static/</code>、<code>classpath:/public/</code>和<code>/</code>。调用方式与 webjars 模式类似，例如静态文件存储于<code>classpath:/static/</code>，则调用方式如<code>http://localhost:8080/所需资源名</code>即可。<h3 id="欢迎页"><a href="#欢迎页" class="headerlink" title="欢迎页"></a>欢迎页</h3>静态资源文件夹下的所有<code>index.html</code>页面都会被映射为<code>/</code>，也就是说当你输入<code>http://localhost:8080/</code>时，就会自动跳转至<code>index.html</code>页面。<h3 id="修改静态资源位置"><a href="#修改静态资源位置" class="headerlink" title="修改静态资源位置"></a>修改静态资源位置</h3>可以在<code>application.yml</code>中通过<code>spring.resources.static-locations</code>设置默认的静态资源位置，使用该条命令会使 SpringBoot 本身的默认静态资源位置失效，因此不推荐修改。</li></ol><h2 id="Thymeleaf-模板引擎"><a href="#Thymeleaf-模板引擎" class="headerlink" title="Thymeleaf 模板引擎"></a>Thymeleaf 模板引擎</h2><ul><li>模板引擎用于将视图和数据进行整合解析，而不同的模板引擎之间的区别仅在于模板引擎获取数据的语法不同。<br>  <img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/templateEngine.png"></li><li>SpringBoot 推荐使用 Thymeleaf 模板引擎，因为其语法更简洁，功能共强大。通过 MAVEN 引入 Thymeleaf 模板引擎的依赖。（如需修改 thymeleaf 版本则需注意<code>thymeleaf-layout-dialect.version</code>）<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li>Thymeleaf 将<code>classpath:/templates/</code>作为默认的视图存储位置，只需将 HTML 页面放入该文件夹中，Thymeleaf 就能自动渲染。</li><li>Thymeleaf 的使用&amp;语法：<ol><li>导入 Thymeleaf 的命名空间。(不导入不会出错，但是 HTML 页面不会有 Thymeleaf 语法提示。)<pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li>后端通过<code>Model</code>、<code>ModelMap</code>、<code>ModelAndView</code>或<code>Map</code>向前端传输数据。<pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/helloPage"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>ModelMap modelMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>     modelMap<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"helloValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li>在对应的 HTML 中使用 <a href="https://www.thymeleaf.org/documentation.html" target="_blank" rel="noopener">Thymeleaf 语法</a>。<pre class=" language-html"><code class="language-html"> <span class="token doctype">&lt;!DOCTYPE html></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${hello}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul><h2 id="WebMvc-扩展与全面接管"><a href="#WebMvc-扩展与全面接管" class="headerlink" title="WebMvc 扩展与全面接管"></a>WebMvc 扩展与全面接管</h2><p>SpringBoot 在自动配置组件时，会先扫描容器中是否有用户自定义的配置，如果有则使用用户自定义的配置文件或将用户自定义的配置文件与默认的自动配置文件组合起来，没有则执行 SpringBoot 的自动配置。例如<code>&lt;mvc:view-controller path="/hello" view-name="hello"/&gt;</code>映射<code>/hello</code>至<code>hello.html</code>页面。而在 SpringBoot 中可以通过<code>@Configuration</code>注解 + 实现<code>WebMvcConfigurer</code>接口中<code>addViewControllers</code>方法的形式实现该功能，SpringBoot 不仅保留了所有的自动配置，而且还加载了自定义的扩展功能。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当需要对 WebMvc 进行全面接管时（即使得 SpringBoot 不进行自动配置，而是按照自定义的配置加载），通过使用<code>@EnableWebMvc</code>注解即可实现该效果，此时 SpringBoot 自动配置将失效且仅保留 SpringMVC 最进本的效果。</p><h2 id="错误处理机制"><a href="#错误处理机制" class="headerlink" title="错误处理机制"></a>错误处理机制</h2><p>SpringBoot 错误的默认处理机制是通过<code>ErrorMvcAutoConfiguration</code>为容器添加了<code>DefaultErrorAttributes</code>、<code>BasicErrorController</code>、<code>ErrorPageCustomizer</code>和<code>DefaultErrorViewResolver</code>组件。一旦应用出现错误，<code>ErrorPageCustomizer</code>就会向<code>/error/</code>控制器发起请求（类似<code>web.xml</code>注册错误页面的规则），此时会进入<code>BasicErrorController</code>控制器。该控制器根据请求头向用户发送错误 HTML 页面或 JSON 数据，最终通过<code>DefaultErrorAttributes</code>中的错误状态码响应至特定的页面。</p><ol><li>定制错误 HTML 页面<ul><li>在拥有模板引擎的情况下，将<code>错误状态码.html</code>放置在模板引擎文件夹下的 error 文件夹中，SpringBoot 就会自动进行错误页面的配置。也可以将错误页面命名为<code>4xx.html</code>或<code>5xx.html</code>等，表示匹配所有 4 开头或者 5 开头的错误状态码，当项目下同时拥有类似<code>4xx.html</code>和<code>404.html</code>时，则会按精确优先的方式响应至<code>404.html</code>的错误页面。</li><li>在没有模板引擎的情况下，SpringBoot 将会在静态资源文件夹下的 error 文件夹中寻找错误页面。</li><li>如上述两处都没有发现错误页面，将跳转至 SpringBoot 默认的错误提示页面。</li><li>使用模板引擎的错误页面可以通过语法获取页面的错误信息，如<code>timestamp</code>：时间戳、<code>status</code>：状态码、<code>error</code>：错误提示、<code>exception</code>：异常对象、<code>message</code>：异常消息和<code>errors</code>：JSR303 数据校验错误。（如获取不到<code>exception</code>，则需要在<code>application.yml</code>中将<code>server.error.include-exception</code>开启）</li></ul></li><li>定制错误 JSON 数据<ul><li>自定义异常处理数据，浏览器和客户端返回的都是 JSON 数据。<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/26 16:42   * @Description 异常处理器   */</span>  <span class="token annotation punctuation">@ControllerAdvice</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionHandler</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@ResponseBody</span>      <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>UserNotExistException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">handleException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token string">"userNotExist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> map<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li>将异常请求转发至<code>/error</code>页面，通过 SpringBoot 自行产生自适应<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/26 16:42   * @Description 异常处理器   */</span>  <span class="token annotation punctuation">@ControllerAdvice</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionHandler</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@ResponseBody</span>      <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>UserNotExistException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">handleException</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 设置错误状态码</span>          request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.error.status_code"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"/error"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li>拥有自适应效果且能携带定制数据<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/11/26 16:36* @Description 自定义 ErrorAttributes*/</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyErrorAttributes</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultErrorAttributes</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>WebRequest webRequest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> includeStackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> errorAttributes <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> includeStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>      errorAttributes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"customError"</span><span class="token punctuation">,</span> webRequest<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"customError"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> errorAttributes<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/11/26 16:42* @Description 异常处理器*/</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionHandler</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>UserNotExistException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">handleException</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 设置错误状态码</span>      request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.error.status_code"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token string">"userNotExist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"customError"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"/error"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol><h2 id="SpringBoot-嵌入式-Servlet-容器"><a href="#SpringBoot-嵌入式-Servlet-容器" class="headerlink" title="SpringBoot 嵌入式 Servlet 容器"></a>SpringBoot 嵌入式 Servlet 容器</h2><ul><li><p>SpringBoot 默认使用 Tomcat 作为嵌入式的 Servlet 容器，需要对 Servlet 容器进行修改可以通过如下两种方式：</p><ol><li>在<code>application.yml</code>中通过<code>server.xxxx</code>修改，如需修改 Tomcat 配置则通过<code>server.tomcat.xxx</code>进行修改。</li><li>编写一个嵌入式的 Servlet 容器定制器<code>WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;</code>来修改 Servlet 容器的配置。（优先级高于配置文件）<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> WebServerFactoryCustomizer<span class="token operator">&lt;</span>ConfigurableServletWebServerFactory<span class="token operator">></span> <span class="token function">webServerFactoryCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token operator">&lt;</span>ConfigurableServletWebServerFactory<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>ConfigurableServletWebServerFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>         factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol></li><li><p>SpringBoot 默认时以 Jar 包的方式启动嵌入式的 Servlet 容器来启动 Web 应用，没有 web.xml 文件，因此提供<code>ServletRegistrationBean</code>、<code>FilterRegistrationBean</code>和<code>ServletListenerRegistrationBean</code>三大组件用于注册 Servlet、Filter 和Listener。</p><ol><li>ServletRegistrationBean<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/11/26 17:17  * @Description 自定义 servlet  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello Servlet！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> ServletRegistrationBean<span class="token operator">&lt;</span>MyServlet<span class="token operator">></span> <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/myServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li>FilterRegistrationBean<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/11/26 17:31  * @Description 自定义 filter  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span>         ServletException <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyFilter process..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> FilterRegistrationBean<span class="token operator">&lt;</span>MyFilter<span class="token operator">></span> <span class="token function">filterFilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     FilterRegistrationBean<span class="token operator">&lt;</span>MyFilter<span class="token operator">></span> filterFilterRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     filterFilterRegistrationBean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 设置要拦截的请求</span>     filterFilterRegistrationBean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> filterFilterRegistrationBean<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li>ServletListenerRegistrationBean<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/11/26 17:40  * @Description 自定义 listener  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"web 应用启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"web 应用销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> ServletListenerRegistrationBean<span class="token operator">&lt;</span>MyListener<span class="token operator">></span> <span class="token function">servletListenerRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBean</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li></ol></li><li><p>其他内嵌式的 Servlet 容器</p><ol><li>Jetty 适用于长连接应用。</li><li>Undertow 高性能非阻塞，并发性能非常强，但不支持 JSP。</li></ol><p>内嵌式的 Servlet 容器切换方法：只需将默认的 Tomcat 依赖排除，然后引入其他内嵌式 Servlet 容器依赖即可。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（三）：日志</title>
      <link href="/posts/1d79677f/"/>
      <url>/posts/1d79677f/</url>
      
        <content type="html"><![CDATA[<h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><p>市场上存在多种日志框架，日志接口有 JCL、SLF4j 和 jboss-logging，日志具体实现有 Log4j、Logback、JUL 和 Log4j2。其中 JUL 是 JAVA 官方日志；JCL 和 Log4j2 是 apache 开发的日志接口；SLF4j、Log4j 和 Logback 是由同一作者开发完成，所以适配性较好，当中的 Log4j 存在性能问题，其升级版为 Logback。</p><h2 id="SLF4j"><a href="#SLF4j" class="headerlink" title="SLF4j"></a>SLF4j</h2><ol><li>SLF4j 是针对日志框架开发的一个统一接口层，因此只需实现 SLF4j 即可使用日志功能，这样分层的好处是更改日志接口的实现框架依赖便可完成日志框架的升级。</li><li>SpringBoot 的底层是 Spring 框架，而 Spring 框架默认是用 JCL 日志接口，但是 SpringBoot 默认排除了 JCL 依赖，使用 SLF4j 和 Logback 作为自己的日志框架。</li><li>SLF4j 针对按自己接口实现的日志框架只需导入日志实现框架依赖即可，而针对不是按自己接口的日志实现框架则需要额外导入一个适配依赖，才能完成日志功能。适配依赖的原理即实现 SLF4j 接口，实现方式就是包装对应的日志实现框架方法。<br> <img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/concreteBindings.png"></li><li>每个日志实现框架都有自己的配置文件，即使使用了 SLF4j，配置文件还是使用日志实现框架的配置文件。</li></ol><h2 id="统一日志框架"><a href="#统一日志框架" class="headerlink" title="统一日志框架"></a>统一日志框架</h2><p>SpringBoot 整合了许多框架，而每一个框架使用的可能都不是同一个日志框架，因此需要对这些框架的日志框架进行统一。将日志框架统一成 SLF4j 的步骤如下：</p><ol><li>先排除系统中其他日志实现框架的依赖。</li><li>用中间包来替换排除的日志实现框架依赖，否则会报错。中间包的原理即覆写排除了的日志实现框架，将其所有方法的原有调用都转为调用 SLF4j 的方法，这样即可防止报错并实现功能。</li><li>之后导入 SLF4j 和日志实现框架依赖。（根据日志实现框架选择是否需要添加适配依赖）</li></ol><p><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/legacy.png"></p><h2 id="日志默认配置"><a href="#日志默认配置" class="headerlink" title="日志默认配置"></a>日志默认配置</h2><h3 id="全局常规设置"><a href="#全局常规设置" class="headerlink" title="全局常规设置"></a>全局常规设置</h3><p>SpringBoot 自配配置了默认的日志配置，可以在<code>application.yml</code>中修改部分配置。</p><h3 id="修改日志输出文件位置"><a href="#修改日志输出文件位置" class="headerlink" title="修改日志输出文件位置"></a>修改日志输出文件位置</h3><p>在<code>application.yml</code>中可以通过<code>logging.file</code>和<code>logging.path</code>指定配置文件位置。（只能二选一，两个都写默认生效<code>logging.file</code>）</p><ol><li><code>logging.file</code>在不指定路径时则在当前项目下生成 springboot.log 日志文件，指定路径时则按指定的完整路径存放日志文件。例如：<code>logging.file: G:/springboot.log</code>。</li><li><code>logging.path</code>在指定路径下创建文件夹并使用 spring.log 作为默认日志文件。例如：<code>logging.path: /spring/log</code>则表示在项目所在磁盘的根目录下创建 spring 文件夹和其中的 log 文件夹并生成一个 spring.log 的日志文件。</li></ol><h3 id="自定义日志配置文件"><a href="#自定义日志配置文件" class="headerlink" title="自定义日志配置文件"></a>自定义日志配置文件</h3><p>当要使用自定义日志配置文件而非 SpringBoot 的默认日志配置时，可以通过在类路径下放上相应的日志实现框架的配置文件即可。<br>| 日志系统 | 自定义配置文件                          |<br>| ——- | ————————————– |<br>| Logback | <code>logback-spring.xml</code> 或 <code>logback.xml</code>  |<br>| Log4j2  | <code>log4j2-spring.xml</code> 或 <code>log4j2.xml</code>    |<br>| JUL     | <code>logging.properties</code>                   |</p><p>其中没有加<code>spring</code>尾缀的配置会跳过 SpringBoot 直接被日志实现框架识别；增加了尾缀的日志实现框架不直接加载日志配置，而是由 SpringBoot 解析日志配置，因此可以在日志的配置文件中使用 SpringBoot 的高级 Profile 功能。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 可以指定该日志配置只在 dev 应该环境下才被加载。修改 dev 可以修改为其它应用环境。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（二）：配置文件</title>
      <link href="/posts/2250b4d3/"/>
      <url>/posts/2250b4d3/</url>
      
        <content type="html"><![CDATA[<h2 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h2><p>SpringBoot 可以使用 YAML 进行全局配置。YAML 是以数据为中心的标记语言，比 JSON、XML 等更适合做配置文件。YAML 通过缩进表示层级关系，且支持三种数据结构：对象（键值对集合）、数组和字面量（单个、不可再分的值）。</p><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>即数字、字符串和布尔值。通过<code>k: v</code>的方式书写，字符串默认不用加上引号。也可以使用单引号或双引号，其中单引号会转义特殊字符。字符串也可以写成多行，但从第二行开始必须有一个空格缩进，换行符会被转义为空格。</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>假设有一对象为 student，其中有 lastName 和 age 的属性，其 YAML 写法如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">student</span><span class="token punctuation">:</span>  <span class="token key atrule">lastName</span><span class="token punctuation">:</span> xx  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">12</span></code></pre><p>也可以采用行内写法：<code>student: {lastName: xx, age: 12}</code></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>用连线词<code>-</code>来表示数组中的一个元素，一组<code>-</code>开头的行构成一个数组，其写法如下:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> cat  <span class="token punctuation">-</span> dog  <span class="token punctuation">-</span> pig</code></pre><p>也可以采用行内写法：<code>pets: [cat, dog, pig]</code></p><h3 id="复合结构"><a href="#复合结构" class="headerlink" title="复合结构"></a>复合结构</h3><p>即字面量、对象和数组的复合使用。</p><h3 id="将配置文件中的属性值映射至-bean"><a href="#将配置文件中的属性值映射至-bean" class="headerlink" title="将配置文件中的属性值映射至 bean"></a>将配置文件中的属性值映射至 bean</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/11/22 10:50 * @Description dog entity */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">lastName</span><span class="token punctuation">:</span> LaoZhang  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">11</span>  <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2019/5/5  <span class="token key atrule">map</span><span class="token punctuation">:</span>    <span class="token key atrule">key1</span><span class="token punctuation">:</span> value1    <span class="token key atrule">key2</span><span class="token punctuation">:</span> value2  <span class="token key atrule">list</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> LaoWang    <span class="token punctuation">-</span> LaoLi  <span class="token key atrule">dog</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 小狗    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">2</span></code></pre><blockquote><p>可以在 resources 下新建 META-INF 文件夹，并新建 additional-spring-configuration-metadata.json 输入如下代码为 yaml 添加 person</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">{</span> <span class="token key atrule">"properties"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>   <span class="token punctuation">{</span>     <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"person.dog.name"</span><span class="token punctuation">,</span>     <span class="token key atrule">"type"</span><span class="token punctuation">:</span> <span class="token string">"java.lang.String"</span><span class="token punctuation">,</span>     <span class="token key atrule">"description"</span><span class="token punctuation">:</span> <span class="token string">"Description for person.dog.name."</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>     <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"person.dog.age"</span><span class="token punctuation">,</span>     <span class="token key atrule">"type"</span><span class="token punctuation">:</span> <span class="token string">"java.lang.Integer"</span><span class="token punctuation">,</span>     <span class="token key atrule">"description"</span><span class="token punctuation">:</span> <span class="token string">"Description for person.dog.age."</span>   <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></blockquote><pre><code>1. 使用`@ConfigurationProperties`注解，需要添加依赖`spring-boot-configuration-processor`。    ```java    /**     * @Author 喵粮都输光了     * @Date 2019/11/22 10:45     * @Description Person entity     */    @Data    @Component    @ConfigurationProperties("person")    public class Person {        private String lastName;        private Integer age;        private Boolean boss;        private Date birth;        private Map&lt;String, Object&gt; map;        private List&lt;Object&gt; list;        private Dog dog;    }    ```2. 使用`@Value()`注解获取值，其中可以用SpEL表达式获取值，不支持复杂类型封装。    ```java    /**     * @Author 喵粮都输光了     * @Date 2019/11/22 10:45     * @Description Person entity     */    @Data    @Component    public class Person {        @Value("${person.lastName}")        private String lastName;        @Value("#{11*2}")        private Integer age;        @Value("false")        private Boolean boss;        private Date birth;        private Map&lt;String, Object&gt; map;        private List&lt;Object&gt; list;        private Dog dog;    }    ```3. `@ConfigurationProperties`支持 JSR303 数据校验。在类上添加注解`@validated`用于支持 JSR303，在需要接收的数据上加上需要校验格式的注解，例如`@Email`。    ```java    /**     * @Author 喵粮都输光了     * @Date 2019/11/22 10:45     * @Description Person entity     */    @Data    @Component    @ConfigurationProperties("person")    @validated    public class Person {        @Email        private String lastName;        private Integer age;        private Boolean boss;        private Date birth;        private Map&lt;String, Object&gt; map;        private List&lt;Object&gt; list;        private Dog dog;    }    ```## 自定义配置文件加载### `@PropertySource`通过组合`@PropertySource`和`@ConfigurationProperties`可以读取指定 properties 文件中的属性值并映射至 bean。```propertiesperson.lastName=LaoZhangperson.age=11person.boss=falseperson.birth=2019/5/5person.map.key1=value1person.map.key2=value2person.list=LaoWang, LaoLiperson.dog.name=小狗person.dog.age=2</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/11/22 10:45 * @Description Person entity */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:person.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a><code>@ImportResource</code></h3><p>该注解用于导入自定义的 Spring 的配置文件，将注解添加至 SpringBoot 应用主程序类上即可，可添加多个 Spring 配置文件。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.springbootstudy.service.HelloService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootStudyApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootStudyApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a><code>@Configuration</code></h3><p>SpringBoot 推荐使用全注解的方式添加组件代替配置文件，只需要在类上加<code>@Configuration</code>的注解即可指明该类是配置类。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/11/22 12:42 * @Description 应用注解配置 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplicationConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 将方法的返回值添加到容器中，容器中这个组件默认的id就是方法名。相当于&lt;bean id="helloService", clas=="">&lt;/bean>     * @return 返回 HelloService 对象。     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HelloService <span class="token function">helloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h2><p>配置文件中可以使用随机数和占位符，且占位符可设置默认值。例如：<code>person.dog.name</code>引用了<code>person.lastName</code>的值，而<code>person.dog.age</code>引用了<code>hello.age</code>的值，因没有定义<code>hello.age</code>的值，会使用默认值<code>10</code>，最终<code>person.dog.age</code>的值为10。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">lastName</span><span class="token punctuation">:</span> LaoZhang$<span class="token punctuation">{</span>random.uuid<span class="token punctuation">}</span>  <span class="token key atrule">age</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.int<span class="token punctuation">}</span>  <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2019/5/5  <span class="token key atrule">map</span><span class="token punctuation">:</span>    <span class="token key atrule">key1</span><span class="token punctuation">:</span> value1    <span class="token key atrule">key2</span><span class="token punctuation">:</span> value2  <span class="token key atrule">list</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> $<span class="token punctuation">{</span>random.value<span class="token punctuation">}</span>    <span class="token punctuation">-</span> LaoLi  <span class="token key atrule">dog</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>person.lastName<span class="token punctuation">}</span>的小狗    <span class="token key atrule">age</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>hello.age<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">}</span></code></pre><h2 id="环境配置选择"><a href="#环境配置选择" class="headerlink" title="环境配置选择"></a>环境配置选择</h2><h3 id="多文件形式"><a href="#多文件形式" class="headerlink" title="多文件形式"></a>多文件形式</h3><p>SpringBoot 可以在<code>application.yml/properties</code>中通过<code>spring.profiles.active = {profile}</code>来选择应用环境，其中其他配置文件名应为<code>application-{profile}.yml/properties</code>的形式。例如此处应用的主配置应用端口号为 8080，dev 配置文件中应用端口号为 8081，在主配制中激活 dev 配置，则应用端口号变为 8081。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#application-dev.yml</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span></code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#application.yml</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev</code></pre><h3 id="多文档块形式（仅-YAML-支持）"><a href="#多文档块形式（仅-YAML-支持）" class="headerlink" title="多文档块形式（仅 YAML 支持）"></a>多文档块形式（仅 YAML 支持）</h3><p>在<code>application.yml</code>中可以通过三横杠<code>---</code>的方式划分文档块，每一个文档块相当于一个自定义的配置文件，可以通过<code>spring.profiles = {profile}</code>定义文档块的名字，并使用<code>spring.profiles.active = {profile}</code>的形式激活选定的文档块。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> prod</code></pre><h3 id="激活-profile"><a href="#激活-profile" class="headerlink" title="激活 profile"></a>激活 profile</h3><ol><li>通过配置文件指定，如上。</li><li>通过命令行参数指定，如在<code>Program arguments</code>中输入<code>--spring.profiles.active=dev</code>或<code>java -jar xxx.jar --spring.profiles.active=dev</code></li><li>通过虚拟机参数指定，如在<code>VM options</code>中输入<code>-Dspring.profiles.active=dev</code>。</li></ol><h2 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h2><p>SpringBoot 会自定扫描如下位置的<code>application.properties/yml</code>文件作为默认配置文件。配置加载优先级高低从上至下，其中高优先级的配置会覆盖低优先级的内容。所有位置的文件都会被加载，当配置项相同时会按优先级进行覆盖，而配置项不同时则会全部加载，也就是所谓的配置互补。</p><ol><li><code>file:./config/</code>即项目根目录下的<code>config</code>文件夹。</li><li><code>file:./</code>即项目根目录。</li><li><code>classpath:/config/</code>即<code>resources</code>文件夹下的<code>config</code>文件夹。</li><li><code>classpath:/</code>即<code>resources</code>文件夹。</li></ol><p>SpringBoot 允许通过<code>spring.config.location</code>来改变默认的配置文件位置。如<code>java -jar xxx.jar --spring.config.location=G:/application.yml</code>。（只能在命令行运行 Jar 包时通过该参数改变默认的配置文件位置，会遵循优先级和互补原则）</p><h2 id="外部配置文件加载顺序"><a href="#外部配置文件加载顺序" class="headerlink" title="外部配置文件加载顺序"></a>外部配置文件加载顺序</h2><p>SpringBoot 也可以从以下位置加载配置（优先级从高到低），会遵循优先级和互补原则。</p><ol><li>命令行参数。</li><li>来自<code>java:comp/env</code>的JNDI属性。</li><li>JAVA 系统属性。</li><li>操作系统环境变量。</li><li>RandomValuePropertySource 配置的<code>random.*</code>属性值。</li><li>JAR 包外部的<code>application-{profile}.properties</code>或<code>application.yml</code>（带<code>Spring.profile</code>）配置文件。</li><li>JAR 包内部的<code>application-{profile}.properties</code>或<code>application.yml</code>（带<code>Spring.profile</code>）配置文件。</li><li>JAR 包外部的<code>application.properties</code>或<code>application.yml</code>（带<code>Spring.profile</code>）配置文件。</li><li>JAR 包内部的<code>application.properties</code>或<code>application.yml</code>（带<code>Spring.profile</code>）配置文件。</li><li><code>@Configuration</code>注解类上的<code>@PropertySource</code>。</li><li>通过 SpringApplication.setDefaultProperties 指定的默认属性。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（一）：简介</title>
      <link href="/posts/1bc2c8b5/"/>
      <url>/posts/1bc2c8b5/</url>
      
        <content type="html"><![CDATA[<h2 id="服务架构"><a href="#服务架构" class="headerlink" title="服务架构"></a>服务架构</h2><ol><li>传统 WEB 应用服务架构是单体应用模式，即一个 WAR 包包含了项目所有功能，其所带来的优势是使得项目的开发，测试和部署极其方便。但是所带来的缺陷也是极其明显的，当某一功能进行修改时，项目需要重新进行部署。<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/singleApplicationMode.png"></li><li>微服务架构即一个应用便是一组小型服务的集合，并且各个服务之间可以通过 HTTP 协议进行互通。当使用微服务架构时，每一个功能元素最终都是一个可独立替换或独立升级的软件单元，而 SpringBoot 可以快速的开发每一个软件单元，之后可通过 SpringCloud 将所开发软件单元联系起来。<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/microservices.png"></li></ol><h2 id="SpringBoot-优点"><a href="#SpringBoot-优点" class="headerlink" title="SpringBoot 优点"></a>SpringBoot 优点</h2><ul><li><strong>无需手动管理依赖 JAR 包的版本</strong></li><li><strong>无须配置XML，自动配置，简化开发且可修改默认值</strong></li><li><strong>使用嵌入式的 Servlet 容器，应用无需达成 WAR 包</strong></li><li><strong>外部化配置</strong><br>SpringBoot 可以使用 properties 文件，YAML文件，环境变量，命令行参数等来外部化配置。</li><li><strong>无缝集成 Spring 技术栈</strong><br>SpringBoot 通过stater pom来导入这些依赖，且自动进行配置。</li><li><strong>devtools提供的开发时特性</strong><br>SpringBoot 的 devtools 模块可以为应用增加开发时特性，例如开发环境属性默认值。</li><li><strong>Actuator提供的生产特性</strong><br>Actuator 提供准生产环境的运行时应用监控。</li><li><strong>天然集成云计算</strong></li></ul><h2 id="SpringBoot-环境搭建"><a href="#SpringBoot-环境搭建" class="headerlink" title="SpringBoot 环境搭建"></a>SpringBoot 环境搭建</h2><ol><li>搭建完成的目录层级。<br><br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/directoryLevel.png"></li><li>通过 IDEA 创建 MAVEN 项目。</li><li>配置 pom.xml 文件（可参考 SpringBoot 构建 <a href="https://spring.io/guides/gs/rest-service/" target="_blank" rel="noopener">RESTful 项目</a>）。<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- jdk版本 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 用于管理SpringBoot应用中所有的依赖版本 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 导入WEB模块正常运行所依赖的组件 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 导入测试模块正常运行所依赖的组件 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 导入JSON模块正常运行所依赖的组件 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.jayway.jsonpath<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>json-path<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 将程序打包成可执行的JAR包 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li>编写 SpringBoot 应用运行主程序 <pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/11/21 20:32* @Description SpringBoot主程序*/</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 运行SpringBoot应用(SpringBootApplication会自动扫描该类所在包及其下所有子包内的组件添加入Spring容器)</span>     SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>编写简单 Controller 类向页面返回数据<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/11/21 20:34* @Description HelloController*/</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="SpringBoot-应用快速构建"><a href="#SpringBoot-应用快速构建" class="headerlink" title="SpringBoot 应用快速构建"></a>SpringBoot 应用快速构建</h2><p>此处以 IDEA 为例通过 Spring Initializr 快速构建 SpringBoot 项目。</p><ol><li>通过 <code>New -&gt; Project -&gt; Spring Initializr</code> 单击下一步。</li><li>填写项目配置之后单击下一步。<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/springInitializer1.png"></li><li>勾选项目所需服务之后单击下一步后，IDEA 自动从 Spring 官网下载快速构建的项目。<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/springInitializer2.png"></li></ol><h2 id="SpringBoot-配置原理"><a href="#SpringBoot-配置原理" class="headerlink" title="SpringBoot 配置原理"></a>SpringBoot 配置原理</h2><p>SpringBoot 将所有的功能场景抽取成为一个个 Starter，只需要在项目中引入这些 Starters，其相关环境的所有依赖都会导入进来。</p><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a><strong>@SpringBootApplication</strong></h3><p>该注解应用于某一个 JAVA 类上是指该类是 SpringBoot 的主配置类，SpringBoot 将会运行该类的 main 方法来启动 SpringBoot 应用。</p><h3 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a><strong>@SpringBootConfiguration</strong></h3><p>该注解是<code>@SpringBootApplication</code>所包含的注解之一，标注在某一个 JAVA 类上是指该类是 SpringBoot 的配置类。该注解中包含 <code>@Configuration</code> 用于表明该类是一个配置类（即配置文件），通过<code>@Component</code>注解表明配置类是一个组件并能被 Spring 容器扫描到。</p><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a><strong>@EnableAutoConfiguration</strong></h3><p>该注解是<code>@SpringBootApplication</code>所包含的注解之一，用于扫描组件并进行自动配置。该注解通过<code>@AutoConfigurationPackage</code>中的<code>@Import("AutoConfigurationPackages.Registrar.class")</code>将<code>@SpringBootApplication</code>标注的类所在包及其下所有子包内的所有组件扫描入 Spring 容器中，最后通过<code>@Import(EnableAutoConfigurationImportSelector.class)</code>获取需要导入组件的选择器全限定类名添加入 Spring 容器中，并通过自动配置类（xxxAutoConfiguration）为组件自动配置。自动配置类文件包含在 spring-boot-autoconfiguration.jar 包下。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合</title>
      <link href="/posts/12cc57d7/"/>
      <url>/posts/12cc57d7/</url>
      
        <content type="html"><![CDATA[<h2 id="目录层级"><a href="#目录层级" class="headerlink" title="目录层级"></a>目录层级</h2><p><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/directoryLevel.png"></p><h2 id="web-xml-配置文件"><a href="#web-xml-配置文件" class="headerlink" title="web.xml 配置文件"></a>web.xml 配置文件</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring容器监听器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 前端控制器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 加载springMVC配置文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springMVC.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 服务器启动时初始化该servlet --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 编码过滤器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h2 id="spring-配置文件"><a href="#spring-配置文件" class="headerlink" title="spring 配置文件"></a>spring 配置文件</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/tx        http://www.springframework.org/schema/tx/spring-tx.xsd        http://www.springframework.org/schema/aop        https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 注解扫描 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 不扫描controller --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- aop --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 事务管理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mybatis start --></span>    <span class="token comment" spellcheck="true">&lt;!-- 加载jdbc.properties --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- alibaba druid --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClassName}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置初始化大小、最小、最大 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置获取连接等待超时的时间 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxWait<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeBetweenEvictionRunsMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minEvictableIdleTimeMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 这里建议配置为TRUE，防止取到的连接不可用 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnBorrow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnReturn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 这里配置提交方式，默认就是TRUE，可以不用配置 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultAutoCommit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 验证连接有效与否的SQL，不同的数据配置不同 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>validationQuery<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${validationQuery}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filters<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 打开removeAbandoned功能 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>removeAbandoned<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 1800s --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>removeAbandonedTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 关闭abandoned链接时输出错误日志 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logAbandoned<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- sqlSessionFactory --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/kuukokawaii/**/**.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- dao接口所在包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.**.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mybatis end --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/数据库名?serverTimezone=UTC</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">账号</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">密码</span><span class="token attr-name">validationQuery</span><span class="token punctuation">=</span><span class="token attr-value">SELECT 1</span></code></pre><h2 id="springMVC-配置文件"><a href="#springMVC-配置文件" class="headerlink" title="springMVC 配置文件"></a>springMVC 配置文件</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 注解扫描 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 只扫描controller --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 视图解析器 thymeleaf start --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/views/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.html<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateMode<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTML<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheable<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.SpringTemplateEngine<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.view.ThymeleafViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 视图解析器 thymeleaf end --></span>    <span class="token comment" spellcheck="true">&lt;!-- 过滤静态资源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/css/<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/css/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/js/<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/js/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/images/<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/images/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- FAST_JSON解析 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>text/html;charset=UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>application/json;charset=UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 注解支持 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="log4j-配置文件"><a href="#log4j-配置文件" class="headerlink" title="log4j 配置文件"></a>log4j 配置文件</h2><pre class=" language-xml"><code class="language-xml">#######################################         log4j配置相关说明#######################################%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL#%r 输出自应用启动到输出该log信息耗费的毫秒数#%c 输出所属的类目，通常就是所在类的全名#%t 输出产生该日志事件的线程名#%m 输出代码中指定的信息#%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MM dd HH:mm:ss,SSS}，输出类似： 2002年10月18日 22：10：28，921#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)#log4j提供4种布局:#org.apache.log4j.HTMLLayout（以HTML表格形式布局）#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息#log4j中有五级logger 输出级别:#FATAL 0#ERROR 3#WARN 4#INFO 6#DEBUG 7#######################################          log4j相关配置#######################################日志输出级别log4j.rootLogger=INFO,stdout,other#设置stdout的日志输出控制台log4j.appender.stdout=org.apache.log4j.ConsoleAppender#输出日志到控制台的方式，默认为System.outlog4j.appender.stdout.Target=System.out#设置使用灵活布局log4j.appender.stdout.layout=org.apache.log4j.PatternLayout#灵活定义输出格式log4j.appender.stdout.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n#设置other的日志输出控制台(RollingFileAppender)/每天生产一个日志文件(DailyRollingFileAppender)log4j.appender.other=org.apache.log4j.DailyRollingFileAppender#设置other的输出日志log4j.appender.other.File=src/main/webapp/WEB-INF/logs/ssm.log#设置other的日志最大限制log4j.appender.other.MaxFileSize=1024KB#最多只保存20个备份文件log4j.appender.other.MaxBackupIndex=1000#输出INFO级别以上的日志log4j.appender.other.Threshold=INFO#设置使用灵活布局log4j.appender.other.layout=org.apache.log4j.PatternLayout#灵活定义输出格式log4j.appender.other.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %t %m %n###显示SQL语句部分log4j.logger.com.mybatis=DEBUGlog4j.logger.com.mybatis.common.jdbc.SimpleDataSource=DEBUGlog4j.logger.com.mybatis.common.jdbc.ScriptRunner=DEBUGlog4j.logger.com.mybatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUGlog4j.logger.java.sql.Connection=DEBUGlog4j.logger.java.sql.Statement=DEBUGlog4j.logger.java.sql.PreparedStatement=DEBUGlog4j.logger.java.sql.ResultSet=DEBUG</code></pre><h2 id="JAVA-类"><a href="#JAVA-类" class="headerlink" title="JAVA 类"></a>JAVA 类</h2><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/11/20 13:28 * @Description 账户Controller */</span><span class="token annotation punctuation">@Controller</span><span class="token punctuation">(</span><span class="token string">"accountController"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AccountService accountService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">AccountController</span><span class="token punctuation">(</span>AccountService accountService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountService <span class="token operator">=</span> accountService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">findAll</span><span class="token punctuation">(</span>ModelMap modelMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modelMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> accountService<span class="token punctuation">.</span><span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"list"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/11/20 13:21 * @Description 账户dao */</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查找所有账户     * @return 账户集合     */</span>    List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.account.dao.AccountMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.account.entity.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DOUBLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account_column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--@sql SELECT --></span>        account.id, account.name, account.money        <span class="token comment" spellcheck="true">&lt;!--@sql FROM account --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAllAccount<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account_column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        FROM account    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h3 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/11/20 13:19 * @Description 账户实体 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> money<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/11/20 13:25 * @Description 账号Service */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查找所有账户     * @return 账户集合     */</span>    List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/11/20 13:27 * @Description 账号Service实现 */</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AccountMapper accountMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">AccountServiceImpl</span><span class="token punctuation">(</span>AccountMapper accountMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountMapper <span class="token operator">=</span> accountMapper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountMapper<span class="token punctuation">.</span><span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="HTML-页面"><a href="#HTML-页面" class="headerlink" title="HTML 页面"></a>HTML 页面</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--/*@thymesVar id="list" type="java.util.List"*/--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account : ${list}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${account.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${account.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${account.money}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="pom-xml-配置文件"><a href="#pom-xml-配置文件" class="headerlink" title="pom.xml 配置文件"></a>pom.xml 配置文件</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ssm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>ssm Maven Webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://www.example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Spring --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- SpringMVC --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Mybatis --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- thymeleaf --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.11.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.11.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- alibaba --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.61<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- junit --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13-beta-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- lombok --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- servlet --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- log --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0-alpha0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0-alpha0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>ssm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 编译java目录下的mapper文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-clean-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.22.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-war-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-install-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-deploy-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> spring </tag>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（六）：注解开发</title>
      <link href="/posts/13944/"/>
      <url>/posts/13944/</url>
      
        <content type="html"><![CDATA[<h2 id="CRUD-注解写法"><a href="#CRUD-注解写法" class="headerlink" title="CRUD 注解写法"></a>CRUD 注解写法</h2><p>在 Mybatis 中如果使用注解，那么在该 DAO 下就不能使用 XML 的方式进行开发。</p><h3 id="select-的注解写法"><a href="#select-的注解写法" class="headerlink" title="select 的注解写法"></a>select 的注解写法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查询指定的user * * @param id 需要查询的user id * @return 返回查找到的user */</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id};"</span><span class="token punctuation">)</span>User <span class="token function">getUser</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 查找所有User * * @return 返回User集合 */</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="insert-的注解写法"><a href="#insert-的注解写法" class="headerlink" title="insert 的注解写法"></a>insert 的注解写法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 插入一个User * * @param user 需要插入的user * @return 返回插入结果 */</span><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into user (id, name, birthday, sex, address) values (#{id}, #{name}, #{birthday}, #{sex}, #{address});"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">createUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="update-的注解写法"><a href="#update-的注解写法" class="headerlink" title="update 的注解写法"></a>update 的注解写法</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/** * 更新已给user * @param user 需要更新的user * @return 返回更新结果 */</span><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update user set id = #{id}, name = #{name}, birthday = #{birthday}, sex = #{sex}, address = #{address} where id = #{id};"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="delete-的注解写法"><a href="#delete-的注解写法" class="headerlink" title="delete 的注解写法"></a>delete 的注解写法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 删除指定用户 * * @param id 需要删除用户的id * @return 返回删除结果 */</span><span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from user where id = #{id};"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="resultMap-注解写法"><a href="#resultMap-注解写法" class="headerlink" title="resultMap 注解写法"></a>resultMap 注解写法</h2><p>Mybatis 提供了 @Results、@Result 和 @ResultMap 三个注解用于调用和实现 XML 配置中的 ResultMap 标签。其中 @Results 相当于 XML 配置中的 ResultMap 标签；@Result 相当于 XML 配置中 ResultMap 的子标签 result；而 @ResultMap 相当于 XML 配置中 CRUD 标签中的 resultMap 属性，通过填入 ResultMap 的 id 与之对应。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查找所有User * * @return 返回User集合 */</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"UserResultMap"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>INTEGER<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查询指定的user * * @param id 需要查询的user id * @return 返回查找到的user */</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id};"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span><span class="token string">"UserResultMap"</span><span class="token punctuation">)</span>User <span class="token function">getUser</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="多表查询与延迟加载注解写法"><a href="#多表查询与延迟加载注解写法" class="headerlink" title="多表查询与延迟加载注解写法"></a>多表查询与延迟加载注解写法</h2><p>Mybatis 提供了 @One 和 @Many 两个注解用于实现 XML 配置中的 association 标签 和 collection 标签。其中 fetchType 属性可以选择快速加载或延迟加载。</p><h3 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查找所有Account（立即加载） * * @return 返回Account集合 */</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from account"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"AccountResultMap"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>INTEGER<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>INTEGER<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">,</span> one <span class="token operator">=</span> <span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>        select <span class="token operator">=</span> <span class="token string">"com.kuukokawaii.user.dao.UserDao.getUser"</span><span class="token punctuation">,</span> fetchType <span class="token operator">=</span> FetchType<span class="token punctuation">.</span>EAGER    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查找所有User（延迟加载） * * @return 返回User集合 */</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"UserResultMap"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>INTEGER<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"accounts"</span><span class="token punctuation">,</span> many <span class="token operator">=</span> <span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>        select <span class="token operator">=</span> <span class="token string">"com.kuukokawaii.user.dao.AccountDao.getAccount"</span><span class="token punctuation">,</span> fetchType <span class="token operator">=</span> FetchType<span class="token punctuation">.</span>LAZY    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="二级缓存注解写法"><a href="#二级缓存注解写法" class="headerlink" title="二级缓存注解写法"></a>二级缓存注解写法</h2><p>Mybatis 提供了 @CacheNamespace 用于实现 XML 配置中 cache 标签的功能，需要注意的是该注解使用于 Dao 类上而非方法上。二级缓存可以在 SqlMapConfig.xml 中进行开启（默认开启）。</p><ul><li>注解说明：<ol><li>readWrite：读写模式，True：必须实现序列化接口；</li><li>flushInterval：刷新时间，单位：毫秒；这里的刷新是指缓存数据的有效期；</li><li>implementation：缓存实现自定义对象；</li><li>eviction：缓存策略的算法；</li><li>size：是引用的缓存结果，这里是指1024次查询的结果，是序列化之后的结果；</li><li>blocking：防止<a href="https://blog.csdn.net/kongtiao5/article/details/82771694" target="_blank" rel="noopener">缓存击穿</a>，对应的实现类：BlockingCache.putObject；</li></ol></li><li>代码演示：<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 开启二级缓存支持。（可以不进行配置，默认 true。） --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@CacheNamespace</span><span class="token punctuation">(</span>blocking <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 内容省略</span>  <span class="token punctuation">}</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（五）：缓存</title>
      <link href="/posts/2305/"/>
      <url>/posts/2305/</url>
      
        <content type="html"><![CDATA[<h2 id="缓存适用性"><a href="#缓存适用性" class="headerlink" title="缓存适用性"></a>缓存适用性</h2><ol><li>经常查询且不经常改变的数据适用于缓存。</li><li>数据的正确与否对最终结果影响不大适用于缓存。相反，商品的库存、银行的汇率和股市的牌价等皆不适用于缓存。</li></ol><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>Mybatis 的一级缓存指的是 SqlSession 对象的缓存。当执行查询之后，查询的结果会同时存入到 SqlSession 中的一块 Map 结构的存储区域中。当我们再次执行查询同样的数据时，Mybatis 会先去 SqlSession 中查询是否拥有该数据，有则直接从缓存中获取。需要注意的是当调用 SqlSession 对象的修改、添加、删除、commit()、close()等方法时，Mybatis 的一级缓存将会被清空。</p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>Mybatis 的二级缓存指的是 SqlSessionFactory 对象的缓存。由同一个 SqlSessionFactory 对象创建的 SqlSession 对象将共享该缓存。不同于一级缓存，二级缓存需要手动配置。</p><ul><li>二级缓存配置方法<ol><li>让 Mybatis 框架支持二级缓存（在 SqlMapConfig.xml 中配置）。</li><li>让当前的映射文件支持二级缓存（在 UserMapper.xml 中配置）。</li><li>让当前的操作支持二级缓存（在 select 标签中配置）。</li></ol></li><li>代码演示：<ul><li>SqlMapConfig.xml<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 开启二级缓存支持。（可以不进行配置，默认 true。） --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre></li><li>UserMapper.xml<pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!-- 在 mapper 标签下开启二级缓存支持 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/></span></span></code></pre></li><li>select 标签<pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!-- 通过 userCache 属性开启二级缓存 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">useCache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      from user  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（四）：延迟加载</title>
      <link href="/posts/4576/"/>
      <url>/posts/4576/</url>
      
        <content type="html"><![CDATA[<h2 id="立即加载和延迟加载"><a href="#立即加载和延迟加载" class="headerlink" title="立即加载和延迟加载"></a>立即加载和延迟加载</h2><ul><li>疑问<br>在一对多中，当我们有一个用户，它有100个账户。<ol><li>在查询用户的时候，要不要查询关联的账户。</li><li>在查询账户的时候，是否需要查询关联的用户。</li></ol></li><li>解决<ol><li>在查询用户的时候，是否查询关联的账户是按需查询。因此此处采用延迟加载（按需加载、懒加载），即数据只在需要的时候进行加载。</li><li>在查询账户的时候，关联的用户信息会随着账户查询一并查询显示。因此此处采用立即加载，即无论数据是否需要，再发起查询的时候都立即加载。</li></ol></li><li>总结<ol><li>一对多，多对多：通常情况下都是采用延迟加载。</li><li>一对一（多对一）：通常情况下都是采用立即加载。</li></ol></li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/30 14:53 * @Description 账户实体 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 此处省略 get 和 set</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> User user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Account{"</span> <span class="token operator">+</span>            <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>            <span class="token string">", username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/23 16:28 * @Description 用户实体 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 此处省略 get 和 set</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accounts<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>            <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>            <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", birthday="</span> <span class="token operator">+</span> birthday <span class="token operator">+</span>            <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/23 17:12 * @Description 用户持久层接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查找指定的User     * @param id 通过id查找User     * @return 返回找到的User对象     */</span>    User <span class="token function">getUser</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查找所有User     * @return 返回User集合     */</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/10/9 15:37 * @Description 账号持久层接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查找指定的Account     * @param id 通过id查找Account     * @return 返回找到的Account对象     */</span>    Account <span class="token function">getAccount</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查找所有Account     * @return 返回Account集合     */</span>    List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>在 SqlMapConfig.xml 中开启延迟加载<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 开启延迟加载开关 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre></li><li>一对多延迟加载：一个 User 拥有多个 Account，通过 UserMapper 中的 collection 标签的 select 调用 Account 中的 getAccount 方法进行延迟加载。<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Account_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--@sql select --></span>      account.id,      username,      password      <span class="token comment" spellcheck="true">&lt;!--@sql from account --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAccount<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Account_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      from account      where account.id = #{id};  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DATE<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!--      延迟加载一对多。          select：表示调用其他查询（可以是其他mapper中的查询），此处为查询用户的唯一标识。          column：用户根据 id 查询时，所需要的参数的值。即为 select 中查询提供所需的 id 进行查询。      --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.dao.AccountDao.getAccount<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--@sql select --></span>      user.id,      name,      birthday,      sex,      address      <span class="token comment" spellcheck="true">&lt;!--@sql from user --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      from user  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li>一对一（多对一）延迟加载：多个 Account 对应一个 User，通过 AccountMapper 中的 association 标签的 select 调用 User 中的 getUser 方法进行延迟加载。<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--@sql select --></span>      user.id,      name,      birthday,      sex,      address      <span class="token comment" spellcheck="true">&lt;!--@sql from user --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      from user      where user.id = #{id};  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!--      延迟加载一对一（多对一）。          select：表示调用其他查询（可以是其他mapper中的查询），此处为查询用户的唯一标识。          column：用户根据 id 查询时，所需要的参数的值。即为 select 中查询提供所需的 id 进行查询。      --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.dao.UserDao.getUser<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Account_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--@sql select --></span>      account.id,      username,      password      <span class="token comment" spellcheck="true">&lt;!--@sql from account --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAccounts<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Account_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      from account  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之策略模式</title>
      <link href="/posts/36970/"/>
      <url>/posts/36970/</url>
      
        <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><ul><li>策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。即将各个功能拆分封装成模块，最终通过组合的方式实现效果。</li><li>设计原则<br>  <span id="principle1"></span><ol><li>找出应用中可能需要变化之处，把它们独立出来，不要和哪些不需要变化的代码混在一起。<br><span id="principle2"></span></li><li>针对接口编程，而不是针对实现编程。<br><span id="principle3"></span></li><li>多用组合，少用继承。</li></ol></li></ul><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>根据 OO 标准，设计一个鸭子超类，并让各类鸭子继承此超类。</p><h2 id="新增飞行功能"><a href="#新增飞行功能" class="headerlink" title="新增飞行功能"></a>新增飞行功能</h2><ul><li>问题：在超类上新增功能飞行，导致子类不能飞行的鸭子也能够飞行。</li><li>解决：覆盖不能飞行的鸭子的飞行方法，让不能飞行的鸭子不再拥有飞行功能。如此修改代码的话会导致以后每增加一个继承鸭子超类的子类都需要检查并可能覆盖飞行方法，这是非常痛苦的一件事情！因此将飞行方法抽取出来，让需要该功能的鸭子实现接口即可。</li></ul><h2 id="实现飞行接口"><a href="#实现飞行接口" class="headerlink" title="实现飞行接口"></a>实现飞行接口</h2><ul><li>问题：当抽取了飞行功能时，发现每次新增子类时都需要实现一次飞行接口，这造成了大量代码的重复！</li><li>解决：这里可以对飞行接口进行实现，让能飞、不能飞的鸭子在初始化实例变量时调用所需接口即可。</li><li>UML图：<img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/strategyUML.jpg"></li><li>代码演示：<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/10/9 17:46* @Description 鸭子超类*/</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractDuck</span> <span class="token punctuation">{</span>  FlyBehavior flyBehavior<span class="token punctuation">;</span>  QuackBehavior quackBehavior<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 执行飞行功能   */</span>  <span class="token keyword">void</span> <span class="token function">performFly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      flyBehavior<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 执行叫声功能   */</span>  <span class="token keyword">void</span> <span class="token function">performQuack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      quackBehavior<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 游泳功能   */</span>  <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"会游泳。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 外观   */</span>  <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/10/9 18:35* @Description 飞行接口*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FlyBehavior</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 飞行功能。   */</span>  <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/10/9 18:58* @Description 飞行接口实现类：不能飞*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyNowayImpl</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBehavior</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不能飞。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/10/9 18:59* @Description 飞行接口实现类：能飞*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyWithWingsImpl</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBehavior</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"能飞。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/10/9 18:35* @Description 叫声接口*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QuackBehavior</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 叫声功能。   */</span>  <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/10/9 19:01* @Description 叫声接口实现类：呱呱叫*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuackImpl</span> <span class="token keyword">implements</span> <span class="token class-name">QuackBehavior</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"呱呱叫。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/10/9 19:01* @Description 叫声接口实现类：吱吱叫*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqueakImpl</span> <span class="token keyword">implements</span> <span class="token class-name">QuackBehavior</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吱吱叫。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/10/9 17:48* @Description 红头鸭*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedheadDuck</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDuck</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token function">RedheadDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      quackBehavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuackImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      flyBehavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlyWithWingsImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外观是红头鸭。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/10/9 18:20* @Description 橡皮鸭*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RubberDuck</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDuck</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token function">RubberDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      quackBehavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqueakImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      flyBehavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlyNowayImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外观是橡皮鸭。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="遗留的小问题"><a href="#遗留的小问题" class="headerlink" title="遗留的小问题"></a>遗留的小问题</h2><ul><li>问题：实现飞行功能的解决方法在构造器中制造了一个具体的实现类实例，该行为违反了不对具体实现编程的设计原则。</li><li>解决：可以通过其他设计模式解决。</li></ul><h2 id="动态设定行为"><a href="#动态设定行为" class="headerlink" title="动态设定行为"></a>动态设定行为</h2><ul><li>需求：实现飞行接口的方案可以动态的设定行为，即在运行时修改鸭子的功能，而不是通过构造器实例化。</li><li>代码演示（主要代码）：<br>  在 Duck 类新增 setFlyBehavior 和 setQuackBehavior 方法。<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/10/9 17:46   * @Description 鸭子超类   */</span>  <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractDuck</span> <span class="token punctuation">{</span>      FlyBehavior flyBehavior<span class="token punctuation">;</span>      QuackBehavior quackBehavior<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 执行飞行功能       */</span>      <span class="token keyword">void</span> <span class="token function">performFly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          flyBehavior<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 执行叫声功能       */</span>      <span class="token keyword">void</span> <span class="token function">performQuack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          quackBehavior<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 设置具体飞行功能。       *       * @param flyBehavior 具体飞行功能       */</span>      <span class="token keyword">void</span> <span class="token function">setFlyBehavior</span><span class="token punctuation">(</span>FlyBehavior flyBehavior<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>flyBehavior <span class="token operator">=</span> flyBehavior<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 设置具体叫声功能。       *       * @param quackBehavior 具体叫声功能       */</span>      <span class="token keyword">void</span> <span class="token function">setQuackBehavior</span><span class="token punctuation">(</span>QuackBehavior quackBehavior<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>quackBehavior <span class="token operator">=</span> quackBehavior<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 游泳功能       */</span>      <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"会游泳。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 外观       */</span>      <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre>  在运行中修改橡皮鸭的叫声为呱呱叫。<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/10/9 19:18   * @Description 主函数   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          AbstractDuck rubberDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RubberDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rubberDuck<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rubberDuck<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rubberDuck<span class="token punctuation">.</span><span class="token function">performFly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rubberDuck<span class="token punctuation">.</span><span class="token function">performQuack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------改变了橡皮鸭的叫声为呱呱叫--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rubberDuck<span class="token punctuation">.</span><span class="token function">setQuackBehavior</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QuackImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rubberDuck<span class="token punctuation">.</span><span class="token function">performQuack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（三）：多表操作</title>
      <link href="/posts/44025/"/>
      <url>/posts/44025/</url>
      
        <content type="html"><![CDATA[<h2 id="一对多、一对一"><a href="#一对多、一对一" class="headerlink" title="一对多、一对一"></a>一对多、一对一</h2><ul><li>案例说明：用户和账户<ol><li>一个用户可以有多个账户，使用 collection。</li><li>一个账户只能属于一个用户，使用 association。（多个账户也可以属于同一个用户）</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/23 16:28   * @Description 用户实体   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 此处省略 get 和 set</span>      <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>      <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>      <span class="token keyword">private</span> String address<span class="token punctuation">;</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accounts<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/30 14:53   * @Description 账户实体   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 此处省略 get 和 set</span>      <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>      <span class="token keyword">private</span> String username<span class="token punctuation">;</span>      <span class="token keyword">private</span> String password<span class="token punctuation">;</span>      <span class="token keyword">private</span> User user<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><ul><li>UserMapper（一对多）<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DATE<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre></li><li>AccountMapper（一对一）<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DATE<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><ul><li>案例说明：用户和角色<ol><li>一个用户可以有多个角色。</li><li>一个角色可以赋予多个用户。</li><li>数据库中需要一个中间表来记录角色和用户之间的对应关系。（需要中间表）</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/23 16:28   * @Description 用户实体   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 此处省略 get 和 set</span>      <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>      <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>      <span class="token keyword">private</span> String address<span class="token punctuation">;</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Role<span class="token operator">></span> roles<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/10/9 16:50   * @Description 角色实体   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Role</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 此处省略 get 和 set</span>      <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>      <span class="token keyword">private</span> String roleName<span class="token punctuation">;</span>      <span class="token keyword">private</span> String roleDesc<span class="token punctuation">;</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> users<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><ul><li>UserMapper（一对多）<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DATE<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roles<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RoleResultMap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RoleResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.Role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role_desc<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleDesc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre></li><li>AccountMapper（一对多）<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RoleResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.Role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role_desc<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleDesc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DATE<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（二）：mapper.xml 文件语法</title>
      <link href="/posts/30243/"/>
      <url>/posts/30243/</url>
      
        <content type="html"><![CDATA[<h2 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h2><ul><li>resultMap 可以实现将查询结果映射为复杂类型的pojo。<ol><li>id：用于定义 resultMap 的 id。</li><li>type：复杂类型的实体全限定名。</li><li>result：对数据库字段和 java 变量进行映射。<ol><li>column：数据库字段。</li><li>jdbcType：数据库字段类型。</li><li>property：java 变量。</li></ol></li><li>collection：一个复杂类型的关联，可以关联另一个 resultMap。</li></ol></li><li>案例说明：<ol><li>创建一个 Account 类，包含 username 和 password。</li><li>创建一个 User 类，包含 id、name、birthday、sex 和 address。</li><li>定义 User 类的 resultMap。</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/30 14:53   * @Description 账户实体   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 此处省略了 set 和 get。</span>      <span class="token keyword">private</span> String username<span class="token punctuation">;</span>      <span class="token keyword">private</span> String password<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/23 16:28   * @Description 用户实体   */</span>  <span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 此处省略了 set 和 get。</span>      <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>      <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>      <span class="token keyword">private</span> String address<span class="token punctuation">;</span>      <span class="token keyword">private</span> Account account<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DATE<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><ul><li>sql 被用来定义可重用的 sql 代码段，可以通过<code>&lt;include&gt;</code>标签进行调用。</li><li>案例说明：用 sql 定义 user 和 account 表的字段集。</li><li>代码演示：<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--@sql select --></span>      user.id,      name,      birthday,      sex,      address      <span class="token comment" spellcheck="true">&lt;!--@sql from user --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Account_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--@sql select --></span>      account.id,      username,      password      <span class="token comment" spellcheck="true">&lt;!--@sql from account --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul><li>if 提供了一种可选的查找文本功能，符合条件即执行。</li><li>案例说明：当 sex 非 null 时语句查询指定的 name 和 sex 条件，否则只查询 name。</li><li>代码演示：<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>,      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Account_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      from user      left join account on user.id = account.id      where name = #{name}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          and sex = #{sex}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose, when, otherwise"></a>choose, when, otherwise</h2><ul><li>choose 从多个条件中挑选一个，类似于 switch 语句。</li><li>案例说明：当 sex 非空时根据 name 和 sex 查询，当 birthday 非空时根据 name 和 birthday 查询，当 address 非空时根据 name 和 address 查询，否则仅根据 name 查询。</li><li>代码演示：<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>,      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Account_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      from user      left join account on user.id = account.id      where name = #{name}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              and sex = #{sex}          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              and birthday = #{birthday}          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>              and address = #{address}          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim, where, set"></a>trim, where, set</h2><ul><li>当使用 if 进行条件匹配时，如果一个条件都不匹配则语句末尾可能以 where 结尾导致 sql 报错。若匹配的条件非第一项而是其他项则会导致 where and xxx 的语句情况同样会报错。因此 mybatis 的 where 标签会自动处理该情况。set 同理。当 where 和 set 标签没有发挥作用时可以通过 trim 自定义格式执行。</li><li>案例说明：<ol><li>当条件非空时查询指定条件否则查询所有。</li><li>当条件非空时更新非空条件。</li></ol></li><li>代码演示：<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>,      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Account_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      from user      left join account on user.id = account.id      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              name = #{name}          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              and sex = #{sex}          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- where 等价于 trim 的如下情形 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WHERE<span class="token punctuation">"</span></span> <span class="token attr-name">prefixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AND |OR <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 内容 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      update user, account      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              user.id = #{id},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              name = #{name},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              birthday = #{birthday},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              sex = #{sex},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              address = #{address},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account.id !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              account.id = #{account.id},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account.username !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              account.username = #{account.username},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account.password !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              account.password = #{account.password},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>      where user.id = account.id      and user.id = #{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- set 等价于 trim 的如下情形 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SET<span class="token punctuation">"</span></span> <span class="token attr-name">prefixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 内容 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span></code></pre><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2></li><li>通常是在构建 IN 条件语句的时候使用，对一个集合进行遍历操作。</li><li>案例说明：搜索 id 在列表中的 user。</li><li>代码演示：<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUserIn<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from user      where user.id in      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span>          <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              #{item}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><ul><li>bind 元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文。</li><li>案例说明：搜索符合条件的 user。</li><li>代码演示：<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUsersLike<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>%<span class="token punctuation">'</span> + _parameter.getTitle() + <span class="token punctuation">'</span>%<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      select * from user      where name like #{pattern}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><ul><li>select 是 mybatis 的查询语句。<ol><li>id：用于定义 select 的 id，需要与 DAO 中的方法名对应。方法名为 get 表获取单个元素，find 表获取元素集。</li><li>parameterType：表传入的参数类型。</li><li>resultType：表示返回类型（与 resultMap 二选一），如果返回的是集合则填写集合所包含的类型。</li><li>resultMap：表示返回类型（与 resultType 二选一），返回定义的 resultMap。</li></ol></li><li>案例说明：<ol><li>查找一个指定名称的 User 对象。</li><li>查找所有 User 对象。</li></ol></li><li>代码演示：<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>,      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Account_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      from user      left join account on user.id = account.id      where name = #{name};  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>,      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Account_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      from user      left join account on user.id = account.id  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><ul><li>delete 是 mybatis 的删除语句。</li><li>案例说明：删除一个指定 id 的 User 和 Account 对象。</li><li>代码演示：<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      delete      from user, account      using user, account      where user.id = account.id      and user.id = #{id};  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><ul><li>update 是 mybatis 的更新语句。<ol><li>useGeneratedKeys：更新后返回主键（默认 false）。</li><li>keyProperty：指定在 Java 实体中对应的主键变量名。</li><li>keyColumn：当主键列不是表中的第一列的时候需要设置，用于指定数据库的主键（默认数据库第一列为主键）。</li></ol></li><li>案例说明：更新指定User对象。</li><li>代码演示：<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      update user, account      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              user.id = #{id},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              name = #{name},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              birthday = #{birthday},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              sex = #{sex},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              address = #{address},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account.id !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              account.id = #{account.id},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account.username !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              account.username = #{account.username},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account.password !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              account.password = #{account.password},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>      where user.id = account.id      and user.id = #{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2></li><li>insert 是 mybatis 的插入语句。</li><li>案例说明：插入一个User对象。(如果在插入一个 User 对象的同时插入 Account 对象，需要在 Service 中开启事务并调用 User 插入和 Account 插入语句。)</li><li>代码演示：<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      insert into user      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              name,          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              birthday,          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              sex,          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              address,          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>values (<span class="token punctuation">"</span></span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              #{name},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              #{birthday},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              #{sex},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              #{address},          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（一）：简介</title>
      <link href="/posts/13712/"/>
      <url>/posts/13712/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis-概述"><a href="#Mybatis-概述" class="headerlink" title="Mybatis 概述"></a>Mybatis 概述</h2><ol><li>Mybatis 封装了 jdbc，让开发无需花费精力去处理加载驱动、创建连接、创建 statement 等繁杂的过程。</li><li>Mybatis 通过 XML 或注解的方式将要执行的各种 statement 配置起来，并通过 java 对象 和 statement 中 sql 的动态参数进行映射生成最终执行的 sql 语句，最后由 Mybatis 框架执行 sql 并将结果映射为 java 对象并返回。</li><li>Mybatis 采用 ORM 思想解决了实体和数据库映射的问题，因此不需要直接操作 JDBC API 便可以完成对数据库的持久化操作。</li></ol><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><ol><li>在 mysql 数据库中建立 user 表。</li><li>创建 User 实体和 dao 接口。</li><li>创建映射配置文件（UserMapper.xml），注意 mybatis 的映射位置文件位置必须和 dao 接口的包结构相同。</li><li>配置 mybatis 配置文件（SqlMapConfig.xml）。</li><li>Demo 目录层级如下：<br> <img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/directoryHierarchy.png"></li></ol><h2 id="使用到的-Jar-包"><a href="#使用到的-Jar-包" class="headerlink" title="使用到的 Jar 包"></a>使用到的 Jar 包</h2><ul><li>mybatis.jar</li><li>log4j.jar</li><li>junit.jar</li><li>mysql-connector-java.jar</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class=" language-mysql"><code class="language-mysql">use mybatis;create table user(    id int(11) not null primary key auto_increment,    username varchar(30) not null comment '用户名称',    birthday datetime default null comment '生日',    sex char(1) default null comment '性别',    address varchar(256) default null comment '地址') engine=innodb default charset=utf8mb4;insert into user (username, birthday, sex, address) values('update user clear cache', '2018-02-10', '男', '北京xx1');insert into user (username, birthday, sex, address) values('123', '2018-03-10', '女', '北京xx81');insert into user (username, birthday, sex, address) values('13535', '2018-05-10', '女', '北京xx71');insert into user (username, birthday, sex, address) values('456436', '2018-07-10', '男', '北京xx19');insert into user (username, birthday, sex, address) values('asda', '2018-02-15', '女', '北京xx1');insert into user (username, birthday, sex, address) values('啊沙发沙发', '2018-08-20', '男', '北京xx12');insert into user (username, birthday, sex, address) values('让他人', '2018-09-10', '女', '北京xx17');insert into user (username, birthday, sex, address) values('啊实打实的', '2018-10-01', '男', '北京xx21');</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/23 16:28 * @Description 用户实体 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略了 get 和 set。</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">", birthday="</span> <span class="token operator">+</span> birthday <span class="token operator">+</span> <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">", address"</span> <span class="token operator">+</span>            <span class="token string">"='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">#######################################         log4j配置相关说明#######################################%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL#%r 输出自应用启动到输出该log信息耗费的毫秒数#%c 输出所属的类目，通常就是所在类的全名#%t 输出产生该日志事件的线程名#%m 输出代码中指定的信息#%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MM dd HH:mm:ss,SSS}，输出类似： 2002年10月18日 22：10：28，921#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)#log4j提供4种布局:#org.apache.log4j.HTMLLayout（以HTML表格形式布局）#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息#log4j中有五级logger 输出级别:#FATAL 0#ERROR 3#WARN 4#INFO 6#DEBUG 7#######################################          log4j相关配置#######################################日志输出级别log4j.rootLogger=INFO,stdout,other#设置stdout的日志输出控制台log4j.appender.stdout=org.apache.log4j.ConsoleAppender#输出日志到控制台的方式，默认为System.outlog4j.appender.stdout.Target=System.out#设置使用灵活布局log4j.appender.stdout.layout=org.apache.log4j.PatternLayout#灵活定义输出格式log4j.appender.stdout.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n#设置other的日志输出控制台(RollingFileAppender)。/每天生产一个日志文件(DailyRollingFileAppender),没有MaxFileSize和MaxBackupIndex属性。#log4j.appender.other=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.other=org.apache.log4j.RollingFileAppender#设置other的输出日志log4j.appender.other.File=设置输出位置，例如 D:\\JetBrains。#设置other的日志最大限制log4j.appender.other.MaxFileSize=1024KB#最多只保存20个备份文件log4j.appender.other.MaxBackupIndex=1000#输出INFO级别以上的日志log4j.appender.other.Threshold=INFO#设置使用灵活布局log4j.appender.other.layout=org.apache.log4j.PatternLayout#灵活定义输出格式log4j.appender.other.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %t %m %n###显示SQL语句部分log4j.logger.com.mybatis=DEBUGlog4j.logger.com.mybatis.common.jdbc.SimpleDataSource=DEBUGlog4j.logger.com.mybatis.common.jdbc.ScriptRunner=DEBUGlog4j.logger.com.mybatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUGlog4j.logger.java.sql.Connection=DEBUGlog4j.logger.java.sql.Statement=DEBUGlog4j.logger.java.sql.PreparedStatement=DEBUGlog4j.logger.java.sql.ResultSet=DEBUG</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/25 14:33 * @Description mybatis demo 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 读取配置文件。</span>        InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 sqlSessionFactory 工厂</span>        SqlSessionFactoryBuilder sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用工厂生产 sqlSession 对象</span>        SqlSession sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用 sqlSession 创建 Dao 接口的代理对象</span>        UserDao userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 释放资源</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="XML-配置方式"><a href="#XML-配置方式" class="headerlink" title="XML 配置方式"></a>XML 配置方式</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/23 17:12 * @Description 用户持久层接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查询所有用户     * @return 返回用户 list     */</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置查询所有用户 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAllUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置环境 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置 mysql 的环境 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置事务的类型 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置数据源（连接池） --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 配置连接数据库的基本信息 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/数据库名?serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>账号<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个 dao 独立的配置文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/kuukokawaii/user/dao/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/23 17:12 * @Description 用户持久层接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查询所有用户     *     * @return 返回用户 list     */</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置环境 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置 mysql 的环境 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置事务的类型 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置数据源（连接池） --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 配置连接数据库的基本信息 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>qwe123<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个 dao 独立的配置文件。如果使用注解方式来配置则此处应该使用 class 属性指定被注解的 dao 全限定类名 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC（八）：拦截器</title>
      <link href="/posts/27588/"/>
      <url>/posts/27588/</url>
      
        <content type="html"><![CDATA[<h2 id="Filter-与-Interceptor-的区别"><a href="#Filter-与-Interceptor-的区别" class="headerlink" title="Filter 与 Interceptor 的区别"></a>Filter 与 Interceptor 的区别</h2><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>Filter 依赖于 Servlet 容器，它的实现基于函数回调，几乎可以对所有的请求进行过滤，通常于容器初始化时调用。</p><h3 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h3><p>Interceptor 依赖于 SpringMVC 框架，它的实现基于 Java 的反射机制，属于 AOP 的一种运用。通常对处理器方法进行预处理和后处理。</p><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><ol><li>编写两个拦截器类，实现 HandlerInterceptor 接口。其中预处理方法中返回值为布尔型，作用分别如下：<ul><li>true：表放行，执行下一个拦截器，没有则执行 controller 中的方法。</li><li>false：表不放行，会执行 preHandle() 和 afterCompletion() 方法，但不对 controller 中的方法和 postHandle() 进行执行。<blockquote><p>两个拦截器分别为拦截器1和拦截器2，执行顺序为：<br>1pre()→2pre()→controller方法→2post()→1post()→2after()→1after()<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/executeSequence.jpg"></p></blockquote></li></ul></li><li>SpringMVC 配置文件中配置拦截器。</li></ol><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/21 19:44 * @Description 自定义拦截器类1 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor1</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1拦截器预处理，controller 方法执行前运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span>                           ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1拦截器后处理，controller 方法执行后运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span>                                Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1在视图渲染之后运行，还要再拦截器后处理方法运行之后。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/21 19:44 * @Description 自定义拦截器类2 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor2</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2拦截器预处理，controller 方法执行前运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span>                           ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2拦截器后处理，controller 方法执行后运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span>                                Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2在视图渲染之后运行，还要再拦截器后处理方法运行之后。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/20 15:07 * @Description 拦截器 */</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testInterceptor"</span><span class="token punctuation">)</span>    String <span class="token function">testInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"controller 方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置拦截器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置需要拦截的方法。&lt;mvc:mapping>表需要拦截的方法，&lt;mvc:exclude-mapping>表不需要拦截的方法。path 填写需要拦截的 URI --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置拦截器对象 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myInterceptor1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.springmvc.interceptor.MyInterceptor1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myInterceptor2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.springmvc.interceptor.MyInterceptor2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>index 界面</title></head><body><h3>拦截器</h3><a href="/user/testInterceptor">拦截器</a></body></html></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" isELIgnored="false" %><html><head>    <title>success 界面</title></head><body><h3>执行成功</h3></body></html></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC（七）：异常处理</title>
      <link href="/posts/47299/"/>
      <url>/posts/47299/</url>
      
        <content type="html"><![CDATA[<h2 id="异常处理方式"><a href="#异常处理方式" class="headerlink" title="异常处理方式"></a>异常处理方式</h2><p>SpringMVC 常用的异常处理方式有两种：</p><ol><li>使用 SpringMVC 提供的 HandlerExceptionResolver 接口自定义异常处理器。</li><li>使用 @ControllerAdvice + @ExceptionHandler 注解实现异常处理。</li></ol><h2 id="接口方式"><a href="#接口方式" class="headerlink" title="接口方式"></a>接口方式</h2><ul><li>案例说明：<ol><li>编写自定义异常种类。</li><li>编写异常处理器。</li><li>配置异常处理器并编写异常跳转页面。</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/21 17:06   * @Description 自定义异常   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 存储提示信息（此处省略了 get 和 set）       */</span>      <span class="token keyword">private</span> String message<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">CustomException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/21 17:14   * @Description 自定义异常处理器   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> ModelAndView <span class="token function">resolveException</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取异常对象</span>          CustomException customException<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">CustomException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              customException <span class="token operator">=</span> <span class="token punctuation">(</span>CustomException<span class="token punctuation">)</span> ex<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              customException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">"系统维护中。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 创建 ModelAndView 存储异常信息并设置返回页面。</span>          ModelAndView modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">,</span> customException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/20 15:07   * @Description 异常处理   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testException"</span><span class="token punctuation">)</span>      String <span class="token function">testException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CustomException <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 模拟异常</span>              <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 打印异常信息</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 抛出自定义异常信息</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">"除数不能为0。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!-- 配置异常处理器 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customExceptionResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.springmvc.exception.CustomExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <%@ page contentType="text/html;charset=UTF-8" language="java" isELIgnored="false" %>  <html>  <head>      <title>异常处理界面</title>  </head>  <body>  ${errorMsg}  </body>  </html></code></pre><pre class=" language-jsp"><code class="language-jsp">  <%@ page contentType="text/html;charset=UTF-8" language="java" %>  <html>  <head>      <title>index 界面</title>  </head>  <body>  <h3>异常处理</h3>  <a href="/user/testException">异常处理</a>  </body>  </html></code></pre><h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2></li><li>案例说明：<ol><li>编写自定义异常种类。(CustomException、Controller 类同上)</li><li>使用 @ControllerAdvice + @ExceptionHandler(xx.class) 注解编写全局异常处理器。其中有 @ControllerAdvice 这个注解的类中的方法的某些注解会应用到所有的 Controller 里，例如 @ExceptionHandler。</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/21 17:37   * @Description 基于 @ExceptionHandler 处理异常。   */</span>  <span class="token annotation punctuation">@ControllerAdvice</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionHandler</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 基于 @ExceptionHandler 的异常处理。       * @param exception 异常信息       * @return 返回视图模型       */</span>      <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      ModelAndView <span class="token function">exceptionHandler</span><span class="token punctuation">(</span>Exception exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取异常对象</span>          CustomException customException<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">CustomException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              customException <span class="token operator">=</span> <span class="token punctuation">(</span>CustomException<span class="token punctuation">)</span> exception<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              customException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">"系统维护中。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 创建 ModelAndView 存储异常信息并设置返回页面。</span>          ModelAndView modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">,</span> customException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC（六）：文件上传</title>
      <link href="/posts/2009/"/>
      <url>/posts/2009/</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ol><li>form 表单的 enctype 取值必须是 multipart/form-data。（enctype 默认值为 application/x-www-form-urlencoded） <ul><li>enctype：表单请求正文的类型。</li></ul></li><li>method 取值必须是 Post。</li><li>提供文件选择域<code>&lt;input type="file" name=""&gt;</code>，该标签 name 属性必须有，否者会导致 fileItem 获取不到值。</li></ol><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>当 form 表单的 enctype 取值不是默认值后，request.getParameter()将失效。</li><li>当<code>enctype="application/x-www-form-urlencoded"</code>时，form 表单的正文内容是：<code>key=value&amp;key=value</code>。</li><li>当<code>enctype="multipart/form-data"</code>时， form 表单的正文内容就变成每一部分都是 MIME 类型描述的正文。</li><li>后端解析请求体获取 MIME 类型描述的正文（即上传的文件），并将上传文件写回磁盘存储。</li></ol><h2 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h2><ul><li>案例说明：<br>  通过 commons-fileupload.jar 原生 API 解析请求体。</li><li>代码演示：<pre class=" language-jsp"><code class="language-jsp">  <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>  <%@ page contentType="text/html;charset=UTF-8" language="java" %>  <html>  <head>      <title>index 界面</title>  </head>  <body>  <h3>文件上传</h3>  <form action="/user/testOldFileUpload" method="post" enctype="multipart/form-data">      选择文件：<input type="file" name="upload"><br>      <label>          <input type="submit" value="上传">      </label>  </form>  </body>  </html></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/20 15:07   * @Description 文件上传   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 利用 fileupload 解析请求体。       * @param request 请求       * @return 返回到 success 页面。       * @throws Exception 异常       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testOldFileUpload"</span><span class="token punctuation">)</span>      String <span class="token function">testOldFileUpload</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 1.上传位置创建文件夹。</span>          String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/uploads/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 2.创建 DiskFileItemFactory 存储大于 10kb 的临时文件。</span>          DiskFileItemFactory diskFileItemFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 3.创建 ServletFileUpload 负责处理上传的文件数据。</span>          ServletFileUpload servletFileUpload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>diskFileItemFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>FileItem<span class="token operator">></span> fileItems <span class="token operator">=</span> servletFileUpload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>FileItem fileItem <span class="token operator">:</span> fileItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 判断当前 fileItem 对象是否是上传文件项,true 不是，false 是。</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileItem<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 设置文件名称为唯一值 uuid。</span>                  String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 获取上传文件的名称，并与 uuid 组合。</span>                  String fileName <span class="token operator">=</span> uuid <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 上传文件</span>                  fileItem<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 删除临时 fileItem 文件。</span>                  fileItem<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h2 id="SpringMVC-方式"><a href="#SpringMVC-方式" class="headerlink" title="SpringMVC 方式"></a>SpringMVC 方式</h2></li><li>案例说明：<ol><li>在 SpringMVC 的配置文件中配置文件解析器，要求 id 名称必须为 multipartResolver。</li><li>SpringMVC 框架提供了 MultipartFile 对象表示上传的对象，该对象要求变量名称和表单 file 标签的 name 属性名称相同。</li></ol></li><li>代码演示：<pre class=" language-jsp"><code class="language-jsp">  <form action="/user/testSpringMvcFileUpload" method="post" enctype="multipart/form-data">      选择文件：<input type="file" name="upload"><br>      <label>          <input type="submit" value="上传">      </label>  </form></code></pre><pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!-- 文件解析器，要求 id 名称必须为 multipartResolver --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10485760<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/20 15:07   * @Description 文件上传   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 使用 MultipartFile 对象上传文件。       * @param upload 参数名称必须与文件上传 input 标签的 name 相同。       * @return 返回到 success 页面。       * @throws IOException io 异常       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testSpringMvcFileUpload"</span><span class="token punctuation">)</span>      String <span class="token function">testSpringMvcFileUpload</span><span class="token punctuation">(</span>MultipartFile upload<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 1.上传位置创建文件夹。</span>          String path <span class="token operator">=</span> <span class="token string">"D:\\JetBrains\\IdeaProjects\\springmvc\\target\\springmvc\\uploads\\"</span><span class="token punctuation">;</span>          File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 设置文件名称为唯一值 uuid。</span>          String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取上传文件的名称，并与 uuid 组合。</span>          String fileName <span class="token operator">=</span> uuid <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> upload<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 上传文件</span>          upload<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h2 id="跨服务器上传文件"><a href="#跨服务器上传文件" class="headerlink" title="跨服务器上传文件"></a>跨服务器上传文件</h2></li><li>案例说明：<ol><li>新建一个 maven 的 webapp 项目，在 webapp 目录下新建 uploads 目录，启动该项目的 Tomcat（注意端口不要重复）。</li><li>在客户端项目下导入 com.sun.jersey 下的 jersey-core.jar 和 jersey-client.jar 包，编写服务程序并启动 Tomcat。</li><li>如果报错的话，需要注意第一个项目的 Tomcat 中的 webapp 中以及 target 或 out 目录下适当位置是否有创建 uploads 目录。</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/20 15:07   * @Description 文件上传   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 跨服务器上传文件。       * @param upload 参数名称必须与文件上传 input 标签的 name 相同。       * @return 返回到 success 页面。       * @throws IOException io 异常       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testCrossServerFileUpload"</span><span class="token punctuation">)</span>      String <span class="token function">testCrossServerFileUpload</span><span class="token punctuation">(</span>MultipartFile upload<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 1.定义上传文件服务器路径。</span>          String path <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8081/uploads/"</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 设置文件名称为唯一值 uuid。</span>          String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取上传文件的名称，并与 uuid 组合。</span>          String fileName <span class="token operator">=</span> uuid <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> upload<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 创建客户端对象</span>          Client client <span class="token operator">=</span> Client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 和图片服务器进行连接（文件名可能中文转码）</span>          WebResource webResource <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>path <span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 上传文件</span>          webResource<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>upload<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <form action="/user/testCrossServerFileUpload" method="post" enctype="multipart/form-data">      选择文件：<input type="file" name="upload"><br>      <label>          <input type="submit" value="上传">      </label>  </form></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC（五）：响应数据和结果视图</title>
      <link href="/posts/46928/"/>
      <url>/posts/46928/</url>
      
        <content type="html"><![CDATA[<h2 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h2><h3 id="返回值类型-String"><a href="#返回值类型-String" class="headerlink" title="返回值类型 String"></a>返回值类型 String</h3><ul><li>案例说明：<ol><li>创建一个拥有姓名、密码和年龄的 User 类。</li><li>通过在 JSP 页面发起请求，控制器类中返回一个封装好了数据的 User 类。</li><li>在跳转成功的界面获取 User 类中封装的数据。</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/19 13:43   * @Description 用户类   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 此处省略了 get 和 set</span>      <span class="token keyword">private</span> String username<span class="token punctuation">;</span>      <span class="token keyword">private</span> String password<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/19 13:40   * @Description 响应数据和结果视图控制器   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试返回字符串       * @param model 模型       * @return 返回       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testString"</span><span class="token punctuation">)</span>      String <span class="token function">testString</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 模拟从数据库中查询出 User 对象</span>          User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>  <%@ page contentType="text/html;charset=UTF-8" language="java" %>  <html>  <head>      <title>index 界面</title>  </head>  <body>  <h3>响应数据和结果视图</h3>  <a href="/user/testString">testString</a><br>  </body>  </html></code></pre><pre class=" language-jsp"><code class="language-jsp">  <%@ page contentType="text/html;charset=UTF-8" language="java" isELIgnored="false" %>  <html>  <head>      <title>success 界面</title>  </head>  <body>  <h3>跳转成功</h3>  账户：${user.username}<br>  密码：${user.password}<br>  年龄：${user.age}<br>  </body>  </html></code></pre><h3 id="返回值类型-void"><a href="#返回值类型-void" class="headerlink" title="返回值类型 void"></a>返回值类型 void</h3></li><li>案例说明：<ol><li>创建一个拥有姓名、密码和年龄的 User 类。</li><li>通过在 JSP 页面发起请求，控制器类中分别进行转发、重定向和直接响应的方法响应视图页面。</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/19 13:40   * @Description 响应数据和结果视图控制器   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试无返回值类型。1、转发 2、重定向 3、直接响应       * @param request  Servlet 原生API request       * @param response Servlet 原生API response       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testVoid"</span><span class="token punctuation">)</span>      <span class="token keyword">void</span> <span class="token function">testVoid</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//1、转发（不会使用视图解析器）</span>          request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/pages/success2.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*2、重定向（无法跳转至 WEB-INF 下，且不会使用视图解析器）          response.sendRedirect("/success2.jsp");*/</span>          <span class="token comment" spellcheck="true">/*3、直接响应          // 设置中文编码，防止中文乱码。          response.setCharacterEncoding("UTF-8");          response.setContentType("text/html;charset=UTF-8");          response.getWriter().print("你好");*/</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <title>index 界面</title>  <a href="/user/testVoid">testVoid</a><br></code></pre><pre class=" language-jsp"><code class="language-jsp">  <title>success 界面</title>  <h3>跳转成功</h3></code></pre><pre class=" language-jsp"><code class="language-jsp">  <title>success2 界面</title>  <h3>跳转成功</h3></code></pre><h3 id="返回值类型-ModelAndView"><a href="#返回值类型-ModelAndView" class="headerlink" title="返回值类型 ModelAndView"></a>返回值类型 ModelAndView</h3></li><li>案例说明：<ol><li>创建一个拥有姓名、密码和年龄的 User 类。</li><li>通过在 JSP 页面发起请求，控制器类中返回一个封装好了数据的 User 类。</li><li>在跳转成功的界面获取 User 类中封装的数据。</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/19 13:40   * @Description 响应数据和结果视图控制器   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试 ModelAndView       * @param modelAndView 模型与视图       * @return 返回 modelAndView 对象       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testModelAndView"</span><span class="token punctuation">)</span>      ModelAndView <span class="token function">testModelAndView</span><span class="token punctuation">(</span>ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token punctuation">{</span>          User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>          modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <title>index 界面</title>  <a href="/user/testModelAndView">testModelAndView</a><br></code></pre><pre class=" language-jsp"><code class="language-jsp">  <title>success 界面</title>  <h3>跳转成功</h3>  账号：${user.username}<br>  密码：${user.password}<br>  年龄：${user.age}<br>  </body>  </html></code></pre><h3 id="使用-forward-和-redirect-关键字"><a href="#使用-forward-和-redirect-关键字" class="headerlink" title="使用 forward 和 redirect 关键字"></a>使用 forward 和 redirect 关键字</h3></li><li>案例说明：<ol><li>通过在 JSP 页面发起请求，控制器类中分别使用 SpringMVC 的关键字进行转发和重定向的方法响应视图页面。</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/19 13:40   * @Description 响应数据和结果视图控制器   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 使用关键字的方式进行转发或重定向（不会使用视图解析器）。       * @return 转发或重定向的目标位置       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testForwardOrRedirect"</span><span class="token punctuation">)</span>      String <span class="token function">testForwardOrRedirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/*1、转发（不会使用视图解析器）          return "forward:/WEB-INF/pages/success.jsp";*/</span>          <span class="token comment" spellcheck="true">// 2、重定向（无法跳转至 WEB-INF 下，且不会使用视图解析器）</span>          <span class="token keyword">return</span> <span class="token string">"redirect:success2.jsp"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <title>index 界面</title>  <a href="/user/testForwardOrRedirect">testForwardOrRedirect</a><br></code></pre><pre class=" language-jsp"><code class="language-jsp">  <title>success 界面</title>  <h3>跳转成功</h3></code></pre><pre class=" language-jsp"><code class="language-jsp">  <title>success2 界面</title>  <h3>跳转成功</h3></code></pre><h2 id="JSON-数据处理"><a href="#JSON-数据处理" class="headerlink" title="JSON 数据处理"></a>JSON 数据处理</h2><h3 id="过滤静态资源"><a href="#过滤静态资源" class="headerlink" title="过滤静态资源"></a>过滤静态资源</h3></li><li>案例说明：<ol><li>由于 dispatcherServlet 会拦截所有的资源，导致在请求静态资源时也会被拦截。为此需要通过 SpringMVC 的配置文件配置对静态资源不进行拦截。</li></ol></li><li>代码演示：<pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!-- 设置不拦截的资源（静态资源），静态资源在 WEB-INF 的 static 文件夹下。 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>  <%@ page contentType="text/html;charset=UTF-8" language="java" %>  <html>  <head>      <title>index 界面</title>      <script src="js/jquery-3.4.1.min.js"></script>      <script>          $(function () {              $("#testAjax").click(function () {                  alert("hello");              });          });      </script>  </head>  <body>  <h3>JSON 数据处理</h3>  <button id="testAjax">发送 AJAX</button>  </body>  </html></code></pre><h3 id="发送-AJAX-请求"><a href="#发送-AJAX-请求" class="headerlink" title="发送 AJAX 请求"></a>发送 AJAX 请求</h3></li><li>案例说明：<ol><li>通过 AJAX 携带 JSON 格式的数据发送 POST 请求给后端。</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/9/19 13:40* @Description 响应数据和结果视图控制器*/</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 模拟异步请求响应。   * @param user 获得封装好的 User 类数据。   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testAjax"</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">testAjax</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> String user<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>  <title>index 界面</title>  <script src="static/js/jquery-3.4.1.min.js"></script>  <script>      $(function () {          $("#testAjax").click(function () {              $.ajax({                  url: "/user/testAjax",                  contentType: "application/json;charset=UTF-8",                  data: '{"username": "你","password": 123,"age": 11}',                  dataType: "json",                  type: "POST",                  success: function (data) {                      //此处 data 是服务器端响应的 json 格式的数据。                  }              });          });      });  </script></head><body><h3>JSON 数据处理</h3><button id="testAjax">发送 AJAX</button></body></html></code></pre><h3 id="响应-JSON-格式数据"><a href="#响应-JSON-格式数据" class="headerlink" title="响应 JSON 格式数据"></a>响应 JSON 格式数据</h3></li><li>案例说明：<ol><li>使用 @RequestBody 将接收到的前端 JSON 格式的数据转换成 User 对象进行操作。SpringMVC 默认使用 MappingJacksonHttpMessageConverter 对 JSON 格式的数据进行转换，其中需要加入三个 jackson 的包。<ol><li>jackson-annotation.jar</li><li>jackson-databind.jar</li><li>jackson-core.jar</li></ol></li><li>使用 @ResponseBody 将 User 对象转换成 JSON 格式的数据响应给前端。</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/19 13:40   * @Description 响应数据和结果视图控制器   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 模拟异步请求响应。       * @param user 获得封装好的 User 类数据。       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testAjax"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@ResponseBody</span>      User <span class="token function">testAjax</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 客户端发送 AJAX 请求传送的是 JSON 格式的数据，后端把 JSON 格式的数据封装到对应的对象中（此处为 User）。</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 将获得的对象修改其中姓名属性并返回。</span>          user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"我"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> user<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>  <%@ page contentType="text/html;charset=UTF-8" language="java" %>  <html>  <head>      <title>index 界面</title>      <script src="static/js/jquery-3.4.1.min.js"></script>      <script>          $(function () {              $("#testAjax").click(function () {                  $.ajax({                      url: "/user/testAjax",                      contentType: "application/json;charset=UTF-8",                      data: '{"username": "你","password": 123,"age": 11}',                      dataType: "json",                      type: "POST",                      success: function (data) {                          //此处 data 是服务器端响应的 json 格式的数据。                          console.log("username:" + data.username);                          console.log("password" + data.password);                          console.log("age" + data.age);                      }                  });              });          });      </script>  </head>  <body>  <h3>JSON 数据处理</h3>  <button id="testAjax">发送 AJAX</button>  </body>  </html></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC（四）：常用注解</title>
      <link href="/posts/54418/"/>
      <url>/posts/54418/</url>
      
        <content type="html"><![CDATA[<h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="RequestParam"></a>RequestParam</h2><ul><li>作用：把请求中指定名称的参数赋值给控制器中的形参。</li><li>属性：<ol><li>value：请求参数中的名称。</li><li>required：请求参数中是否必须提供此参数。（默认 true）</li></ol></li><li>关键代码演示：<pre class=" language-jsp"><code class="language-jsp">  <a href="/annotation/testRequestParam?username=1&pw=2">@requestParam</a></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/18 14:35   * @Description SpringMVC 常用注解测试   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/annotation"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试 @RequestParam       * @param username 账户名       * @param password 密码       * @return 返回到 success 页面       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestParam"</span><span class="token punctuation">)</span>      String <span class="token function">testRequestParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String username<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"pw"</span><span class="token punctuation">)</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 此处前端必须提供 username 和 pw 的值，此处将前端 username 的值传给 username，而 pw 的值传给 password。</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username="</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">";password="</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="RequestBody"></a>RequestBody</h2></li><li>作用：用于获取请求体内容，得到 key = value 格式的数据，不适用于 get 请求。</li><li>属性：<ol><li>required：请求参数中是否必须提供此参数（默认 true）。为 true 时，get 请求方式报错；为 false 时，get 请求得到 null 值。</li></ol></li><li>关键代码演示：<pre class=" language-jsp"><code class="language-jsp">      <form action="/annotation/testRequestBody" method="POST">          <label>              账号：<input type="text" name="username"/>          </label><br>          <label>              密码：<input type="password" name="password"/>          </label><br>          <input type="submit" value="提交"/><br>      </form></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/18 14:35   * @Description SpringMVC 常用注解测试   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/annotation"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试 @RequestBody       * @param requestBody 请求参数体       * @return 返回到 success 页面       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestBody"</span><span class="token punctuation">)</span>      String <span class="token function">testRequestBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> String requestBody<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="PathVariable"></a>PathVariable</h2></li><li>作用：用于绑定 URL 中的占位符，常用于 REST 风格URL。例如：/delete/{id}，其中{id}就是 URL 占位符。</li><li>属性：<ol><li>value：用于指定 URL 中占位符名称。</li><li>required：是否必须提供占位符。</li></ol></li><li>关键代码演示：<pre class=" language-jsp"><code class="language-jsp">  <a href="/annotation/testPathVariable/账号">@PathVariable</a></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/18 14:35   * @Description SpringMVC 常用注解测试   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/annotation"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试 @PathVariable       * @param username REST 风格 URL 参数       * @return 返回到 success 页面       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testPathVariable/{username}"</span><span class="token punctuation">)</span>      String <span class="token function">testPathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li>衍生问题：form 只支持 GET 与 POST 请求，因此可以使用 HiddenHttpMethodFilter 过滤器更改指定的请求。如果 controller 方法上不添加 @ResponseBody 会报 jsp 不支持该方法，这是因为在tomcat8以上版本是不支持 delete 和 post 请求，此时可以通过 @ResponseBody 注解解决问题，但后端无法直接跳转页面。<ul><li>解决方法：<pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!-- 支持更多的表单提交方式，出现 web-app 报错需要升级 xml 的头部信息 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>hiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>hiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <form action="/annotation/testPathVariable/账号" method="POST">      <input type="hidden" name="_method" value="DELETE"/>      <label>          账号：<input type="text" name="username"/>      </label><br>      <input type="submit" value="提交"/><br>  </form></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 测试 @PathVariable。   *   * @param username REST 风格 URL 参数   * @return 返回到 success 页面   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testPathVariable/{username}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span>  <span class="token annotation punctuation">@ResponseBody</span>  String <span class="token function">testPathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除："</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="RequestHeader"></a>RequestHeader</h2></li></ul></li><li>作用：用于获取请求消息头。</li><li>属性：<ol><li>提供消息头名称。</li><li>是否必须有此消息头。</li></ol></li><li>关键代码演示：<pre class=" language-jsp"><code class="language-jsp">  <a href="/annotation/testRequestHeader">@RequestHeader</a></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 测试 @RequestHeader   * @param header 获取某个具体头属性的值。   * @return 返回到 success 页面。   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"testRequestHeader"</span><span class="token punctuation">)</span>  String <span class="token function">testRequestHeader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">)</span> String header<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="CookieValue"></a>CookieValue</h2></li><li>作用：用于把指定 cookie 名称的值传入控制器方法参数。</li><li>属性：<ol><li>value：指定 cookie 的名称。</li><li>required：是否必须有此 cookie。</li></ol></li><li>关键代码演示：<pre class=" language-jsp"><code class="language-jsp">  <a href="/annotation/testCookieValue">@CookieValue</a></code></pre><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">/**   * 测试 @CookieValue   * @param cookieValue 获取某个具体 cookie 的值。   * @return 返回到 success 页面。   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"testCookieValue"</span><span class="token punctuation">)</span>  String <span class="token function">testCookieValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">)</span> String cookieValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookieValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="ModelAttribute"></a>ModelAttribute</h2></li><li>作用：可以作用于参数和方法上。作用于参数上时，获取指定的数据给参数赋值；作用于方法上时，表示当前方法会在控制器的其它方法执行前执行。</li><li>属性：<ol><li>value：用于获取数据的 key。key 可以是 POJO的属性名称，也可以是 map 结构的 key。</li></ol></li><li>应用场景：当表单提交的数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原有的数据。例如用户类拥有账号和密码两个字段，而对数据库用户进行更新时规定账号不能进行修改，只能对密码进行修改，因此一旦进行更新时账号字段就会变为 null，此时就可以使用此注解解决该问题。</li><li>案例说明：提交的 User 类是没有被填充 Date 属性的，在 controller 方法中将 Date 属性进行填充。</li><li>关键代码演示：<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/16 22:03   * @Description 用户实体   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 省略了 get 和 set</span>      <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token keyword">private</span> Date date<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token string">"User{userName="</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", date="</span> <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <form action="/annotation/testModelAttribute" method="POST">      <label>          姓名：<input type="text" name="userName"/>      </label><br>      <label>          年龄：<input type="text" name="age"/>      </label><br>      <input type="submit" value="提交"/><br>  </form></code></pre><ul><li>ModelAttribute 修饰方法带返回值<br>  constUserName() 会先获得一个拥有 Date 属性的 User 类，然后将 testModelAttribute() 获得的 User 类其他属性填充入之前的 User 类。<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 测试 @ModelAttribute   * @param user 获取用户设置好名字和年龄的 User 类属性，并将该 User 类的属性填充入之前 constUserName 的 User 类中，最终获得的是在 constUserName   *             返回的类上填充了名字和年龄的 User 类。   * @return 返回到 success 页面。   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"testModelAttribute"</span><span class="token punctuation">)</span>  String <span class="token function">testModelAttribute</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 提前获取到 User 类，并为 User 类填充 Date 属性。   * @param user 不带 Date 的 User 封装类。   * @return 将设置了 Date 的 User 封装类返回。   */</span>  <span class="token annotation punctuation">@ModelAttribute</span>  User <span class="token function">constUserName</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>      user<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> user<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li>ModelAttribute 修饰方法不带返回值<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**       * 测试 @ModelAttribute       * @param user 从 map 获取 User 类，并将从请求中获得的 User 类属性封装入该 User 类中。       * @return 返回到 success 页面。       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"testModelAttribute"</span><span class="token punctuation">)</span>      String <span class="token function">testModelAttribute</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 提前获取到 User 类，并为 User 类填充 Date 属性，将封装好的 User 装入 map 中。       * @param user 不带 Date 的 User 封装类。       * @param map  用于存储封装好的 User 类。       */</span>      <span class="token annotation punctuation">@ModelAttribute</span>      <span class="token keyword">void</span> <span class="token function">constUserName</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>          user<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><h2 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="SessionAttributes"></a>SessionAttributes</h2></li></ul></li><li>作用：用于多次执行控制器方法间的参数共享，作用于类上。（SessionAttribute 作用于参数前，为形参赋值。）</li><li>属性：<ol><li>value：用于指定存入的属性名称。</li><li>type：用于指定存入的数据类型。</li></ol></li><li>关键代码演示：<pre class=" language-jsp"><code class="language-jsp">  <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>  <%@ page contentType="text/html;charset=UTF-8" language="java" %>  <html>  <head>      <title>index 界面</title>  </head>  <body>  <h3>SpringMVC 常用注解</h3>  <a href="/annotation/testSessionAttributes">@SessionAttribute</a><br>  <a href="/annotation/testGetSessionAttributes">Get @SessionAttribute</a>  <a href="/annotation/testDeleteSessionAttributes">Delete @SessionAttribute</a>  </body>  </html></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/18 14:35   * @Description SpringMVC 常用注解测试。 @SessionAttributes("test") 表示将request 域中的 key 为 test 的值存一份在 session 域中。   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/annotation"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试 @SessionAttribute       * @param model 可以将值存入 request 域，map 格式。       * @return 返回到 success 页面。       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"testSessionAttributes"</span><span class="token punctuation">)</span>      String <span class="token function">testSessionAttributes</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 此处将值存入 request 域。</span>          model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"测试用数据。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 测试获取 session 域中的值。       * @param modelMap 可以从 session 域获取值，map 格式。       * @return 返回到 success 页面。       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"testGetSessionAttributes"</span><span class="token punctuation">)</span>      String <span class="token function">testGetSessionAttributes</span><span class="token punctuation">(</span>ModelMap modelMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>          String test <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> modelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 清空 session 域。       * @param sessionStatus 获得 session 域的状态。       * @return 返回到 success 页面。       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"testDeleteSessionAttributes"</span><span class="token punctuation">)</span>      String <span class="token function">testDeleteSessionAttributes</span><span class="token punctuation">(</span>SessionStatus sessionStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>          sessionStatus<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <%@ page contentType="text/html;charset=UTF-8" language="java" isELIgnored="false" %>  <html>  <head>      <title>success 界面</title>  </head>  <body>  <h3>跳转成功</h3>  <!-- 获得 request 域中的值 -->  request:${requestScope.get("test")}<br>  <!-- 获得 session 域中的值 -->  session:${sessionScope.get("test")}  </body>  </html></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC（三）：请求参数绑定</title>
      <link href="/posts/25820/"/>
      <url>/posts/25820/</url>
      
        <content type="html"><![CDATA[<h2 id="请求参数绑定机制"><a href="#请求参数绑定机制" class="headerlink" title="请求参数绑定机制"></a>请求参数绑定机制</h2><ul><li>请求的数据都是 key = value 格式的。</li><li>SpringMVC 的参数绑定过程是把请求的参数绑定至控制器中方法的参数上。</li><li>提交数据的 key 和参数的名称必须相同。</li><li>支持的数据类型有三种：<ol><li>基本数据类型和字符串类型。</li><li>实体类型。</li><li>集合数据类型。</li></ol></li></ul><h2 id="GET-请求参数绑定"><a href="#GET-请求参数绑定" class="headerlink" title="GET 请求参数绑定"></a>GET 请求参数绑定</h2><ul><li>案例说明：<br>通过 JSP 页面<code>&lt;a&gt;</code>标签向 controller 发起 GET 请求（携带 username 和 password 两参数）。</li><li>代码演示：基本数据类型和字符串类型。<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/9/16 21:11* @Description 参数请求绑定测试 Controller*/</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/param"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamController</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * GET 请求基本类型参数绑定测试   * @return 返回到 success.jpg 页面   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testGetParam"</span><span class="token punctuation">)</span>  String <span class="token function">testGetParam</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行成功。username = "</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">";password = "</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <%@ page contentType="text/html;charset=UTF-8" language="java" %>  <html>  <head>      <title>index 界面</title>  </head>  <body>  <h3>SpringMVC 请求参数绑定</h3>  <a href="/param/testGetParam?username=1&password=2">请求参数绑定测试</a>  </body>  </html></code></pre><h2 id="POST-请求参数绑定"><a href="#POST-请求参数绑定" class="headerlink" title="POST 请求参数绑定"></a>POST 请求参数绑定</h2></li><li>案例说明：<ol><li>Account 实体类中包含 User 实体类。</li><li>JSP 页面通过表单向 controller 发起 POST 请求（携带 Account 实体）。</li><li>使用 POST 提交数据中如果有中文会导致 controller 获得的数据是乱码。此处可以通过在 web.xml 中配置 filter 解决乱码问题(filter 标签必须在 servlet 标签之前）。</li></ol></li><li>代码演示1：实体类型。<pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE web-app PUBLIC      "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"      "http://java.sun.com/dtd/web-app_2_3.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 中文乱码解决过滤器，filter 需要放置在 servlet 前，否则&lt;/web-app>标签会报错。 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 该类存在 servlet-api.jar 中，用于直接配置 servlet 拦截请求（前端控制器） --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 配置 springmvc 启动 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 启动服务器就创建了 servlet 对象。（不配置时，只有请求过来时才会进行创建。） --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/16 22:03   * @Description 用户实体   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 省略了 get 和 set</span>      <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token string">"User{userName="</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/16 21:42   * @Description 账户实体类   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 省略了 get 和 set</span>      <span class="token keyword">private</span> String username<span class="token punctuation">;</span>      <span class="token keyword">private</span> String password<span class="token punctuation">;</span>      <span class="token keyword">private</span> Double money<span class="token punctuation">;</span>      <span class="token keyword">private</span> User user<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token string">"Account{username="</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">", password="</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">", money="</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> user <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/16 21:11   * @Description 参数请求绑定测试 Controller   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/param"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * POST 请求实体参数绑定测试       * @return 返回到 success.jpg 页面       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testPOSTParam"</span><span class="token punctuation">)</span>      String <span class="token function">testPOSTParam</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <%@ page contentType="text/html;charset=UTF-8" language="java" %>  <html>  <head>      <title>index 界面</title>  </head>  <body>  <h3>SpringMVC 请求参数绑定</h3>  <form action="/param/testPOSTParam" method="POST">      <label>          账号：<input type="text" name="username"/>      </label><br>      <label>          密码：<input type="password" name="password"/>      </label><br>      <label>          金额：<input type="text" name="money"/>      </label><br>      <label><!-- 此处 User 类的属性可以用 Account 类中对 User 类定义的名称然后加点的形式绑定。 -->          姓名：<input type="text" name="user.userName"/>      </label><br>      <label>          年龄：<input type="number" name="user.age"/>      </label><br>      <input type="submit" value="提交"/><br>  </form>  </body>  </html></code></pre></li><li>代码演示2：集合类型。（与上区别仅在 Account、ParamController 类和 index.jsp 页面。且在开发中，前端使用这样的方法进行传值会遭成高耦合性，因此都是通过 json 的格式来传递参数。）<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/9/16 21:42* @Description 账户实体类*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String username<span class="token punctuation">;</span>  <span class="token keyword">private</span> String password<span class="token punctuation">;</span>  <span class="token keyword">private</span> Double money<span class="token punctuation">;</span>  <span class="token keyword">private</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> list<span class="token punctuation">;</span>  <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> map<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 省略了 get 和 set</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"Account{username="</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">", password="</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">", money="</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">", list="</span> <span class="token operator">+</span> list <span class="token operator">+</span> <span class="token string">", map="</span> <span class="token operator">+</span> map <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/16 21:11   * @Description 参数请求绑定测试 Controller   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/param"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * POST 请求集合类型参数绑定测试       *       * @return 返回到 success.jpg 页面       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testPostCollectionsParam"</span><span class="token punctuation">)</span>      String <span class="token function">testPostCollectionsParam</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <%@ page contentType="text/html;charset=UTF-8" language="java" %>  <html>  <head>      <title>index 界面</title>  </head>  <body>  <h3>SpringMVC 请求参数绑定</h3>  <form action="/param/testPostCollectionsParam" method="POST">      <label>          账号：<input type="text" name="username"/>      </label><br>      <label>          密码：<input type="password" name="password"/>      </label><br>      <label>          金额：<input type="text" name="money"/>      </label><br>      <label>          姓名（list）：<input type="text" name="list[0].userName"/>      </label><br>      <label>          年龄（list）：<input type="number" name="list[0].age"/>      </label><br>      <label>          姓名（map）：<input type="text" name="map['map1'].userName"/>      </label><br>      <label>          年龄（map）：<input type="number" name="map['map1'].age"/>      </label><br>      <input type="submit" value="提交"/><br>  </form>  </body>  </html></code></pre><h2 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h2></li><li>案例说明：<ol><li>User 实体类包含姓名、年龄和生日日期。</li><li>JSP 页面通过表单向 controller 发起 POST 请求（携带 User 实体）。</li><li>使用 POST 提交数据如果日期的格式不是<code>yyyy/MM/dd</code>会发生格式转换错误，此时新建自定义类型转换器类实现 Converter 并在 spring-mvc.xml 中配置转换器解决该问题。</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/9/18 12:00* @Description 字符串转换日期的自定义类型转换器。（String 表示传入进来的值，Date 是需要将String 转换成的目标类型。）*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToDateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Date<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Date <span class="token function">convert</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 自定义需要转换成的格式。</span>          DateFormat dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 进行转换。</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> dateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"数据类型转换出现异常。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"请您传入数据。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/16 21:11   * @Description 参数请求绑定测试 Controller   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/param"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * POST 请求自定义类型转换器测试       *       * @return 返回到 success.jpg 页面       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/customTypeConverter"</span><span class="token punctuation">)</span>      String <span class="token function">customTypeConverter</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                             http://www.springframework.org/schema/beans/spring-beans.xsd                             http://www.springframework.org/schema/context                             https://www.springframework.org/schema/context/spring-context.xsd                             http://www.springframework.org/schema/mvc                             https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 包扫描 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.springmvc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 视图解析器对象 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span>            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 配置自定义类型转换器（需要在 SpringMVC 框架注解支持上填入配置的 ConversionServiceFactoryBean 的 id。 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conversionServiceFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.context.support.ConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>converters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.utils.StringToDateConverter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 开启 SpringMVC 框架注解的支持 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-jsp"><code class="language-jsp">  <%@ page contentType="text/html;charset=UTF-8" language="java" %>  <html>  <head>      <title>index 界面</title>  </head>  <body>  <h3>SpringMVC 请求参数绑定</h3>  <form action="/param/customTypeConverter" method="POST">      <label>          姓名：<input type="text" name="userName"/>      </label><br>      <label>          年龄：<input type="number" name="age"/>      </label><br>      <label>          生日：<input type="text" name="date"/>      </label><br>      <input type="submit" value="提交"/><br>  </form>  </body>  </html></code></pre><h2 id="Servlet-原生-API"><a href="#Servlet-原生-API" class="headerlink" title="Servlet 原生 API"></a>Servlet 原生 API</h2></li><li>案例说明：<br>在 controller 中使用 servlet 的原生 API。</li><li>关键代码演示：<pre class=" language-jsp"><code class="language-jsp"><a href="/param/testServlet">Servlet 原生 API 测试</a></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/16 21:11   * @Description 参数请求绑定测试 Controller   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/param"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试 servlet 原生 API       * @param request  servlet 请求       * @param response servlet 响应       * @return 返回到 success 页面       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testServlet"</span><span class="token punctuation">)</span>      String <span class="token function">testServlet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>          HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC（二）：环境搭建</title>
      <link href="/posts/39549/"/>
      <url>/posts/39549/</url>
      
        <content type="html"><![CDATA[<h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><p><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/codeWorkflow.jpg"></p><ol><li>启动服务器时加载一些配置文件。<ul><li>DispatcherServlet 对象创建。</li><li>SpringMVC 配置文件加载。</li><li>HelloController 对象创建。</li></ul></li><li>发送请求，通过 HelloController 处理请求并跳转至 success.jsp 页面。</li></ol><h2 id="使用到的-Jar-包"><a href="#使用到的-Jar-包" class="headerlink" title="使用到的 Jar 包"></a>使用到的 Jar 包</h2><ul><li>spring-context.jar</li><li>spring-web.jar（Spring Web 整合）</li><li>spring-webmvc.jar（SpringMVC 核心）</li><li>servlet-api.jar(用于提供 DispatcherServlet 类)</li><li>jsp-api.jar（servlet-api 的依赖）</li></ul><h2 id="注解作用"><a href="#注解作用" class="headerlink" title="注解作用"></a>注解作用</h2><p><code>@RequestMapping(path\value = "", method = {RequestMethod.POST}, params = {""}, headers = {"""})</code>：用于建立请求 URL 和处理请求方法之间的对应关系。</p><ol><li>可作用于方法和类上。作用于类上便相当于请求 URL 的第一级访问目录，需要以<code>/</code>开头；而作用于方法就相当于请求 URL 的第二级访问目录。</li><li>path 和 value 作用是相同的，都是请求路径的映射（如果只有 value 单个属性则可省略）。</li><li>method：用于指定请求的方法（GET、POST、HEAD、OPTIONS、PUT、PATCH、DELETE、TRACE）。</li><li>params：用于指定限制请求参数的条件。要求请求的参数的 key 和 value 必须和配置的一模一样。</li><li>headers：用于指定限制请求消息头的条件，即发送的请求中必须包含的请求头。</li></ol><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context                           https://www.springframework.org/schema/context/spring-context.xsd                           http://www.springframework.org/schema/mvc                           https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 包扫描 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.springmvc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 视图解析器对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启 SpringMVC 框架注解的支持 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/13 13:36 * @Description a 标签跳转 controller 类 */</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 输出测跳转     * @return 返回到 success.jpg 页面     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span>    String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello SpringMVC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE web-app PUBLIC        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"        "http://java.sun.com/dtd/web-app_2_3.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 该类存在 servlet-api.jar 中，用于直接配置 servlet 拦截请求（前端控制器） --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置 springmvc 启动 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 启动服务器就创建了 servlet 对象。（不配置时，只有请求过来时才会进行创建。） --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>index 界面</title></head><body><h3>SpringMVC 测试</h3><a href="/hello">跳转小程序</a></body></html></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>success 界面</title></head><body>    <h3>跳转成功</h3></body></html></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven：No Archetype Found</title>
      <link href="/posts/6576/"/>
      <url>/posts/6576/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在创建 maven 项目时，选择 org.apache.maven.archetypes:maven-archetype-webapp 的 archetype 时，出现项目初始化失败的情况。报错情况如下：<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/maven_archetype_warning.png"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在创建项目时，配置 archetypeCatalog 的属性为 internal 即可解决问题。<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/maven_archetype_resolve.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>给 maven 配置了阿里源导致了如上问题，可能是阿里源的 archetype-catalog.xml 文件出现了问题。其中 archetype-catalog.xml 能提供 Archetype 的信息，常用的属性有 internal、local 和 remote 三个属性。</p><ul><li>internal：maven-archetype-plugin 内置的 Archetype Catalog。</li><li>local：指向本地的 Archetype Catalog ，其位置为~/.m2/archetype-catalog.xml。需要注意的是，该文件默认是不存在的。</li><li>remote：指向了Maven中央仓库的Archetype Catalog。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> problem </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC（一）：简介</title>
      <link href="/posts/18696/"/>
      <url>/posts/18696/</url>
      
        <content type="html"><![CDATA[<h2 id="服务器三层架构"><a href="#服务器三层架构" class="headerlink" title="服务器三层架构"></a>服务器三层架构</h2><p>JavaEE 常基于 B/S 架构进行开发，而在 B/S 架构中系统标准的三层架构包括：表现层、业务层和持久层。</p><ul><li>表现层（web 层）<br>表现层用于接收客户端请求，并向客户端响应结果。它包括展示层和控制层，其中展示层负责展示结果，而控制层负责接收请求。因此表现层依赖于业务层，当接收到客户端的请求时一般会调用业务层进行处理，并将处理结果返回给客户端。</li><li>业务层（service 层）<br>业务层负责业务逻辑的处理，当需要对数据进行持久化操作时需要保证事务的一致性，因此业务层可能依赖于持久层，且事务应该在业务层进行控制。</li><li>持久层（dao 层）<br>持久层负责数据持久化操作，包括数据层即数据库和数据访问层，其中数据库是对数据进行持久化的载体，而数据访问层是业务层和持久层交互的接口。业务层需要通过数据访问层将数据持久化到数据库中。</li></ul><p><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/3-tierArchitecture.jpg"></p><h2 id="MVC-设计模型"><a href="#MVC-设计模型" class="headerlink" title="MVC 设计模型"></a>MVC 设计模型</h2><p>MVC（Model View Controller）是一种用于设计创建 Web 应用程序表现层的模式，它包括 Model、View 和 Controller 三部分：</p><ul><li>Model（模型）：常指数据模型，一般用于封装数据。例如 JavaBean。</li><li>View（视图）：常指前端视图，一般用于显示数据。例如 Html。</li><li>Controller（控制器）：是应用程序中处理用户交互的部分，一般用于处理程序逻辑。例如 Servlet。</li></ul><p><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/MVC.jpg"></p><h2 id="SpringMVC-架构"><a href="#SpringMVC-架构" class="headerlink" title="SpringMVC 架构"></a>SpringMVC 架构</h2><ul><li>SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架。它通过一套注解让一个简单的 Java 类成为处理请求的控制器，而无需实现任何接口。同时它还支持 RESTful 编程风格的请求。</li><li>SpringMVC 拥有诸多优势，例如：<ol><li>是基于模块化开发的架构，拥有清晰的角色划分。</li><li>可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。</li><li>可定制，通过 HandlerMapping、ViewResolver 等能够非常简单的进行定制。</li><li>功能强大的数据验证、格式化、绑定机制。</li><li>利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。</li></ol></li></ul><p><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/springMVC.jpg"></p><h2 id="SpringMVC-工作流程"><a href="#SpringMVC-工作流程" class="headerlink" title="SpringMVC 工作流程"></a>SpringMVC 工作流程</h2><ul><li>概念<br>DispatcherServlet：Spring 前端控制器（中央调度器），它是整个请求响应的控制中心，组件的调用由它统一调度。<br>HandlerMapping：处理器映射器，它根据用户访问的 URL 映射到对应的后端处理器 Handler。<br>HandlerAdapter：处理器适配器，它调用 Handler 执行具体的业务操作并返回逻辑视图 ModelAndView 对象。<br>Handler：Handler，对用户具体请求进行处理（相当于 controller 类）。<br>ModelAndView 对象：逻辑视图。<br>ViewResolver：视图解析器，将 ModelAndView 逻辑视图解析为具体的视图。</li><li>工作流程<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/SpringMVCWorkflow.jpg"><br>如图工作流程可以大致划分为如下步骤：<ol><li>用户向服务器发送请求，请求被 DispatcherServlet 捕获。</li><li>DispatcherServlet 对请求的 URL 进行解析，得到 URI。然后根据 URI 调用 HandlerMapping 获得具体的处理器 Handler 并返回给 DispatcherServlet。</li><li>DispatcherServlet 根据获取的 Handler，选择一个合适的 HandlerAdapter。</li><li>提取 Request 中的模型数据作为 Handler 的参数并执行。（此处可做 HttpMessageConverter，数据转换、数据格式化和数据验证等操作。）</li><li>Handler 执行完成后，HandlerAdapter向 DispatcherServlet 返回一个 ModelAndView 对象，其中 view 是视图名称，并不是真正的视图对象。</li><li>根据返回的 ModelAndView 对象选择一个合适的 ViewResolver 返回给 DispatcherServlet（必须是已经注册到Spring容器中的 ViewResolver）。</li><li>DispatcherServlet 将 ModelAndView 对象传给 ViewResolver。</li><li>ViewResolver 解析后返回具体的 View（例如 html、JSP 等）。</li><li>DispatcherServlet 对 View 进行渲染视图，即将数据模型填充到视图中。</li><li>DispatcherServlet 对用户进行响应。</li></ol></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring（七）：Transaction</title>
      <link href="/posts/37736/"/>
      <url>/posts/37736/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是事务（Transaction）"><a href="#什么是事务（Transaction）" class="headerlink" title="什么是事务（Transaction）"></a>什么是事务（Transaction）</h2><p>事务是逻辑上的一组操作，要么都执行，要么都不执行。例如某人要在商店使用电子货币购买100元的东西，当中至少包括两个操作：1.该人账户减少100元；2.商店账户增加100元。这两操作需要同时进行，否则就会出现100元平白消失或出现的情况。因此可以得知事务具有 ACID 的性质。</p><ol><li>原子性（Atomicity）：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li><li>一致性（Consistency）：执行事务前后，数据保持一致；</li><li>隔离性（Isolation）：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li><li>持久性（Durability）：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li></ol><h2 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h2><ul><li><p>事务隔离级别即定义一个事务可能受其他并发时间事务影响的程度。例如多个用户对统一数据操作会导致如下问题的发生：</p><ol><li>脏读（Dirty read）：当一个事务读取到另一个事务正在进行修改却还没有提交到数据库中的数据便称为脏读，而读取到的数据被称为脏数据，依据脏数据所作的操作可能是不对的。</li><li>丢失修改（Lost to modify）：两个事务同时读取修改同一数据，后提交事务的修改结果破坏了先提交事务的修改结果，导致先提交事务的修改被丢失。</li><li>不可重复读（Unrepeatable read）：指在一个事务内多次读同一数据。当事务 A 读取了数据还未进行提交操作时，而事务 B 也读取了该数据并对其数据进行了修改、提交。此时事务 A 再次读取数据时会发现第一次读取的数据可能与第二次读取的数据是不一样的。即同一个事务内两次读取同一数据其结果却不一样，这样的情况称为不可重复度。常发生于 update 操作之上。</li><li>幻读（Phantom read）：幻读与不可重复读相似，其区别在于幻读发生于 insert 操作之上。即事务 A 读取了数据还未进行提交操作时，事务 B 也读取了该数据并对其数据进行了插入、提交操作。导致事务 A 再次读取该数据时发现多出了一些不存在的记录，因此称为幻读。</li></ol></li><li><p>事务隔离级别的出现就是为了解决如上四个问题的发生，常用事务隔离级别作用如下：</p><ol><li>读未提交（Read uncommitted）：一个事务可以读取另一个未提交事务的数据。没有解决上述任何问题。</li><li>读已提交（Read committed）：一个事务要等另一个事务提交后才能读取数据。解决了脏读的问题。</li><li>可重复读（Repeatable read）：在事务开始读取数据时不再允许修改操作。解决了丢失修改、不可重复读和脏读的问题。</li><li>序列化（Serializable）：序列化是最高的事务隔离级别，在该级别下事务串行化顺序执行。解决了上述所有问题。</li></ol></li></ul><h2 id="Spring-事务管理接口"><a href="#Spring-事务管理接口" class="headerlink" title="Spring 事务管理接口"></a>Spring 事务管理接口</h2><ul><li>PlatformTransactionManager（平台事务管理器）：Spring 必须使用事务管理器才能管理事务。<ul><li>常用的事务管理器<br>DataSourceTransactionManager：Jdbc 或 Mybatis 开发使用，采用 JdbcTemplate 或 整合 Mybatis。<br>HibernateTransactionManager：Hibernate 开发使用，整合 Hibernate。</li></ul></li><li>TransactionDefinition（事务属性）：Spring 用于确定事务具体详情。例如事务隔离级别、传播行为、超时、只读、回滚规则等。当进行事务配置时必须配置详情，Spring 会将配置项封装到该对象实例。<ul><li>传播行为<br>事务的传播行为规定了事务方法和事务方法发生嵌套调用时事务是如何进行传播，Spring 为其定义了七种类型的事务传播行为：<ol><li>PROPAGATION_REQUIRES（传播行为默认值）：如果当前有事务则加入该事务（即支持当前事务）;如果当前没事务则新建一个事务。</li><li>PROPAGATION_SUPPORTS：支持当前事务，如果当前没事务则以非事务方式执行。</li><li>PROPAGATION_MANDATORY：支持当前事务，如果当前没事务则抛出异常。</li><li>PROPAGATION_REQUIRES_NEW：无论有无事务都新建一个事务且如果当前有事务则挂起该事务（即不支持当前事务）。</li><li>PROPAGATION_NOT_SUPPORTED：无论有无事务都以非事务方式执行且不支持当前事务。</li><li>PROPAGATION_NEVER：如果当前有事务则抛出异常；如果当前没事务则以非事务方式执行。</li><li>PROPAGATION_NESTED：如果当前有事务则在该事务内嵌套一个事务执行；如果当前没事务则新建一个事务。</li></ol></li></ul></li><li>TransactionStatus（事务运行状态）：Spring 用于记录当前事务运行状态。例如事务是否有保存点、是否回滚、是否完成等。Spring 底层会根据状态进行相应的操作。</li></ul><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><ul><li>通过事务模板 TransactionTemplate 进行操作（手动管理事务）。<ol><li>Spring 配置 TransactionTemplate，并注入给 Service。</li><li>配置事务管理器（注入 TransactionTemplate，即注入 DataSource）。</li></ol></li><li>工厂 bean 生成代理（半自动）。<br>Spring 提供管理事务的代理工厂 bean：TransactionProxyFactoryBean。<ol><li>获取代理对象。</li><li>Spring 配置代理。</li></ol></li><li>AOP 配置基于 xml<br>在 Spring XML 中配置 AOP 自动生成代理，并进行事务的管理。<ol><li>配置事务管理器。</li><li>配置事务属性。</li><li>配置 AOP。</li></ol></li><li>AOP 配置基于注解<ol><li>配置事务管理器并交予 Spring。</li><li>在目标类或目标方法添加注解（@Transactional）。</li></ol></li></ul><h2 id="使用到的部分-Jar-包"><a href="#使用到的部分-Jar-包" class="headerlink" title="使用到的部分 Jar 包"></a>使用到的部分 Jar 包</h2><ul><li>spring-tx.jar</li><li>spring-jdbc.jar</li><li>spring-orm.jar：Spring 提供对部分 ORM（对象关系映射将关系数据库中表的数据映射成为对象）框架的支持。</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/7 15:26 * @Description 账户持久层接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 支出     * @param outer 支出者     * @param money 支出金额     */</span>    <span class="token keyword">void</span> <span class="token function">expense</span><span class="token punctuation">(</span>String outer<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 收入     * @param inner 收入者     * @param money 收入金额     */</span>    <span class="token keyword">void</span> <span class="token function">income</span><span class="token punctuation">(</span>String inner<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/7 15:22 * @Description 账户持久层实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDaoImpl</span> <span class="token keyword">extends</span> <span class="token class-name">JdbcDaoSupport</span> <span class="token keyword">implements</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">expense</span><span class="token punctuation">(</span>String outer<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"UPDATE account SET money = money - ? WHERE username = ?"</span><span class="token punctuation">,</span> money<span class="token punctuation">,</span> outer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">income</span><span class="token punctuation">(</span>String inner<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"UPDATE account SET money = money + ? WHERE username = ?"</span><span class="token punctuation">,</span> money<span class="token punctuation">,</span> inner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driverClass</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">jdbc.jdbcUrl</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/所使用的库名</span><span class="token attr-name">jdbc.user</span><span class="token punctuation">=</span><span class="token attr-value">账号</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">密码</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context                           https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- jdbc properties --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- c3p0 datasource --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.jdbcUrl}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- dao --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account.dao.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- service --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account.service.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 创建 TransactionTemplate --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.transaction.support.TransactionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器，管理器管理事务，事务存在于 service、dao 等中，它们都可以从 Connection 中获得，而连接从连接池获得，所以需要配置的是连接池。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/7 15:34 * @Description Account Service */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 转账     * @param outer 支出者     * @param inner 收入者     * @param money 金额     */</span>    <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String outer<span class="token punctuation">,</span> String inner<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="手动管理事务"><a href="#手动管理事务" class="headerlink" title="手动管理事务"></a>手动管理事务</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/7 15:36 * @Description AccountService实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AccountDao accountDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccountDao</span><span class="token punctuation">(</span>AccountDao accountDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountDao <span class="token operator">=</span> accountDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> TransactionTemplate transactionTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTransactionTemplate</span><span class="token punctuation">(</span>TransactionTemplate transactionTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>transactionTemplate <span class="token operator">=</span> transactionTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String outer<span class="token punctuation">,</span> String inner<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallbackWithoutResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doInTransactionWithoutResult</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>                accountDao<span class="token punctuation">.</span><span class="token function">expense</span><span class="token punctuation">(</span>outer<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>                accountDao<span class="token punctuation">.</span><span class="token function">income</span><span class="token punctuation">(</span>inner<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 09/07/2019 * @Description AccountServiceImpl test */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImplTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Method: transfer(String outer, String inner, Integer money)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String xml <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>        AccountService accountService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">,</span> AccountService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="半自动"><a href="#半自动" class="headerlink" title="半自动"></a>半自动</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context                           https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- jdbc properties --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- c3p0 datasource --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.jdbcUrl}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- dao --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account.dao.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- service --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account.service.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        service proxy：            proxyInterfaces：目标类接口            target：目标类            transactionManager：事务管理器            transactionAttributes：配置 transactionDefinition                key：确定哪些方法使用当前事务配置。（一般方法名）                value：用于配置事务属性。即 transactionDefinition                    格式：PROPAGATION, ISOLATION, readOnly, -Exception, +Exception（其中-Exception为发生这些异常就回滚，+Exception为发生这些异常仍然提交。）     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>proxyAccountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.transaction.interceptor.TransactionProxyFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>proxyInterfaces<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account.service.AccountService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionAttributes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transfer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PROPAGATION_REQUIRED, ISOLATION_DEFAULT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- dataSourceTransactionManager --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 09/07/2019 * @Description AccountServiceImpl test */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImplTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Method: transfer(String outer, String inner, Integer money)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String xml <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>        AccountService accountService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"proxyAccountService"</span><span class="token punctuation">,</span> AccountService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="AOP-配置基于-xml"><a href="#AOP-配置基于-xml" class="headerlink" title="AOP 配置基于 xml"></a>AOP 配置基于 xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context                           https://www.springframework.org/schema/context/spring-context.xsd                           http://www.springframework.org/schema/aop                           https://www.springframework.org/schema/aop/spring-aop.xsd                           http://www.springframework.org/schema/tx                           https://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- jdbc properties --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- c3p0 datasource --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.jdbcUrl}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- dao --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account.dao.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- service --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account.service.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- dataSourceTransactionManager --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 事务通知（事务属性）：&lt;tx:method name="transfer" propagation="REQUIRES_NEW" isolation="DEFAULT"/> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transfer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- AOP --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span>                     <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.kuukokawaii.transaction.account.service.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 09/07/2019 * @Description AccountServiceImpl test */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImplTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Method: transfer(String outer, String inner, Integer money)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String xml <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>        AccountService accountService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">,</span> AccountService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="AOP-配置基于注解"><a href="#AOP-配置基于注解" class="headerlink" title="AOP 配置基于注解"></a>AOP 配置基于注解</h3><p>此处Service层添加了@Service注解。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context                           https://www.springframework.org/schema/context/spring-context.xsd                           http://www.springframework.org/schema/tx                           https://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 包扫描 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- jdbc properties --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- c3p0 datasource --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.jdbcUrl}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- jdbcTemplate --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- dataSourceTransactionManager --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        事务注解开启：            transaction-manager：将事务管理器交予 Spring。            proxy-target-class：                true：底层强制使用 CGLIB 代理。                false：自动选择。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/7 15:22 * @Description 账户持久层实现类 */</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">AccountDaoImpl</span><span class="token punctuation">(</span>JdbcTemplate jdbcTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcTemplate <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">expense</span><span class="token punctuation">(</span>String outer<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"UPDATE account SET money = money - ? WHERE username = ?"</span><span class="token punctuation">,</span> money<span class="token punctuation">,</span> outer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">income</span><span class="token punctuation">(</span>String inner<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"UPDATE account SET money = money + ? WHERE username = ?"</span><span class="token punctuation">,</span> money<span class="token punctuation">,</span> inner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 09/07/2019 * @Description AccountServiceImpl test */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImplTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AccountService accountService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Method: transfer(String outer, String inner, Integer money)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        accountService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring（六）：JDBCTemplate</title>
      <link href="/posts/63918/"/>
      <url>/posts/63918/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-JDBCTemplate"><a href="#什么是-JDBCTemplate" class="headerlink" title="什么是 JDBCTemplate"></a>什么是 JDBCTemplate</h2><p>Spring 为传统的 JDBC 进行封装,简化持久层操作。通过使用 Spring 的注入功能，可以把 DataSource 注册到 JDBCTemplate 之中。</p><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><ol><li>通过 API 对 dbcp 进行操作。</li><li>通过 Spring 配置使用 DBCP。</li><li>使用 C3P0 连接池。</li><li>通过 JdbcDaoSupport 直接获取 JdbcTemplate，并用 properties 文件存储连接池属性。</li></ol><h2 id="使用到的部分-Jar-包"><a href="#使用到的部分-Jar-包" class="headerlink" title="使用到的部分 Jar 包"></a>使用到的部分 Jar 包</h2><ul><li>spring-tx.jar：负责在 Spring 框架中实现事务管理功能。</li><li>c3p0.jar：开源的 JDBC 连接池。</li><li>commons-dbcp.jar： 用于管理数据库连接池。依赖于 commons-pool。</li><li>commons-pool.jar： 数据库连接池。</li><li>mysql-connector-java.jar：Java 通过 JDBC 访问 mysql 数据库时使用。</li><li>commons-collections.jar：提供更多的接口。</li><li>spring-jdbc.jar：Spring 对 JDBC 数据访问进行封装的包。</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="直接使用-DBCP-方式"><a href="#直接使用-DBCP-方式" class="headerlink" title="直接使用 DBCP 方式"></a>直接使用 DBCP 方式</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/4 18:33 * @Description 用户类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用户 id     */</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用户姓名     */</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用户密码     */</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 09/04/2019 * @Description jdbc test */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建数据源（连接池）：此处使用 dbcp</span>        BasicDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/所使用的库名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"账号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建模板</span>        JdbcTemplate jdbcTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过 api 操作</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO t_user(username, password) VALUES(?, ?);"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"998"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="通过-Spring-配置使用-DBCP"><a href="#通过-Spring-配置使用-DBCP" class="headerlink" title="通过 Spring 配置使用 DBCP"></a>通过 Spring 配置使用 DBCP</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/4 19:15 * @Description 用户持久层类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * jdbc 模板由 spring 注入。     */</span>    <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJdbcTemplate</span><span class="token punctuation">(</span>JdbcTemplate jdbcTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcTemplate <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"UPDATE t_user SET username = ?, password = ? WHERE id = ?"</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token punctuation">{</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 创建数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/所使用的库名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>账号<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 创建模板，需要注入数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置 dao --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.jdbctemplate.user.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 09/04/2019 * @Description jdbc test */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String xml <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>        UserDao userDao <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">,</span> UserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"isolation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"998"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><p>仅 xml 数据池配置方式不同。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 创建数据源 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/所使用的库名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>账号<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="JdbcDaoSupport"><a href="#JdbcDaoSupport" class="headerlink" title="JdbcDaoSupport"></a>JdbcDaoSupport</h3><p>如上述所示，那么每一个 dao 中都需要进行<code>setJdbcTemplate</code>的操作，造成代码的重复。而通过使用 JdbcDaoSupport，可以通过 JdbcDaoSupport 直接获取 JdbcTemplate 并对其进行应用。此处通过 properties 配置 jdbc 属性。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/4 19:15 * @Description 用户持久层类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token keyword">extends</span> <span class="token class-name">JdbcDaoSupport</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"UPDATE t_user SET username = ?, password = ? WHERE id = ?"</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token punctuation">{</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driverClass</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">jdbc.jdbcUrl</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/所使用的库名</span><span class="token attr-name">jdbc.user</span><span class="token punctuation">=</span><span class="token attr-value">账号</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">密码</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context                           https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 加载配置文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 创建数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.jdbcUrl}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置 dao，JdbcDaoSupport 通过给定的数据源自动创建模板。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.jdbctemplate.user.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring（五）：AOP</title>
      <link href="/posts/43723/"/>
      <url>/posts/43723/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-AOP"><a href="#什么是-AOP" class="headerlink" title="什么是 AOP"></a>什么是 AOP</h2><p>AOP 是 OOP（Object Oriented Programming，缩写为OOP）的延续，利用 AOP 可以对业务逻辑的各个部件进行隔离，从而使得业务逻辑之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>假设有一需求如下：为 A 类中的所有方法开启事务且不修改 A 类的代码。为此需要再编写一个 B 类继承 A 类并且 B 类的所有方法都要调用 A 类的方法，且在调用方法的上下对事务进行开启和提交，这样做会发现一直在重复的编写开启提交事务的代码。而 AOP 采取横向抽取机制，取代了传统的纵向继承体系重复性代码，也就是说可以提取上述代码中的重复部分达到重复利用的效果。<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/AOP.jpg"></p><h2 id="手动代理"><a href="#手动代理" class="headerlink" title="手动代理"></a>手动代理</h2><h3 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h3><p>JDK 动态代理即对装饰器设计模式的简化。</p><ul><li>案例说明：<ol><li>目标类：需要被代理的类，JDK 代理需要采用接口 + 实现类的方法完成，接口是必须的。</li><li>切面类：用于存放通知 MyAspect。</li><li>工厂类：用于生成代理。</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/9/2 15:44* @Description UserService 接口类。*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 增加用户   */</span>  <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 更新用户   */</span>  <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 删除用户   */</span>  <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/2 15:46  * @Description UserService 实现类。  */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/2 15:47  * @Description 切面类。  */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 代理目标方法前运行。       */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法运行前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 代理目标方法后运行。       */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法运行后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/2 15:49   * @Description 工厂类，用于生成代理类。   */</span>  <span class="token keyword">class</span> <span class="token class-name">MyBeanFactory</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 生成代理过的 UserService 对象。       *       * @return 返回代理生成的 UserService 对象。       */</span>      <span class="token keyword">static</span> UserService <span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 目标类</span>          UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 切面类</span>          MyAspect myAspect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*           * 代理类 = 目标类 + 切面类           * newProxyInstance参数：           *      1.loader：类加载器，动态代理类运行时创建，任何类都需要类加载器将其加载到内存。一般情况使用→当前类.class.getClassLoader()。           *      2.Class[] interfaces：代理类需要实现的所有接口。           *          方式1：目标类实例.getClass().getInterfaces。该方法只能获得自己的接口，无法获得父元素的接口。           *          方式2：new Class[]{UserService.class}。该方法可以获得自己和父元素的接口。           *      3.InvocationHandler：处理类，是一个接口，必须进行实现，一般采用匿名内部类（推荐使用 lambda)。其中代理类的每一个方法执行时，都将调用一次 invoke。           *          invoke参数:1.proxy： 代理对象。           *                     2.method： 代理对象当前执行的方法的描述对象（反射）。           *                          执行方法名：method.getName()；           *                          执行方法：method.invoke(对象，实际参数）；           *                     3.Object[] args： 方法实际参数。           */</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>MyBeanFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              userService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 前执行</span>                  myAspect<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 执行目标类的方法</span>                  Object obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>userService<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 后执行</span>                  myAspect<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 09/02/2019   * @Description UserServiceImpl test   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImplTest</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Test</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          UserService userService <span class="token operator">=</span> MyBeanFactory<span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userService<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userService<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li>输出结果如下：<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/JdkResult.png"></li></ul><h3 id="CGLIB-字节码增强"><a href="#CGLIB-字节码增强" class="headerlink" title="CGLIB 字节码增强"></a>CGLIB 字节码增强</h3><p>CGLIB 代理主要通过对字节码进行操作以控制对象的访问。CGLIB 在运行时创建目标类的子类，从而对目标类进行增强，因此无需接口便可以实现代理。</p><ul><li>案例说明：<ol><li>目标类：需要被代理的类，而 JDK 代理需要采用接口 + 实现类的方法完成，接口是必须的。</li><li>切面类：用于存放通知 MyAspect。</li><li>工厂类：用于生成代理。</li></ol></li><li>使用到的 Jar 包： cglib.jar 或 spring-core.jar（Spring 核心包中整合了 cglib）。</li><li>代码演示：<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/9/2 15:46* @Description UserService 类。*/</span><span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/2 15:49   * @Description 工厂类，用于生成代理类。   */</span>  <span class="token keyword">class</span> <span class="token class-name">MyBeanFactory</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 生成代理后的 UserService 对象。       *       * @return 返回代理生成的 UserService 对象。       */</span>      <span class="token keyword">static</span> UserService <span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 目标类</span>          UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 切面类</span>          MyAspect myAspect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*           * 代理类 = 目标类 + 切面类           * 1.创建核心类 Enhancer。           * 2.设置 Enhancer 需要代理的目标类。           * 3.设置 Enhancer 的回调函数。MethodInterceptor等效 InvocationHandler。           *      o:代理对象。           *      method:代理对象当前执行的方法的描述对象（反射）。           *      objects:方法实际参数。           *      methodProxy:方法的代理。           * 4.创建代理。           */</span>          Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>MethodInterceptor<span class="token punctuation">)</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> method<span class="token punctuation">,</span> objects<span class="token punctuation">,</span> methodProxy<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 前执行</span>              myAspect<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 执行目标类的方法。该句等效于 methodProxy.invokeSuper(o, objects)。执行代理类的父类，执行目标类（目标类和代理类父子关系）。</span>              Object obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>userService<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 后执行</span>              myAspect<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> obj<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h2 id="Spring-AOP-代理"><a href="#Spring-AOP-代理" class="headerlink" title="Spring AOP 代理"></a>Spring AOP 代理</h2>Spring AOP 使用纯 Java 实现，不需要专门的编译过程和类加载器，在运行期间通过代理方式向目标类植入增强代码。<h3 id="半自动"><a href="#半自动" class="headerlink" title="半自动"></a>半自动</h3>需要手动再 Spring 配置文件中配置代理。</li><li>案例说明：<ol><li>目标类：需要被代理的类，JDK 代理需要采用接口 + 实现类的方法完成，接口是必须的。（此处代码与JDK 动态代理代码同）</li><li>切面类：用于存放通知 MyAspect。</li><li>工厂类：工厂类由 Spring 容器管理（配置文件配置）。</li></ol></li><li>使用到的部分 Jar 包： <ol><li>spring-aop.jar（AOP 的实现）</li><li>aopalliance.jar（AOP 联盟的规范）</li></ol></li><li>代码演示：<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/9/2 15:47* @Description 切面类。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 代理目标方法前运行</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法运行前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 手动执行目标方法</span>      Object obj <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 代理目标方法后运行。</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法运行后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                             https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 目标类 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 切面类 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop.MyAspect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!--          代理类：使用工厂 bean，底层调用 getObject()，返回特殊 bean。          ProxyFactoryBean：用于创建代理工厂 bean，生成特殊代理对象。              interfaces：确定接口类。                  通过&lt;array>可以设置多个值，单值可以仅使用&lt;value>。              target：确定目标类。              interceptorNames：通知切面类的名称，类型 String[]。              optimize：boolean true 意思为强制使用 cglib（无论有无接口）。（如果有接口默认使用 jdk 动态代理，没有则使用 cglib 字节码增强）       --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>proxyUserService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.aop.framework.ProxyFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>interfaces<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop.UserService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>interceptorNames<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 09/02/2019   * @Description UserServiceImpl test   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImplTest</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * Method: addUser()       */</span>      <span class="token annotation punctuation">@Test</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          String xml <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>          ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取代理类</span>          UserService userService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"proxyUserService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userService<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userService<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="全自动"><a href="#全自动" class="headerlink" title="全自动"></a>全自动</h3>在配置文件中标识所使用到的类，Spring 自动配置代理。</li><li>案例说明：<ol><li>目标类：需要被代理的类，JDK 代理需要采用接口 + 实现类的方法完成，接口是必须的。（此处代码与半自动代码同）</li><li>切面类：用于存放通知 MyAspect。（此处代码与半自动代码同）</li><li>工厂类：工厂类又 Spring 容器管理（配置文件配置）。</li></ol></li><li>使用到的部分 Jar 包： <ol><li>spring-aop.jar（AOP 的实现）</li><li>aopalliance.jar（AOP 联盟的规范）</li><li>aspectjweaver.jar（Spring 切入点表达式的实现）</li></ol></li><li>代码演示：<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                         https://www.springframework.org/schema/beans/spring-beans.xsd                         http://www.springframework.org/schema/aop                         https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 目标类 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 切面类 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop.MyAspect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!--      AOP编程：          1.导入命名空间。          2.使用&lt;aop:config>进行配置。proxy-target-class="true"，true：cglib；false：jdk动态代理              &lt;aop:pointcut>：切入点，从目标对象获得具体方法。                  切入点表达式：execution(* com.kuukokawaii.aop.*.*(..))：修饰符(可省略) 返回值 包(可省略).类(可省略).方法(参数) throws(可省略)；expression="execution()||execution()" 可匹配多个。                  within：匹配包或子包中的方法。                  this：匹配实现接口的代理对象中的方法。                  target：匹配实现接口的目标对象中的方法。                  args：匹配参数格式符合标准的方法。                  bean：匹配指定 bean 中的方法。              &lt;aop:advisor>：特殊切面，包含一个通知和切入点。                  advice-ref：通知引用，                  pointcut-ref：切入点引用。  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.kuukokawaii.aop.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 09/02/2019   * @Description UserServiceImpl test   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImplTest</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * Method: addUser()       */</span>      <span class="token annotation punctuation">@Test</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          String xml <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>          ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取目标类</span>          UserService userService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userService<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userService<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h2 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h2>AspectJ 是一个基于 Java 语言的 AOP 框架，它扩展了 Java 语言并提供了一个专门的编译器，在编译时提供横向代码的植入。Spring AOP 引入了对 AspectJ 的支持。</li><li>案例说明：<ol><li>目标类：采用接口 + 实现类的方法。（此处代码与全自动代码同）</li><li>切面类：编写多个通知，采用 AspectJ 通知名称任意（方法名任意）。</li></ol></li><li>使用到的部分 Jar 包： <ol><li>spring-aop.jar（AOP 的实现）</li><li>aopalliance.jar（AOP 联盟的规范）</li><li>aspectjweaver.jar（Spring 切入点表达式的实现）</li><li>spring-aspects.jar（提供对 AspectJ 的支持）</li></ol></li><li>代码演示：<ul><li>基于 XML 配置<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/9/2 15:47* @Description 切面类。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 前置通知。   *   * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。   */</span>  <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知。"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 后置通知。   *   * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。   * @param returning 用于获取返回值。   */</span>  <span class="token keyword">void</span> <span class="token function">myAfterReturning</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Object returning<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知。"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，返回值："</span> <span class="token operator">+</span> returning<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 环绕通知。   *   * @param proceedingJoinPoint 连接点   * @return 返回目标方法。   * @throws Throwable 方法执行异常。   */</span>  Object <span class="token function">myAround</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 前</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 手动执行目标方法。</span>      Object obj <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 后</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 抛出异常通知。   *   * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。   */</span>  <span class="token keyword">void</span> <span class="token function">myAfterThrowing</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抛出异常通知。"</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 最终通知。   *   * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。   */</span>  <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知。"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                         https://www.springframework.org/schema/beans/spring-beans.xsd                         http://www.springframework.org/schema/aop                         https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 目标类 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 切面类 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop.MyAspect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!--      aop编程：      &lt;aop:aspect>：将切面类声明成“切面”，从而获得通知（方法）。          ref：引用切面类。      &lt;aop:pointcut>：声明一个切入点，所有的通知都可以使用。          expression：切入点表达式。          id：用于其他通知使用。      &lt;aop:before>: 前置通知，目标方法前执行。          method：通知及方法名。          pointcut：切入点表达式，此表达式只能当前通知使用。          pointcut-ref：切入点的引用，可以与其他通知共享切入点。      &lt;aop:after-returning>：后置通知，目标方法后执行，可获得返回值。          returning：类型 Object, 用于获取返回值，需要与方法中的参数名相对应。类型 Object。      &lt;aop:around>：环绕通知。前置通知优先环绕通知执行。      &lt;aop:after-throwing>：抛出异常通知。抛出异常之后的语句不再执行。          throwing：用于获取异常信息，需要与方法中的参数名相对应。类型 Throwable。      &lt;aop:after>：最终通知。相当于 try/catch 中的 finally，抛出异常也会执行。方法执行后执行，优先级高于环绕（后）通知  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.kuukokawaii.aop.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myBefore<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAfterReturning<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>returning<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAround<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAfterThrowing<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>throwable<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAfter<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li>基于注解配置<br>UserServiceImpl 类需要加上 @Service 注解。@Aspect 用于声明切面类。<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                         https://www.springframework.org/schema/beans/spring-beans.xsd                         http://www.springframework.org/schema/context                         https://www.springframework.org/schema/context/spring-context.xsd                         http://www.springframework.org/schema/aop                         https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 包扫描 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- aop 注解扫描，自动代理 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/9/2 15:47* @Description 切面类。*/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 声明公共切入点   */</span>  <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.kuukokawaii.aop.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">myPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 前置通知。   *   * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。   */</span>  <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"myPointcut()"</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知。"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 后置通知。   *   * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。   * @param returning 用于获取返回值。   */</span>  <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myPointcut()"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"returning"</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">myAfterReturning</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Object returning<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知。"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，返回值："</span> <span class="token operator">+</span> returning<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 环绕通知。   *   * @param proceedingJoinPoint 连接点   * @return 返回目标方法。   * @throws Throwable 方法执行异常。   */</span>  <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"myPointcut()"</span><span class="token punctuation">)</span>  Object <span class="token function">myAround</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 前</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 手动执行目标方法。</span>      Object obj <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 后</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 抛出异常通知。   *   * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。   */</span>  <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myPointcut()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"throwable"</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">myAfterThrowing</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抛出异常通知。"</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 最终通知。   *   * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。   */</span>  <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"myPointcut()"</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知。"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 09/02/2019* @Description UserServiceImpl test*/</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImplTest</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * Method: addUser()   */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userService<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userService<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring（四）：bean 装配</title>
      <link href="/posts/4364/"/>
      <url>/posts/4364/</url>
      
        <content type="html"><![CDATA[<h2 id="实例化方式"><a href="#实例化方式" class="headerlink" title="实例化方式"></a>实例化方式</h2><p>bean 有3种实例化的方式：默认构造、静态工厂和实例化工厂。</p><h3 id="默认构造"><a href="#默认构造" class="headerlink" title="默认构造"></a>默认构造</h3><p>通过<code>&lt;bean id="" class="要装配的实现类全限定类名" /&gt;</code>的方式装配 bean 便是自动使用了默认构造。</p><h3 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h3><p>静态工厂用于生成实例对象，且所有的方法必须是静态的。常用于 Spring 整合其他框架（工具）。<br>通过<code>&lt;bean id="" class="要整合的工厂实现类全限定类名" factory-method="静态方法名" /&gt;</code>进行 bean 的装配。<br>代码演示如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/1 14:07 * @Description StaticFactoryService 接口类 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StaticFactoryService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 测试输出语句     */</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/1 14:07 * @Description StaticFactoryService 实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticFactoryServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StaticFactoryService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态工厂输出成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/1 14:08 * @Description 自定义 bean 静态工厂 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStaticBeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建 StaticFactoryService 实例。     * @return 返回 StaticFactoryService 实例对象。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> StaticFactoryService <span class="token function">createService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StaticFactoryServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--         将静态工厂创建的实例交予 Spring 管理。         class：输入静态工厂的全限定类名。         factory-method：输入需要获取的静态工厂中所存在的静态方法名。     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>staticFactoryService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.di.MyStaticBeanFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 09/01/2019 * @Description StaticFactoryServiceImpl test */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticFactoryServiceImplTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Method: test()     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// spring 配置文件路径。</span>        String xmlPath <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// spring 工厂（spring 容器）。</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从工厂内获取对象。</span>        StaticFactoryService staticFactoryService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"staticFactoryService"</span><span class="token punctuation">,</span>            StaticFactoryService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        staticFactoryService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="实例化工厂"><a href="#实例化工厂" class="headerlink" title="实例化工厂"></a>实例化工厂</h3><p>实例化工厂通过工厂实例对象创建对象，且所有的方法都是非静态的。<br>代码演示如下：</p><blockquote><p>此处代码与上述静态工厂共用 StaticFactoryService 、 StaticFactoryServiceImpl 和 测试类。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/1 14:08 * @Description 自定义 bean 实例工厂 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建 StaticFactoryService 实例。     * @return 返回 StaticFactoryService 实例对象。     */</span>    <span class="token keyword">public</span> StaticFactoryService <span class="token function">createService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StaticFactoryServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--         1.将自定义实例工厂交予 Spring 管理。           class：输入实例工厂的全限定类名。         2.通过实例工厂配置 bean。           factory-bean：配置好的实例工厂的 bean 的 id。           factory-method：输入需要获取的实例工厂中所存在的方法名。     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myBeanFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.di.MyBeanFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>staticFactoryService<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myBeanFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>Spring 的作用域用于确定创建的 bean 的实例个数。通过 XML 配置 bean 时，添加<code>scope</code>属性进行配置（如<code>&lt;bean id="" class="" scope="" /&gt;</code>）。<br>常用的<code>scope</code>属性有<code>singleton</code>（单例）和<code>prototype</code>（多例）。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>可以将 bean 的生命周期划分为11个部分，具体如下图所示：<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/LifeCycle.jpg"><br>图中各部分效用如下：</p><ol><li>Instantiate：初始化 bean，调用构造函数创建实例。</li><li>Populate properties：封装属性，即进行 DI 操作。</li><li>BeanNameAware's setBeanName()：调用 BeanNameAware 接口的 setBeanName 方法获取 BeanName。</li><li>BeanFactoryAware's setBeanFactory()：调用 BeanFactoryAware 接口的 setBeanFactory 方法获取 BeanFactory。</li><li>Pre-initialization BeanPostProcessors：如果存在类实现 BeanPostProcessor,则执行 postProcessBeforeInitialization 方法进行预处理。</li><li>InitializingBean's afterPropertiesSet()：如果 bean 实现 InitializingBean，则执行 afterPropertiesSet 方法。</li><li>Call custom init-method：调用自定义的 init-method 方法。</li><li>Post-initialization BeanPostProcessors：如果存在类实现 BeanPostProcessor,执行 postProcessAfterInitialization 方法进行后处理。</li><li>Bean is ready to use / Container is Shutdown：执行业务处理。</li><li>DisposableBean's destroy()：如果 bean 实现 DisposableBean，则执行 destroy 方法。</li><li>Call custom destroy-method：调用自定义的 destroy-method。</li></ol><p>bean 生命周期常用操作：</p><ul><li>初始化和摧毁<br>如果需要进行初始化或摧毁的操作，可以通过使用<code>init-method</code>和<code>destroy-method</code>属性进行设置，其中destroy-method 只有在 <code>scope=singleton</code> 的时候才会生效。（如<code>&lt;bean id="" class="" init-method="" destory-method=""/&gt;</code>）。<blockquote><p>1.在 beans 标签下的<code>default-init-method</code>可以设置所有默认的属性。<br>2.优先级：InitializationBean 和 DisposableBean &gt; init-method 和 destroy-method &gt; default。</p></blockquote></li><li>后处理<br>在 Spring 中实现 BeanPostProcessor 接口，并将实现类提供给 Spring 容器，Spring 容器就会自动的执行该实现类。在初始化方法前执行 before()，在初始化方法后执行 after()。<br>代码演示如下：<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2019/9/1 16:13* @Description 后处理 bean 实现类*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> bean<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> bean<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/1 16:16   * @Description BeanPostProcessorService 接口类   */</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanPostProcessorService</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试输出语句       */</span>      <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/1 16:16   * @Description BeanPostProcessorService 实现类   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanPostProcessorServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessorService</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试方法内容。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"摧毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                             https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beanPostProcessorService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.di.BeanPostProcessorServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.di.MyBeanPostProcessor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 09/01/2019   * @Description BeanPostProcessorServiceImpl test   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanPostProcessorServiceImplTest</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * Method: test()       */</span>      <span class="token annotation punctuation">@Test</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// spring 配置文件路径。</span>          String xmlPath <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// spring 工厂（spring 容器）。</span>          ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 从工厂内获取对象。</span>          BeanPostProcessorService beanPostProcessorService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"beanPostProcessorService"</span><span class="token punctuation">,</span>              BeanPostProcessorService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          beanPostProcessorService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          applicationContext<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre>  输出结果如下：<br>  <img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/PrintResult.png"></li></ul><h2 id="属性依赖注入"><a href="#属性依赖注入" class="headerlink" title="属性依赖注入"></a>属性依赖注入</h2><h3 id="setter-方法"><a href="#setter-方法" class="headerlink" title="setter 方法"></a>setter 方法</h3><p>关键代码如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        setter 方法注入：        &lt;bean id="" class="">            // 普通数据：            &lt;property name="" value="值"/>            // 引用数据：            &lt;property name="" ref="另一个 bean"/>        &lt;/bean>    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.setter.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>老大<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.setter.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>companyAddress<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>学校地址<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>homeAddress<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>家庭地址<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="P-命名空间"><a href="#P-命名空间" class="headerlink" title="P 命名空间"></a>P 命名空间</h3><p>对 setter 方法注入进行简化，替换<code>&lt;property name="属性名"/&gt;</code>为<code>&lt;bean p:属性名="值" p:属性名-ref="引用值"</code>。P 命名空间需要在 xml 头部增加<code>xmlns:p="http://www.springframework.org/schema/p"</code>。<br>关键代码如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.setter.Person<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>老大<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>address-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.setter.Address<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>companyAddress</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>学校地址<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>homeAddress</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>家庭地址<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h3><p>对<code>&lt;property&gt;</code>进行统一编程，所有内容都使用<code>value</code>（如`&lt;property name=”” value=”#{表达式}”。<br>表达式详情参考：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/spring-framework-reference/core.html#expressions" target="_blank" rel="noopener">Spring Expression Language</a></p><h3 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h3><p>集合的注入就是给<code>&lt;property&gt;</code>添加子标签。数组使用<code>&lt;array&gt;</code>、List 使用<code>&lt;list&gt;</code>、Set 使用<code>&lt;set&gt;</code>、Map 使用<code>&lt;map&gt;</code>、Properties使用<code>&lt;props&gt;</code>。其中 Map 和 Properties 存放键值对时分别需要使用<code>&lt;entry&gt;</code>和<code>&lt;prop&gt;</code>描述。<br>关键代码如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collData<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.setter.CollData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrayData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>array1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>array2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>list1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>list2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>setData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>set1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>set2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mk1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mv1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mk2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mv2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>propsData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pk1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>pv1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pk2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>pv2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="基于注解配置"><a href="#基于注解配置" class="headerlink" title="基于注解配置"></a>基于注解配置</h2><ul><li>注解就是一个使用了<code>@注解名称</code>的类，比 XML 使用起来更方便。使用注解前需要配置 Spring 包扫描，扫描含有注解的类。</li><li>在 web 开发中，常用3个 @Component 注解衍生注解<ol><li>@Repository：用于 Dao 层。</li><li>@Service：用于 Service 层。</li><li>@Controller：用于 Web 层。</li></ol></li><li>依赖注入（可以给私有字段设置，也可以给 setter 方法设置。）<ol><li>普通值：@Value(“需要设置的值”)</li><li>引用值：<ol><li>按照类型注入：@Autowired。</li><li>按照名称注入1：@Autowired 和 @Qualifier(“名称”)联合使用。</li><li>按照名称注入2：@Resource(“名称”)。</li></ol></li></ol></li><li>生命周期<br>初始化：@PostConstruct<br>销毁：@PreDestroy</li><li>作用域：@Scope(“属性”)</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring（三）：DI</title>
      <link href="/posts/639/"/>
      <url>/posts/639/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-DI"><a href="#什么是-DI" class="headerlink" title="什么是 DI"></a>什么是 DI</h2><p>在依赖注入中，如果对象 A 中使用到对象 B，则称对象 A 依赖于对象 B；而当你创建对象 A 时，由于对象 A 依赖于对象 B 需要额外创建一个对象 B，并调用对象 A 的 set 方法进行对象 B 的实例设置，这便称为注入。</p><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><ol><li>创建 BookService 接口和实现类。</li><li>创建 BookDao 接口和实现类。</li><li>通过依赖注入获得 dao 和 service。<ul><li>通过 xml 配置的方式。</li><li>通过注解的方式。</li></ul></li></ol><h2 id="使用到的-Jar-包"><a href="#使用到的-Jar-包" class="headerlink" title="使用到的 Jar 包"></a>使用到的 Jar 包</h2><ul><li>spring-beans.jar</li><li>spring-context.jar</li><li>spring-core.jar</li><li>spring-expression.jar</li><li>commons-logging.jar</li><li>junit.jar</li><li>spring-test.jar</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/8/30 15:16 * @Description BookDao 接口类 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 增加书本     */</span>    <span class="token keyword">void</span> <span class="token function">insertBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/8/30 15:21 * @Description BookDao 实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"书本添加成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/8/30 15:16 * @Description BookService 接口类 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 增加书本     */</span>    <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/8/30 15:16 * @Description BookService 实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> BookDao bookDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBookDao</span><span class="token punctuation">(</span>BookDaoImpl bookDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bookDao <span class="token operator">=</span> bookDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bookDao<span class="token punctuation">.</span><span class="token function">insertBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="XML-文件配置方式"><a href="#XML-文件配置方式" class="headerlink" title="XML 文件配置方式"></a>XML 文件配置方式</h3><p>从 Spring 容器中获得实例对象。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        以下配置其实就执行了三个步骤：        1.BookService bookService = new BookServiceImpl();        2.BookDao bookDao = new BookDaoImpl();        3.bookService.setBookDao(bookDao);        其中&lt;property name="" ref=""/>就相当于上述的 set 方法。     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.di.BookServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.di.BookDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 08/30/2019 * @Description BookServiceImpl test */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImplTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Method: addBook()     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// spring 配置文件路径。</span>        String xmlPath <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// spring 工厂（spring 容器）。</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从工厂内获取对象。</span>        BookService bookService <span class="token operator">=</span> <span class="token punctuation">(</span>BookService<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"bookService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bookService<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><p>从 Spring 容器中获得实例对象。（需要在 BookServiceImpl 类加上 @Service 注解以及 BookDaoImpl 类加上 @Repository 注解，让包扫描能够扫描到。）</p><blockquote><p>此处修改了 BookServiceImpl 类 和 XML 配置。</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context                           https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/8/30 15:16 * @Description BookService 实现类 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> BookDao bookDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">BookServiceImpl</span><span class="token punctuation">(</span>BookDao bookDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bookDao <span class="token operator">=</span> bookDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bookDao<span class="token punctuation">.</span><span class="token function">insertBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 08/30/2019 * @Description BookServiceImpl test */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImplTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BookService bookService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Method: addBook()     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        bookService<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring（二）：IoC</title>
      <link href="/posts/6802/"/>
      <url>/posts/6802/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-IoC"><a href="#什么是-IoC" class="headerlink" title="什么是 IoC"></a>什么是 IoC</h2><p>IoC 可以理解为借助于“第三方”实现对象之间的解耦。Spring IoC 通过使用 IoC 容器调控系统内所有的对象，使得对象之间没有了耦合关系，而 IoC 容器成为了整个项目的核心部分，当 IoC 容器失效时，所有对象彼此之间都会失去联系。<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/IoCContainer.jpg"></p><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><ol><li>创建 UserService 接口和实现类。</li><li>获得 UserService 实现类的实例。<ul><li>通过 XML 文件配置的方式，从 Spring 容器中获得实例对象。</li><li>通过注解的方式从 Spring 容器中获得实例对象。</li></ul></li></ol><h2 id="使用到的-Jar-包"><a href="#使用到的-Jar-包" class="headerlink" title="使用到的 Jar 包"></a>使用到的 Jar 包</h2><ul><li>spring-beans.jar</li><li>spring-context.jar</li><li>spring-core.jar</li><li>spring-expression.jar</li><li>commons-logging.jar</li><li>junit.jar</li><li>spring-test.jar</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/8/29 18:05 * @Description UserService 接口类 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 增加用户     */</span>    <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/8/29 18:06 * @Description UserService 实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加用户。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="XML-文件配置方式"><a href="#XML-文件配置方式" class="headerlink" title="XML 文件配置方式"></a>XML 文件配置方式</h3><p>从 Spring 容器中获得实例对象。（Spring配置文件常用 ApplicationContext 命名。）  </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 需要配置的 bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.ioc.UserServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 08/29/2019 * @Description UserServiceImpl test */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImplTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// spring 配置文件路径。</span>        String xmlPath <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// spring 工厂（spring 容器）。</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从工厂内获取对象。</span>        UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><p>通过注解从 Spring 容器中获得实例对象。（需要在 UserServiceImpl 类加上 @Service 注解，让包扫描能够扫描到。）</p><blockquote><p>需要注意的是用 spring 进行 Junit 测试时，需要引入 spring-test.jar，并在测试类上加入 @RunWith 和 @ContextConfiguration 的注解配置。如果还有错误可以尝试更新 Junit.jar 的版本。</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context                           https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置包扫描 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 08/29/2019 * @Description UserServiceImpl test */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImplTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Method: addUser()     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring（一）：简介</title>
      <link href="/posts/14546/"/>
      <url>/posts/14546/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-优点"><a href="#Spring-优点" class="headerlink" title="Spring 优点"></a>Spring 优点</h2><ul><li><strong>方便解耦，简化开发</strong><br>可以将所有对象的创建和依赖关系的维护交给 Spring 管理。</li><li><strong>AOP 编程的支持</strong><br>Spring 提供面向切面的编程，可以方便的实现对程序进行权限拦截、运行监控等功能。</li><li><strong>声明式事务的支持</strong><br>无需手动编程，只需要通过配置就可以完成对事物的管理。</li><li><strong>方便程序的测试</strong><br>Spring 支持 Junit，可以通过注解方便的测试 Spring 程序。</li><li><strong>方便集成各种优秀框架</strong><br>Spring 内部提供了对各种优秀框架（Struts、Hibernate、MyBatis、Quartz……）的直接支持。</li><li><strong>降低 JavaEE API 的使用难度</strong><br>Spring 封装了 JavaEE 开发中一些非常难用的 API(JDBC、JavaMail、远程调用……)，降低了这些 API 的应用难度。</li></ul><h2 id="Spring-体系结构"><a href="#Spring-体系结构" class="headerlink" title="Spring 体系结构"></a>Spring 体系结构</h2><p>Spring 框架是一个分层架构，它将一系列的功能要素分为 Data Access/Integration，Web，AOP，Core Container，Instrumentation 和 Test 等几大模块。<br><img src="/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/SpringArchitecture.jpg"></p><h3 id="Core-Container"><a href="#Core-Container" class="headerlink" title="Core Container"></a>Core Container</h3><ul><li>Beans：用于管理 Bean。</li><li>Core：Spring 的核心，主要用于实现反向控制 IoC（Inversion of Control）与依赖注入 DI（Dependency Injection）、Bean 配置以及加载。</li><li>Context：上下文，相当于配置文件。</li><li>Expression Language：即 SpEL，是 Spring 的一种表达式，用来动态的获取值、对象等。 </li></ul><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><ul><li>AOP：切面编程（Aspect Oriented Programming）。</li><li>Aspects：一个切面编程的框架。</li></ul><h3 id="Data-Access-Integration"><a href="#Data-Access-Integration" class="headerlink" title="Data Access/Integration"></a>Data Access/Integration</h3><ul><li>JDBC：用于链接数据库，向数据库发送 sql 语句。</li><li>ORM：对象关系映射，用于整合持久层框架（Mybatis，Hibernate……）。</li><li>OXM：即 O/X 映射器，用于将 Java 对象和 XML 文档之间进行互相转换。</li><li>JMS：即 Java消息服务，用于两个应用程序之间传送消息，进行异步通信。</li><li>Transactions：事务管理。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
