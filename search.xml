<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java 工具类</title>
      <link href="/posts/8fcb2eb1/"/>
      <url>/posts/8fcb2eb1/</url>
      
        <content type="html"><![CDATA[<h2 id="JsonConfig"><a href="#JsonConfig" class="headerlink" title="JsonConfig"></a>JsonConfig</h2><p>Spring Boot 中使用 Fastjson 替换 Jackson。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/8/19 16:29 * @Description 用 Fastjson 替换项目自带的 Jackson */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先删除 Jackson 转换器，否则会优先匹配 Jackson 转换器</span>        converters<span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> item <span class="token keyword">instanceof</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加 Fastjson 转换器</span>        FastJsonHttpMessageConverter fastJsonHttpMessageConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 配置 Fastjson</span>        FastJsonConfig fastJsonConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fastJsonConfig<span class="token punctuation">.</span><span class="token function">setSerializerFeatures</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">// 输出值为null的字段</span>            SerializerFeature<span class="token punctuation">.</span>WriteMapNullValue<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 将Collection类型字段的字段空值输出为[]</span>            SerializerFeature<span class="token punctuation">.</span>WriteNullListAsEmpty<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 将字符串类型字段的空值输出为空字符串</span>            SerializerFeature<span class="token punctuation">.</span>WriteNullStringAsEmpty<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 将数值类型字段的空值输出为0</span>            SerializerFeature<span class="token punctuation">.</span>WriteNullNumberAsZero<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 禁用循环引用</span>            SerializerFeature<span class="token punctuation">.</span>DisableCircularReferenceDetect        <span class="token punctuation">)</span><span class="token punctuation">;</span>        fastJsonHttpMessageConverter<span class="token punctuation">.</span><span class="token function">setFastJsonConfig</span><span class="token punctuation">(</span>fastJsonConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加支持的 MediaType 为 application/json</span>        List<span class="token operator">&lt;</span>MediaType<span class="token operator">></span> fastMediaTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fastMediaTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        fastJsonHttpMessageConverter<span class="token punctuation">.</span><span class="token function">setSupportedMediaTypes</span><span class="token punctuation">(</span>fastMediaTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fastJsonHttpMessageConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="异常状态码枚举"><a href="#异常状态码枚举" class="headerlink" title="异常状态码枚举"></a>异常状态码枚举</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/8/16 15:56 * @Description 错误状态码 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> ErrorCodeEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 参数错误：1000～1999     */</span>    <span class="token function">PARAM_NOT_VALID</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">"参数无效"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PARAM_IS_BLANK</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"参数为空"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PARAM_TYPE_ERROR</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"参数类型错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PARAM_NOT_COMPLETE</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">"参数缺失"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 用户错误：2000~2999     */</span>    <span class="token function">USER_NOT_LOGIN</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token string">"用户未登录"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">USER_ACCOUNT_EXPIRED</span><span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token string">"账号已过期"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">USER_CREDENTIALS_ERROR</span><span class="token punctuation">(</span><span class="token number">2002</span><span class="token punctuation">,</span> <span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">USER_CREDENTIALS_EXPIRED</span><span class="token punctuation">(</span><span class="token number">2003</span><span class="token punctuation">,</span> <span class="token string">"密码过期"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">USER_ACCOUNT_DISABLE</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> <span class="token string">"账号不可用"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">USER_ACCOUNT_LOCKED</span><span class="token punctuation">(</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token string">"账号被锁定"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">USER_ACCOUNT_NOT_EXIST</span><span class="token punctuation">(</span><span class="token number">2006</span><span class="token punctuation">,</span> <span class="token string">"账号不存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">USER_ACCOUNT_ALREADY_EXIST</span><span class="token punctuation">(</span><span class="token number">2007</span><span class="token punctuation">,</span> <span class="token string">"账号已存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">USER_ACCOUNT_USE_BY_OTHERS</span><span class="token punctuation">(</span><span class="token number">2008</span><span class="token punctuation">,</span> <span class="token string">"账号下线"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">CLIENT_UNAPPROVED</span><span class="token punctuation">(</span><span class="token number">2009</span><span class="token punctuation">,</span> <span class="token string">"未经允许的客户端身份验证信息"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">UPLOAD_FILE_TYPE_INVALID</span><span class="token punctuation">(</span><span class="token number">2010</span><span class="token punctuation">,</span> <span class="token string">"上传的文件格式错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">UPLOAD_FILE_FAIL</span><span class="token punctuation">(</span><span class="token number">2011</span><span class="token punctuation">,</span> <span class="token string">"文件上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">TOKEN_INVALID</span><span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token string">"token 无效"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 业务错误：3000~3999     */</span>    <span class="token function">NO_PERMISSION</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token string">"没有权限"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">INSERT_FAIL</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">,</span> <span class="token string">"插入失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">DELETE_FAIL</span><span class="token punctuation">(</span><span class="token number">3002</span><span class="token punctuation">,</span> <span class="token string">"删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">UPDATE_FAIL</span><span class="token punctuation">(</span><span class="token number">3003</span><span class="token punctuation">,</span> <span class="token string">"更新失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 系统错误：4000~4999     */</span>    <span class="token function">INTERNAL_AUTHENTICATION_ERROR</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">,</span> <span class="token string">"内部认证服务异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">CLIENT_SECRET_INCORRECT</span><span class="token punctuation">(</span><span class="token number">4001</span><span class="token punctuation">,</span> <span class="token string">"客户端安全码错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">CLIENT_AUTHENTICATION_INCORRECT</span><span class="token punctuation">(</span><span class="token number">4002</span><span class="token punctuation">,</span> <span class="token string">"客户端身份验证错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">CIRCUIT_BREAKER</span><span class="token punctuation">(</span><span class="token number">4003</span><span class="token punctuation">,</span> <span class="token string">"请求服务出错，服务熔断"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SERVICE_DEGRADATION</span><span class="token punctuation">(</span><span class="token number">4004</span><span class="token punctuation">,</span> <span class="token string">"该服务暂时关闭，服务降级"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">GLOBAL_FILTER_ERROR</span><span class="token punctuation">(</span><span class="token number">4005</span><span class="token punctuation">,</span> <span class="token string">"过滤器异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SECURITY_FILTER_ERROR</span><span class="token punctuation">(</span><span class="token number">4005</span><span class="token punctuation">,</span> <span class="token string">"security 过滤器异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 错误代码     * 1000~1999：参数错误     * 2000~2999：用户错误     * 3000~3999：业务错误     * 4000~4999：系统错误     */</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 错误信息     */</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token function">ErrorCodeEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="时间工具"><a href="#时间工具" class="headerlink" title="时间工具"></a>时间工具</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/10/15 16:36 * @Description 时间工具 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取当前时间 Timestamp 格式，没有毫秒     *     * @return Timestamp 当前时间     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Timestamp <span class="token function">getNowTimeWithoutNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DateTimeFormatter dateTimeFormatter <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Timestamp<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dateTimeFormatter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="编码工具"><a href="#编码工具" class="headerlink" title="编码工具"></a>编码工具</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/8/20 17:12 * @Description 编码工具 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncryptUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Base64 编码     * @param bytes 二进制数组     * @return 返回编码后的字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">encodeBase64</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Base64 解码     * @param str 字符串     * @return 返回解码后的二进制数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decodeBase64</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据 UTF8 进行 Base64 编码     * @param str 字符串     * @return 编码后的字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">encodeUtf8StringBase64</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据 UTF8 进行 Base64 解码     * @param str 字符串     * @return 解码后的字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">decodeUtf8StringBase64</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * url 编码     * @param url url     * @return url     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">encodeUrl</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String encoded <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            encoded <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"不支持的编码格式："</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> encoded<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * url 解码     * @param url url     * @return url     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">decodeUrl</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String decoded <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            decoded <span class="token operator">=</span> URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"不支持的编码格式："</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> decoded<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Excel-工具"><a href="#Excel-工具" class="headerlink" title="Excel 工具"></a>Excel 工具</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/9/27 16:01 * @Description Excel 工具 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 判断是不是 Excel 文件     * @param excelFile 多媒体文件     * @return 是否是 Excel 文件     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isExcelFile</span><span class="token punctuation">(</span>MultipartFile excelFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 确保 MultipartFile 不为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>excelFile <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取 Excel 文件名</span>        String fileName <span class="token operator">=</span> excelFile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 文件名长</span>        <span class="token keyword">int</span> nameLength <span class="token operator">=</span> fileName <span class="token operator">!=</span> null <span class="token operator">?</span> fileName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断文件是否是 03 或 07 版 Excel 文件（.xls or .xlsx），并且判断文件名是否正确</span>        <span class="token keyword">boolean</span> is03Excel <span class="token operator">=</span> <span class="token punctuation">(</span>nameLength <span class="token operator">&lt;</span> Constant<span class="token punctuation">.</span>EXCEL_03_SUFFIX_LENGTH <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>            fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>nameLength <span class="token operator">-</span> Constant<span class="token punctuation">.</span>EXCEL_03_SUFFIX_LENGTH<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>EXCEL_03_SUFFIX<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> is07Excel <span class="token operator">=</span> <span class="token punctuation">(</span>nameLength <span class="token operator">&lt;</span> Constant<span class="token punctuation">.</span>EXCEL_07_SUFFIX_LENGTH <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>            fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>nameLength <span class="token operator">-</span> Constant<span class="token punctuation">.</span>EXCEL_07_SUFFIX_LENGTH<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>EXCEL_07_SUFFIX<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果不是 03 也不是 07 则返回接收失败</span>        <span class="token keyword">return</span> is03Excel <span class="token operator">||</span> is07Excel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="统一封装工具类"><a href="#统一封装工具类" class="headerlink" title="统一封装工具类"></a>统一封装工具类</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/8/14 9:23 * @Description 统一结果封装 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"统一结果"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseResult</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * HTTP 状态码或自定义错误代码     */</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"HTTP 状态码或自定义错误代码"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 提示信息     */</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"提示信息"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 数据     */</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"返回的数据"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/8/19 17:31 * @Description 统一封装工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseResultUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 操作成功返回有数据统一结果     * @param data 数据     * @return 统一结果信息 Result     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ResponseResult<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">success</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">.</span><span class="token function">getReasonPhrase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 操作成功返回无数据统一结果     * @return 统一结果信息 Result     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ResponseResult<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 操作失败返回统一结果     * @param status HTTP 状态码     * @param msg    提示信息     * @return 统一结果信息 Result     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ResponseResult<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">fail</span><span class="token punctuation">(</span>Integer status<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 操作失败返回统一结果     * @param status HTTP 状态码     * @param msg    提示信息     * @return 统一结果信息 Result     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ResponseResult<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">fail</span><span class="token punctuation">(</span>Integer status<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 操作失败返回统一结果     * @param errorCodeEnum 自定义错误状态码     * @return 统一结果信息 Result     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ResponseResult<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">fail</span><span class="token punctuation">(</span>ErrorCodeEnum errorCodeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">fail</span><span class="token punctuation">(</span>errorCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorCodeEnum<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 操作失败返回统一结果     * @param httpStatus HttpStatus 类默认状态码     * @return 统一结果信息 Result     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ResponseResult<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">fail</span><span class="token punctuation">(</span>HttpStatus httpStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">fail</span><span class="token punctuation">(</span>httpStatus<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> httpStatus<span class="token punctuation">.</span><span class="token function">getReasonPhrase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 操作失败返回统一结果     * @param errorCodeEnum 自定义错误状态码     * @param data 假数据     * @return 统一结果信息 Result     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ResponseResult<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">fail</span><span class="token punctuation">(</span>ErrorCodeEnum errorCodeEnum<span class="token punctuation">,</span> T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>errorCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorCodeEnum<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="统一异常处理类"><a href="#统一异常处理类" class="headerlink" title="统一异常处理类"></a>统一异常处理类</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/8/14 19:13 * @Description Controller 层的全局异常处理 */</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalControllerExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 运行时异常全局处理     * @param e 运行时异常     * @return 统一结果处理     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>RuntimeException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseResult<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">runtimeExceptionHandler</span><span class="token punctuation">(</span>RuntimeException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"运行时异常："</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ResponseResultUtil<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/8/22 1:04 * @Description 自定义总异常 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomizeException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 错误代码     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Integer errorCode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 错误信息     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CustomizeException</span><span class="token punctuation">(</span>Integer errorCode<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CustomizeException</span><span class="token punctuation">(</span>Integer errorCode<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CustomizeException</span><span class="token punctuation">(</span>ErrorCodeEnum errorCodeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>errorCodeEnum<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> errorCodeEnum<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CustomizeException</span><span class="token punctuation">(</span>ErrorCodeEnum errorCodeEnum<span class="token punctuation">,</span> Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>errorCodeEnum<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> errorCodeEnum<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errorCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Redis-封装操作工具"><a href="#Redis-封装操作工具" class="headerlink" title="Redis 封装操作工具"></a>Redis 封装操作工具</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/10/30 21:18 * @Description Redis 工具类 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RedisUtil</span><span class="token punctuation">(</span>RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate <span class="token operator">=</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 指定缓存失效时间     * @param key  键     * @param time 时间(秒)     * @return 是否成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据 key 获取过期时间     * @param key 键，不能为 null     * @return 过期时间(秒)，0代表永久有效     */</span>    <span class="token keyword">public</span> Long <span class="token function">getExpire</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断 key 是否存在     * @param key 键     * @return boolean     */</span>    <span class="token keyword">public</span> Boolean <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除缓存     * @param keys 一个或多个键     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>keys <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> keys<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据 key 获取值     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 存储键值对     * @param key   键     * @param value 值     * @return 存储是否成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 存储键值对并设置过期时间     * @param key   键     * @param value 值     * @param time  过期时间(秒)，time 小于 0 则设置有效期无限     * @return 存储是否成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递增     * @param key   键     * @param delta 要增加几(大于0)     * @return 返回增长后的值     */</span>    <span class="token keyword">public</span> Long <span class="token function">incr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递增因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递减     * @param key   键     * @param delta 要减少几(大于0)     * @return 返回减少后的值     */</span>    <span class="token keyword">public</span> Long <span class="token function">decr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递减因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashGet     * @param key  键，不能为 null     * @param item 项，不能为 null     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">hGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取 HashKey 对应的所有键值对     * @param key 键     * @return 对应的多个键值对     */</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">hmGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet，存入值，如果不存在则创建     * @param key   键，不能为 null     * @param map   对应多个键值对     * @param value 值     * @return 是否存储成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet，存入值，如果不存在则创建，并设置过期时间     * @param key   键，不能为 null     * @param map   对应多个键值对     * @param value 值     * @param time  过期时间(秒)     * @return 是否存储成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet     * @param key 键，不能为 null     * @param map 对应多个键值对     * @return 是否存储成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet 并设置过期时间     * @param key  键，不能为 null     * @param map  对应多个键值对     * @param time 过期时间(秒)     * @return 是否存储成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除 hash 表中的值     * @param key   键     * @param items 项，可以多个，不能为 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hDel</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断 hash 表中是否有该项的值     * @param key  键，不能为 null     * @param item 项，不能为 null     * @return 是否存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash 递增，如果不存在创建一个     * @param key   键，不能为 null     * @param item  项，不能为 null     * @param delta 要增加几     * @return 增长后的值     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hIncr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash 递减，如果不存在创建一个     * @param key   键，不能为 null     * @param item  项，不能为 null     * @param delta 要减少几     * @return 减少后的值     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hDecr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据 key 获取 set 中的所有值。     * @param key 键，不能为 null     * @return 所有值     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">sGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据 value 从一个 set 中查询是否存在     * @param key   键     * @param value 值     * @return boolean     */</span>    <span class="token keyword">public</span> Boolean <span class="token function">sHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将数据存入 set     * @param key    键     * @param values 值可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> Long <span class="token function">sSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> 0L<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将数据存入 set 并设置过期时间     * @param key    键     * @param time   过期时间(秒)     * @param values 值可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> Long <span class="token function">sSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> 0L<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取 set 缓存的长度     * @param key 键     * @return 长度     */</span>    <span class="token keyword">public</span> Long <span class="token function">sGetSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> 0L<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除所有 value 值的项     * @param key    键     * @param values 值，可以多个     * @return 移除个数     */</span>    <span class="token keyword">public</span> Long <span class="token function">sRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> 0L<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取 list 的内容     * @param key   键     * @param start 开始，下标0开始     * @param end   结束(包括)，0~-1代表所有值     * @return 所有内容     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">lGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取 list 长度     * @param key 键，不能为 null键     * @return 长度     */</span>    <span class="token keyword">public</span> Long <span class="token function">lGetSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> 0L<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过索引获取 list 中的值     * @param key   键     * @param index 下标，-1代表表尾     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">lIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 存入 list，存在末尾     * @param key   键     * @param value 值     * @return 是否成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 存入 list，存在末尾并设置过期时间     * @param key   键     * @param value 值     * @param time  过期时间(秒)     * @return 是否成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 多值存入 list，存在末尾     * @param key    键     * @param values 值，可多个     * @return 是否成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 多值存入 list，存在末尾     * @param key    键     * @param values 值，可多个     * @param time   过期时间(秒)     * @return 是否成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> values<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据索引修改 list 中的某条数据     * @param key   键     * @param index 索引     * @param value 值     * @return 是否成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * list 移除 n 个值为 value     * @param key 键     * @param count 移除多少个     * @param value 值     * @return 移除个数     */</span>    <span class="token keyword">public</span> Long <span class="token function">lRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> 0L<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Util </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger</title>
      <link href="/posts/bf71eba1/"/>
      <url>/posts/bf71eba1/</url>
      
        <content type="html"><![CDATA[<h2 id="springboot-集成-swagger"><a href="#springboot-集成-swagger" class="headerlink" title="springboot 集成 swagger"></a>springboot 集成 swagger</h2><ul><li><p>引入依赖</p><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>swagger2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>swagger<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>swagger<span class="token operator">-</span>ui<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>swagger<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre></li><li><p>编写 swagger 配置文件</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2020/8/14 11:45  * @Description swagger 配置  */</span>  <span class="token annotation punctuation">@Configuration</span>  <span class="token annotation punctuation">@EnableSwagger2</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 配置 swagger 文档分组：喵粮都输光了      * @return Docket      */</span>      <span class="token annotation punctuation">@Bean</span>      <span class="token keyword">public</span> Docket <span class="token function">groupYingJie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"喵粮都输光了"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.kuukokawaii.engineeringcertification"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 配置 swagger 的 docket 实例      * @return Docket      */</span>      <span class="token annotation punctuation">@Bean</span>      <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span>Environment envi<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 设置 swagger 页面能显示的环境</span>          Profiles profiles <span class="token operator">=</span> Profiles<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">boolean</span> flag <span class="token operator">=</span> envi<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>profiles<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// swagger 信息</span>              <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 是否开启 swagger</span>              <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 扫描的包位置</span>              <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.kuukokawaii.engineeringcertification"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 扫描的 uri 路径</span>              <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 配置 swagger 信息      * @return ApiInfo      */</span>      <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"工程认证 API 文档"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>swagger 的使用</p><table><thead><tr><th>注解</th><th>使用场景</th><th>常用参数及其作用</th></tr></thead><tbody><tr><td>@ApiModel</td><td>POJO 类</td><td>description:注释类</td></tr><tr><td>@ApiModelProperty</td><td>POJO 变量</td><td>value:注释变量<br> required:标记是否必须</td></tr><tr><td>@Api</td><td>Controller 类</td><td>tags:注释类</td></tr><tr><td>@ApiOperation</td><td>Controller 方法</td><td>value: Controller 方法注释</td></tr><tr><td>@ApiParam</td><td>Controller 方法单一参数注释</td><td>value:注释变量<br> required:标记是否必须</td></tr><tr><td>@ApiImplicitParams</td><td>Controller 方法多个参数注释</td><td>@ApiImplicitParam 数组</td></tr><tr><td>@ApiImplicitParam</td><td>配合 @ApiImplicitParams 使用，注释单个参数</td><td>name:变量名<br>value:注释变量<br> required:标记是否必须</td></tr></tbody></table></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CODING 部署前后端分离项目</title>
      <link href="/posts/c42f8baa/"/>
      <url>/posts/c42f8baa/</url>
      
        <content type="html"><![CDATA[<h2 id="后端代码部署"><a href="#后端代码部署" class="headerlink" title="后端代码部署"></a>后端代码部署</h2><ul><li><p>CODING 部署 Spring Boot 项目执行流程(使用持续集成中的构建计划执行)</p><ol><li>git 提交代码到后台仓库触发自动部署触发器。</li><li>CODING 读取代码仓库的 Jenkinsfile 文件，执行 Jenkinsfile 文件中的部署流程。</li><li>CODING 读取代码仓库的代码并打成 jar 包。</li><li>CODING 读取代码仓库的 Dockerfile 文件将 jar 包包装成 Docker 镜像文件(jdk)并上传至制品库。</li><li>CODING 通过远端服务器的 Docker 拉取制品库中的 Docker 镜像文件并运行。</li></ol></li><li><p>托管仓库目录结构<br>  <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/coding_back_end_structure.png"></p></li><li><p>构建计划环境变量</p><table><thead><tr><th>变量名</th><th>默认值</th><th>注释</th></tr></thead><tbody><tr><td>DOCKER_IMAGE_NAME</td><td></td><td>Docker 镜像名</td></tr><tr><td>DOCKERFILE_PATH</td><td>Dockerfile</td><td>Dockerfile 文件位置</td></tr><tr><td>DOCKER_BUILD_CONTEXT</td><td>.</td><td>Docker 构建目录</td></tr><tr><td>DOCKER_IMAGE_VERSION</td><td>${GIT_LOCAL_BRANCH:-branch}-${GIT_COMMIT}</td><td>Docker 镜像版本</td></tr><tr><td>DOCKER_REPO_NAME</td><td></td><td>当前项目下的 Docker 制品仓库名</td></tr><tr><td>REMOTE_USER_NAME</td><td></td><td>SSH 用户名</td></tr><tr><td>REMOTE_SSH_PORT</td><td></td><td>SSH 端口</td></tr><tr><td>REMOTE_HOST</td><td></td><td>目标服务地址(IP)</td></tr><tr><td>REMOTE_CRED</td><td></td><td>SSH 登陆凭据</td></tr><tr><td>TOMCAT_PORT</td><td>8080</td><td>tomcat 端口</td></tr></tbody></table></li><li><p>Jenkinsfile 文件</p><pre class=" language-jenkins"><code class="language-jenkins">  pipeline {      agent any      stages {          stage('检出') {              steps {                  checkout([$class: 'GitSCM',                  branches: [[name: env.GIT_BUILD_REF]],                  userRemoteConfigs: [[                      url: env.GIT_REPO_URL,                      credentialsId: env.CREDENTIALS_ID                  ]]])              }          }          stage('编译') {              steps {                  sh 'mvn install'                  echo '编译完成.'                  archiveArtifacts(artifacts: '**/target/*.jar', fingerprint: true)              }          }          stage('构建 Docker 镜像') {              steps {                  sh "docker build -f ${env.DOCKERFILE_PATH} -t ${env.CODING_DOCKER_IMAGE_NAME}:${env.DOCKER_IMAGE_VERSION} ${env.DOCKER_BUILD_CONTEXT}"              }          }          stage('推送到 CODING Docker 制品库') {              steps {                  script {                      docker.withRegistry(                          "${env.CCI_CURRENT_WEB_PROTOCOL}://${env.CODING_DOCKER_REG_HOST}",                          "${env.CODING_ARTIFACTS_CREDENTIALS_ID}"                      ) {                          docker.image("${CODING_DOCKER_IMAGE_NAME}:${env.DOCKER_IMAGE_VERSION}").push()                      }                  }              }          }          stage('部署到远端服务') {              steps {                  script {                      def remoteConfig = [:]                      remoteConfig.name = "my-remote-server"                      remoteConfig.host = "${env.REMOTE_HOST}"                      remoteConfig.port = "${env.REMOTE_SSH_PORT}".toInteger()                      remoteConfig.allowAnyHosts = true                      withCredentials([                          sshUserPrivateKey(                              credentialsId: "${env.REMOTE_CRED}",                              keyFileVariable: "privateKeyFilePath"                          ),                          usernamePassword(                              credentialsId: "${env.CODING_ARTIFACTS_CREDENTIALS_ID}",                              usernameVariable: 'CODING_DOCKER_REG_USERNAME',                              passwordVariable: 'CODING_DOCKER_REG_PASSWORD'                          )                      ]) {                          // SSH 登陆用户名                          remoteConfig.user = "${env.REMOTE_USER_NAME}"                          // SSH 私钥文件地址                          remoteConfig.identityFile = privateKeyFilePath                          // 请确保远端环境中有 Docker 环境                          sshCommand(                              remote: remoteConfig,                              command: "docker login -u ${CODING_DOCKER_REG_USERNAME} -p ${CODING_DOCKER_REG_PASSWORD} ${CODING_DOCKER_REG_HOST}",                              sudo: true,                          )                          sshCommand(                              remote: remoteConfig,                              command: "docker rm -f ${CODING_DOCKER_IMAGE_NAME} | true",                              sudo: true,                          )                          // DOCKER_IMAGE_VERSION 中涉及到 GIT_LOCAL_BRANCH / GIT_TAG / GIT_COMMIT 的环境变量的使用                          // 需要在本地完成拼接后，再传入到远端服务器中使用                          DOCKER_IMAGE_URL = sh(                              script: "echo ${CODING_DOCKER_REG_HOST}/${CODING_DOCKER_IMAGE_NAME}:${env.DOCKER_IMAGE_VERSION}",                              returnStdout: true                          )                          sshCommand(                              remote: remoteConfig,                              command: "docker run -d -p ${env.TOMCAT_PORT}:${env.TOMCAT_PORT} --name ${CODING_DOCKER_IMAGE_NAME} ${DOCKER_IMAGE_URL}",                              sudo: true,                          )                          echo "部署成功，请到 http://${env.REMOTE_HOST}:${env.TOMCAT_PORT} 预览效果"                      }                  }              }          }      }      environment {          CODING_DOCKER_REG_HOST = "${env.CCI_CURRENT_TEAM}-docker.pkg.${env.CCI_CURRENT_DOMAIN}"          CODING_DOCKER_IMAGE_NAME = "${env.PROJECT_NAME.toLowerCase()}/${env.DOCKER_REPO_NAME}/${env.DOCKER_IMAGE_NAME}"      }  }</code></pre></li><li><p>Dockerfile 文件</p><pre class=" language-docker"><code class="language-docker">  <span class="token keyword">FROM</span> openjdk<span class="token punctuation">:</span>8<span class="token punctuation">-</span>jdk<span class="token punctuation">-</span>alpine3.9  <span class="token keyword">VOLUME</span> /tmp  <span class="token keyword">ADD</span> target/engineering_certification<span class="token punctuation">-</span>1.0.jar main<span class="token punctuation">-</span>project.jar  <span class="token keyword">ADD</span> src/main/resources/application.yml application.yml  <span class="token keyword">ADD</span> src/main/resources/application<span class="token punctuation">-</span>dev.yml application<span class="token punctuation">-</span>dev.yml  <span class="token keyword">EXPOSE</span> 80  <span class="token comment" spellcheck="true"># 需要注意 Docker 打包 springboot 项目不会自动读取配置文件，需要外部引入</span>  <span class="token keyword">ENTRYPOINT</span> <span class="token punctuation">[</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"-Djava.security.egd=file:/dev/./urandom --spring.config.location=classpath:file:/application.yml"</span><span class="token punctuation">,</span><span class="token string">"-jar"</span><span class="token punctuation">,</span> <span class="token string">"/main-project.jar"</span><span class="token punctuation">]</span></code></pre></li></ul><h2 id="前端代码部署"><a href="#前端代码部署" class="headerlink" title="前端代码部署"></a>前端代码部署</h2><ul><li><p>coding 部署 angular 项目执行流程(使用持续集成中的构建计划执行)</p><ol><li>git 提交代码到后台仓库触发自动部署触发器。</li><li>coding 读取代码仓库的 Jenkinsfile 文件，执行 Jenkinsfile 文件中的部署流程。</li><li>coding 读取代码仓库的代码通过 npm 生成静态文件。</li><li>coding 读取代码仓库的 Dockerfile 文件将静态文件夹包装成 docker 镜像文件(nginx)并上传至制品库。</li><li>coding 通过远端服务器的 docker 拉取制品库中的 docker 镜像文件并运行。</li></ol></li><li><p>托管仓库目录结构<br>  <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/coding_front_end_structure.png"></p></li><li><p>构建计划环境变量</p><table><thead><tr><th>变量名</th><th>默认值</th><th>注释</th></tr></thead><tbody><tr><td>DOCKER_IMAGE_NAME</td><td></td><td>docker 镜像名</td></tr><tr><td>DOCKERFILE_PATH</td><td>Dockerfile</td><td>Dockerfile 文件位置</td></tr><tr><td>DOCKER_BUILD_CONTEXT</td><td>.</td><td>Docker 构建目录</td></tr><tr><td>DOCKER_IMAGE_VERSION</td><td>${GIT_LOCAL_BRANCH:-branch}-${GIT_COMMIT}</td><td>Docker 镜像版本</td></tr><tr><td>DOCKER_REPO_NAME</td><td></td><td>当前项目下的 Docker 制品仓库名</td></tr><tr><td>REMOTE_USER_NAME</td><td></td><td>SSH 用户名</td></tr><tr><td>REMOTE_SSH_PORT</td><td></td><td>SSH 端口</td></tr><tr><td>REMOTE_HOST</td><td></td><td>目标服务地址(IP)</td></tr><tr><td>REMOTE_CRED</td><td></td><td>SSH 登陆凭据</td></tr><tr><td>NGINX_PORT</td><td>80</td><td>nginx 端口</td></tr><tr><td>NGINX_CONFIG</td><td>nginx.conf</td><td>nginx配置文件</td></tr></tbody></table></li><li><p>Jenkinsfile 文件</p><pre class=" language-jenkins"><code class="language-jenkins">  pipeline {      agent any      stages {          stage('检出') {              steps {                  checkout([$class: 'GitSCM',                  branches: [[name: env.GIT_BUILD_REF]],                  userRemoteConfigs: [[                      url: env.GIT_REPO_URL,                      credentialsId: env.CREDENTIALS_ID                  ]]])              }          }          stage('安装依赖') {              steps {                  sh 'npm install'                  echo '安装依赖完成.'              }          }          stage('编译') {              steps {                  sh 'npm run build'                  echo '编译完成.'              }          }          stage('构建 Docker 镜像') {              steps {                  sh "docker build -f ${env.DOCKERFILE_PATH} -t ${env.CODING_DOCKER_IMAGE_NAME}:${env.DOCKER_IMAGE_VERSION} ${env.DOCKER_BUILD_CONTEXT}"              }          }          stage('推送到 CODING Docker 制品库') {              steps {                  script {                      docker.withRegistry(                          "${env.CCI_CURRENT_WEB_PROTOCOL}://${env.CODING_DOCKER_REG_HOST}",                          "${env.CODING_ARTIFACTS_CREDENTIALS_ID}"                      ) {                          docker.image("${CODING_DOCKER_IMAGE_NAME}:${env.DOCKER_IMAGE_VERSION}").push()                      }                  }              }          }          stage('部署到远端服务') {              steps {                  script {                      def remoteConfig = [:]                      remoteConfig.name = "my-remote-server"                      remoteConfig.host = "${env.REMOTE_HOST}"                      remoteConfig.port = "${env.REMOTE_SSH_PORT}".toInteger()                      remoteConfig.allowAnyHosts = true                      withCredentials([                          sshUserPrivateKey(                              credentialsId: "${env.REMOTE_CRED}",                              keyFileVariable: "privateKeyFilePath"                          ),                          usernamePassword(                              credentialsId: "${env.CODING_ARTIFACTS_CREDENTIALS_ID}",                              usernameVariable: 'CODING_DOCKER_REG_USERNAME',                              passwordVariable: 'CODING_DOCKER_REG_PASSWORD'                          )                      ]) {                          // SSH 登陆用户名                          remoteConfig.user = "${env.REMOTE_USER_NAME}"                          // SSH 私钥文件地址                          remoteConfig.identityFile = privateKeyFilePath                          // 请确保远端环境中有 Docker 环境                          sshCommand(                              remote: remoteConfig,                              command: "docker login -u ${CODING_DOCKER_REG_USERNAME} -p ${CODING_DOCKER_REG_PASSWORD} ${CODING_DOCKER_REG_HOST}",                              sudo: true,                          )                          sshCommand(                              remote: remoteConfig,                              command: "docker rm -f ${env.DOCKER_IMAGE_NAME} | true",                              sudo: true,                          )                          // DOCKER_IMAGE_VERSION 中涉及到 GIT_LOCAL_BRANCH / GIT_TAG / GIT_COMMIT 的环境变量的使用                          // 需要在本地完成拼接后，再传入到远端服务器中使用                          DOCKER_IMAGE_URL = sh(                              script: "echo ${CODING_DOCKER_REG_HOST}/${CODING_DOCKER_IMAGE_NAME}:${env.DOCKER_IMAGE_VERSION}",                              returnStdout: true                          )                          sshCommand(                              remote: remoteConfig,                              command: "docker run -d -p ${env.NGINX_PORT}:${env.NGINX_PORT} --name ${env.DOCKER_IMAGE_NAME} ${DOCKER_IMAGE_URL}",                              sudo: true,                          )                          echo "部署成功，请到 http://${env.REMOTE_HOST}:${env.NGINX_PORT} 预览效果"                      }                  }              }          }      }      environment {          CODING_DOCKER_REG_HOST = "${env.CCI_CURRENT_TEAM}-docker.pkg.${env.CCI_CURRENT_DOMAIN}"          CODING_DOCKER_IMAGE_NAME = "${env.PROJECT_NAME.toLowerCase()}/${env.DOCKER_REPO_NAME}/${env.DOCKER_IMAGE_NAME}"      }  }</code></pre></li><li><p>Dockerfile 文件</p><pre class=" language-docker"><code class="language-docker">  <span class="token keyword">FROM</span> nginx<span class="token punctuation">:</span>stable<span class="token punctuation">-</span>alpine<span class="token punctuation">-</span>perl  <span class="token keyword">COPY</span> dist /usr/share/nginx/html  <span class="token keyword">COPY</span> nginx.conf /etc/nginx/nginx.conf  <span class="token keyword">EXPOSE</span> 80  <span class="token keyword">CMD</span> <span class="token punctuation">[</span><span class="token string">"nginx"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"daemon off;"</span><span class="token punctuation">]</span></code></pre></li><li><p>nginx.conf 文件</p><pre class=" language-nginx"><code class="language-nginx">  <span class="token keyword">worker_processes</span>  <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">events</span> <span class="token punctuation">{</span>      <span class="token keyword">worker_connections</span>  <span class="token number">1024</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">http</span> <span class="token punctuation">{</span>      <span class="token keyword">include</span>       <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>      <span class="token keyword">default_type</span>  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>      <span class="token keyword">sendfile</span>        on<span class="token punctuation">;</span>      <span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span><span class="token punctuation">;</span>      <span class="token keyword">add_header</span> Access<span class="token operator">-</span>Control<span class="token operator">-</span><span class="token keyword">Allow</span><span class="token operator">-</span>Origin <span class="token operator">*</span><span class="token punctuation">;</span>      <span class="token keyword">add_header</span> Access<span class="token operator">-</span>Control<span class="token operator">-</span><span class="token keyword">Allow</span><span class="token operator">-</span>Headers X<span class="token operator">-</span>Requested<span class="token operator">-</span>With<span class="token punctuation">;</span>      <span class="token keyword">add_header</span> Access<span class="token operator">-</span>Control<span class="token operator">-</span><span class="token keyword">Allow</span><span class="token operator">-</span>Methods GET<span class="token punctuation">,</span>POST<span class="token punctuation">,</span>DELETE<span class="token punctuation">,</span>PUT<span class="token punctuation">,</span>OPTIONS<span class="token punctuation">;</span>      <span class="token keyword">server</span> <span class="token punctuation">{</span>          <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>          <span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true"># angular-cos 是 angular 的项目名称</span>          <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>              <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token operator">/</span>angular<span class="token operator">-</span>cos<span class="token punctuation">;</span>              <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true"># 此处 engineering 是 springboot 项目的 context-path 配置，需要注意 proxy_pass 就不需要配置 context-path 的路劲了</span>          <span class="token keyword">location</span> <span class="token operator">/</span>engineering <span class="token punctuation">{</span>              <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">118.31</span><span class="token punctuation">.</span><span class="token number">15.147</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>              <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">;</span>              <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>              <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>              <span class="token keyword">client_max_body_size</span> 100m<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CODING </tag>
            
            <tag> Docker </tag>
            
            <tag> Jenkins </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/posts/bae4ff13/"/>
      <url>/posts/bae4ff13/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Redis 是一个速度非常快的非关系数据库(non-relational database)，它可以存储键与5种不同类型的值之间的映射(mapping)，可以将存储在内存的键值对数据持久化到硬盘，可以使用复制特性来扩展读性能，还可以使用客户端分片来扩展写性能。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th>数据类型</th><th>存储的值</th><th>操作</th></tr></thead><tbody><tr><td>STRING</td><td>可以是字符串、整数或者浮点数。</td><td>对整个字符串或者字符串的其中一部分执行操作；对整数和浮点数执行自增或者自减操作。</td></tr><tr><td>LIST</td><td>一个链表，链表上的每个节点都包含了一个字符串。</td><td>从链表的两端推入或者弹出元素；根据偏移量对链表进行修剪(trim)；读取单个或者多个元素；根据值查找或者移除元素。</td></tr><tr><td>SET</td><td>包含字符串的无序收集器(unordered collection)，并且被包含的每个字符串都是独一无二、各不相同的。</td><td>添加、获取、移除单个元素；检查一个元素是否存在于集合中；计算交集、并集、差集；从集合里面随机获取元素。</td></tr><tr><td>HASH</td><td>包含键值对的无序散列表。</td><td>添加、获取、移除单个键值对；获取所有键值对。</td></tr><tr><td>ZSET(有序集合)</td><td>字符串成员(member)与浮点数分值(score)之间的有序映射，元素的排列顺序由分值的大小决定。</td><td>添加、获取、删除单个元素；根据分值范围(range)或者成员来获取元素。</td></tr></tbody></table><p>常用操作:</p><ol><li>STRING: set、get。</li><li>LIST: rpush、lrange、lindex、lpop。</li><li>SET: sadd、smembers、sismember、srem。</li><li>HASH: hset、hgetall、hdel、hget。</li><li>ZSET: zadd(key, score, value)、zrange([withscores])、zrangebyscore、zrem。</li></ol><blockquote><p>ZSET 显示是按分值从小到大显示。<br>显示方式是顺序存储 value 和 score，比如<code>zadd zset-key 728 member1</code>和<code>zadd zset-key 982 member0</code>:<br>1)member1<br>2)728<br>3)member0<br>4)982</p></blockquote><p><a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">Redis 命令大全</a></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>dictht 是一个散列表结构，使用拉链法解决哈希冲突。</p><p>Redis 的字典 dict 中包含两个哈希表 dictht，这是为了方便进行 rehash 操作。在扩容时，将其中一个 dictht 上的键值对 rehash 到另一个 dictht 上面，完成之后释放空间并交换两个 dictht 的角色。</p><p>rehash 操作不是一次性完成，而是采用渐进方式，这是为了避免一次性执行过多的 rehash 操作给服务器带来过大的负担。采用渐进式 rehash 会导致字典中的数据分散在两个 dictht 上，因此对字典的查找操作也需要到对应的 dictht 去执行。</p><h3 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h3><p>跳跃表是有序集合的底层实现之一，是基于多指针有序链表实现的，可以看成多个有序链表。</p><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/redis-skiplist.png"></p><p><strong>header</strong>: 指向跳跃表头节点。<br><strong>tail</strong>: 指向跳跃表尾节点。<br><strong>level</strong>: 记录跳跃表内层数最大的那个节点的层数(表头节点层数不计算在内)。<br><strong>length</strong>: 记录跳跃表包含节点的数量(表头结点不计算在内)。</p><p>在查找时，从上层指针开始查找，找到对应的区间之后再到下一层去查找。</p><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/redis-skiplist-select.png"></p><p>与红黑树等平衡树相比，跳跃表具有以下优点：</p><ol><li>插入速度非常快速，因为不需要进行旋转等操作来维护平衡性；</li><li>更容易实现；</li><li>支持无锁操作。</li></ol><h2 id="数据淘汰策略"><a href="#数据淘汰策略" class="headerlink" title="数据淘汰策略"></a>数据淘汰策略</h2><p>Redis 具体有6种淘汰策略:</p><table><thead><tr><th>策略</th><th>描述</th></tr></thead><tbody><tr><td>volatile-lru</td><td>从已设置过期时间的数据集中挑选最近最少使用的数据淘汰。</td></tr><tr><td>volatile-ttl</td><td>从已设置过期时间的数据集中挑选将要过期的数据淘汰。</td></tr><tr><td>volatile-random</td><td>从已设置过期时间的数据集中任意选择数据淘汰。</td></tr><tr><td>volatile-lfu</td><td>从已设置过期时间的数据集中将访问频率最少的键值对淘汰。</td></tr><tr><td>allkeys-lru</td><td>从所有数据集中挑选最近最少使用的数据淘汰。</td></tr><tr><td>allkeys-random</td><td>从所有数据集中任意选择数据进行淘汰。</td></tr><tr><td>allkeys-lfu</td><td>从所有数据集中将访问频率最少的键值对淘汰。</td></tr><tr><td>noeviction</td><td>禁止驱逐数据。</td></tr></tbody></table><p>使用 Redis 缓存数据时，为了提高缓存命中率，需要保证缓存数据都是热点数据。可以将内存最大使用量设置为热点数据占用的内存量，然后启用 allkeys-lru 淘汰策略，将最近最少使用的数据淘汰。</p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>Redis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。</p><h3 id="RDB-持久化"><a href="#RDB-持久化" class="headerlink" title="RDB 持久化"></a>RDB 持久化</h3><p>RDB(Redis Database File)模式将某个时间点的所有数据都存放到硬盘上。可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。如果系统发生故障，将会丢失最后一次创建快照之后的数据。如果数据量很大，保存快照的时间会很长。</p><h3 id="AOF-持久化"><a href="#AOF-持久化" class="headerlink" title="AOF 持久化"></a>AOF 持久化</h3><p>AOF(Append Only File)模式将写命令添加到 AOF 文件的末尾。使用 AOF 持久化需要设置同步选项，从而确保写命令同步到磁盘文件上的时机。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：</p><ol><li>always: 每个写命令都同步，会严重减低服务器的性能。</li><li>everysec(推荐): 每秒同步一次，可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响；</li><li>no: 让操作系统来决定何时同步，并不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量。</li></ol><p>随着服务器写请求的增多，AOF 文件会越来越大。Redis 提供了一种将 AOF 重写的特性，能够去除 AOF 文件中的冗余写命令。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>Redis 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来(DISCARD 取消事务，UNWATCH 取消 WATCH 对所有 key 的监控)。</p><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>通过使用 slaveof host port 命令来让一个服务器成为另一个服务器的从服务器。一个从服务器只能有一个主服务器，并且不支持主主复制。</p><p><strong>连接过程</strong>:</p><ol><li>主服务器创建快照文件，发送给从服务器，并在发送期间使用缓冲区记录执行的写命令。快照文件发送完毕之后，开始向从服务器发送存储在缓冲区中的写命令；</li><li>从服务器丢弃所有旧数据，载入主服务器发来的快照文件，之后从服务器开始接受主服务器发来的写命令；</li><li>主服务器每执行一次写命令，就向从服务器发送相同的写命令。</li></ol><p><strong>哨兵</strong>:</p><p>Sentinel(哨兵)可以监听集群中的服务器，并在主服务器进入下线状态时，自动从从服务器中选举出新的主服务器。</p><h2 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h2><p>分片是将数据划分为多个部分的方法，可以将数据存储到多台机器里面，这种方法在解决某些问题时可以获得线性级别的性能提升。</p><p>根据执行分片的位置，可以分为三种分片方式：</p><ol><li>客户端分片: 客户端使用一致性哈希等算法决定键应当分布到哪个节点。</li><li>代理分片: 将客户端请求发送到代理上，由代理转发请求到正确的节点上。</li><li>服务器分片: Redis Cluster。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/posts/c24675b4/"/>
      <url>/posts/c24675b4/</url>
      
        <content type="html"><![CDATA[<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>是 MySQL 默认的事务型存储引擎，只有在需要它不支持的特性时，才考虑使用其它存储引擎。</p><p>实现了四个标准的隔离级别，默认级别是可重复读(REPEATABLE READ)。在可重复读隔离级别下，通过多版本并发控制(MVCC) + Next-Key Locking 防止幻影读。</p><p>主索引是聚簇索引，在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升。</p><p>内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够加快读操作并且自动创建的自适应哈希索引、能够加速插入操作的插入缓冲区等。</p><p>支持真正的在线热备份。其它存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。</p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>设计简单，数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用它。</p><p>提供了大量的特性，包括压缩表、空间数据索引等。</p><p>不支持事务。</p><p>不支持行级锁，只能对整张表加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但在表有读取操作的同时，也可以往表中插入新的记录，这被称为并发插入（CONCURRENT INSERT）。</p><p>可以手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。</p><p>如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机崩溃时会造成索引损坏，需要执行修复操作。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><table><thead><tr><th>数据类型</th><th>存储空间(位)</th></tr></thead><tbody><tr><td>TINYINT</td><td>8</td></tr><tr><td>SMALLINT</td><td>16</td></tr><tr><td>MEDIUMINT</td><td>24</td></tr><tr><td>INT</td><td>32</td></tr><tr><td>BIGINT</td><td>64</td></tr></tbody></table><p>其中 INT(11) 中的数字只是规定了交互工具显示字符的个数，对于存储和计算来说是没有意义的。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>FLOAT 和 DOUBLE 为浮点类型，DECIMAL 为高精度小数类型。CPU 原生支持浮点运算，但是不支持 DECIMAl 类型的计算，因此 DECIMAL 的计算比浮点类型需要更高的代价。</p><p>FLOAT、DOUBLE 和 DECIMAL 都可以指定列宽，例如 DECIMAL(18, 9) 表示总共 18 位，取 9 位存储小数部分，剩下 9 位存储整数部分。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>主要有 CHAR 和 VARCHAR 两种类型，一种是定长的，一种是变长的。</p><p>VARCHAR 这种变长类型能够节省空间，因为只需要存储必要的内容。但是在执行 UPDATE 时可能会使行变得比原来长，当超出一个页所能容纳的大小时，就要执行额外的操作。MyISAM 会将行拆成不同的片段存储，而 InnoDB 则需要分裂页来使行放进页内。</p><p>在进行存储和检索时，会保留 VARCHAR 末尾的空格，而会删除 CHAR 末尾的空格。</p><h3 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h3><p>MySQL 提供了两种相似的日期时间类型：DATETIME 和 TIMESTAMP。</p><p>DATETIME 能够保存从 1000 年到 9999 年的日期和时间，精度为秒，使用 8 字节的存储空间。它与时区无关。默认情况下，MySQL 以一种可排序的、无歧义的格式显示 DATETIME 值，例如“2008-01-16 22:37:08”，这是 ANSI 标准定义的日期和时间表示方法。</p><p>TIMESTAMP 和 UNIX 时间戳相同，保存从 1970 年 1 月 1 日午夜（格林威治时间）以来的秒数，使用 4 个字节，只能表示从 1970 年到 2038 年。它和时区有关。MySQL 提供了 FROM_UNIXTIME() 函数把 UNIX 时间戳转换为日期，并提供了 UNIX_TIMESTAMP() 函数把日期转换为 UNIX 时间戳。</p><p>默认情况下，如果插入时没有指定 TIMESTAMP 列的值，会将这个值设置为当前时间。应该尽量使用 TIMESTAMP，因为它比 DATETIME 空间效率更高。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。</p><p>索引的优点：</p><ol><li>大大减少了服务器需要扫描的数据行数。</li><li>帮助服务器避免进行排序和分组，以及避免创建临时表（B+Tree 索引是有序的，可以用于 ORDER BY 和 GROUP BY 操作。临时表主要是在排序和分组过程中创建，不需要排序和分组，也就不需要创建临时表）。</li><li>将随机 I/O 变为顺序 I/O（B+Tree 索引是有序的，会将相邻的数据都存储在一起）。</li></ol><p>索引的使用条件：</p><ol><li>对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效。</li><li>对于中到大型的表，索引就非常有效。</li><li>对于特大型的表，建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。</li></ol><p>索引的优化：</p><ol><li>独立的列：在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。</li><li>多列索引：在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。</li><li>索引列的顺序：让选择性最强(索引值和记录值的比接近或等于1)的索引列放在前面。</li><li>前缀索引：对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。</li><li>覆盖索引：索引包含所有需要查询的字段的值。其索引通常远小于数据行的大小，只读取索引能大大减少数据访问量。而且可以在内存中仅缓存索引，而数据依赖于操作系统来缓存。</li></ol><h3 id="B-Tree-索引"><a href="#B-Tree-索引" class="headerlink" title="B+ Tree 索引"></a>B+ Tree 索引</h3><p>B+ Tree 索引是大多数 MySQL 存储引擎的默认索引类型。因为不再需要进行全表扫描，只需要对树进行搜索即可，所以查找速度快很多。根据 B+ Tree 的有序性，索引除了用于查找，还可以用于排序和分组。</p><p>可以指定多个列作为索引列，多个索引列共同组成键。适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。如果不是按照索引列的顺序进行查找，则无法使用索引。</p><p>InnoDB 的 B+Tree 索引分为主索引和辅助索引。主索引的叶子节点 data 域记录着完整的数据记录，这种索引方式被称为聚簇索引。因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。辅助索引的叶子节点的 data 域记录着主键的值，因此在使用辅助索引进行查找时，需要先查找到主键值，然后再到主索引中进行查找。</p><h3 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h3><p>哈希索引能以 O(1) 时间进行查找，但是失去了有序性，且无法用于排序与分组，只能进行精确查找，无法用于部分查找和范围查找。</p><p>InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</p><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p>InnoDB 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。查找条件使用 MATCH AGAINST，而不是普通的 WHERE。全文索引使用倒排索引(通过表记录关键字在第几页第几行)实现，它记录着关键词到其所在文档的映射。</p><h3 id="空间索引"><a href="#空间索引" class="headerlink" title="空间索引"></a>空间索引</h3><p>MyISAM 存储引擎支持空间数据索引(R-Tree)，可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。但必须使用 GIS 相关的函数来维护数据。</p><h2 id="查询性能优化"><a href="#查询性能优化" class="headerlink" title="查询性能优化"></a>查询性能优化</h2><h3 id="优化数据访问"><a href="#优化数据访问" class="headerlink" title="优化数据访问"></a>优化数据访问</h3><ol><li>减少请求的数据量：只返回必要的列(不使用 SELECT *)；只返回必要的行(使用 LIMIT)；缓存重复查询的数据。</li><li>减少服务器端扫描的行数：最有效的方式是使用索引来覆盖查询。</li></ol><h3 id="重构查询方式"><a href="#重构查询方式" class="headerlink" title="重构查询方式"></a>重构查询方式</h3><p>一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。可以通过将一个大连接查询分解成对每一个表进行一次单表查询，然后在应用程序中进行关联。</p><h2 id="切分"><a href="#切分" class="headerlink" title="切分"></a>切分</h2><h3 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h3><p>水平切分(Sharding)将同一个表中的记录拆分到多个结构相同的表中。当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力。</p><p>Sharding 策略：</p><ol><li>哈希取模：hash(key) % N；</li><li>范围：可以是 ID 范围也可以是时间范围；</li><li>映射表：使用单独的一个数据库来存储映射关系。</li></ol><p>Sharding 存在的问题：</p><ol><li>事务问题：使用分布式事务来解决，比如 XA 接口。</li><li>连接：可以将原来的连接分解成多个单表查询，然后在用户程序中进行连接。</li><li>ID 唯一性：使用全局唯一 ID(GUID)；为每个分片指定一个 ID 范围；分布式 ID 生成器。</li></ol><h3 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h3><p>垂直切分是将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。</p><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>主要涉及三个线程：binlog 线程、I/O 线程和 SQL 线程。</p><ul><li>binlog 线程 ：负责将主服务器上的数据更改写入二进制日志(Binary log)中。</li><li>I/O 线程 ：负责从主服务器上读取二进制日志，并写入从服务器的中继日志(Relay log)。</li><li>SQL 线程 ：负责读取中继日志，解析出主服务器已经执行的数据更改并在从服务器中重放(Replay)。</li></ul><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。读写分离能提高性能的原因在于：</p><ol><li>主从服务器负责各自的读和写，极大程度缓解了锁的争用；</li><li>从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；</li><li>增加冗余，提高可用性。</li></ol><p>读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 基础</title>
      <link href="/posts/f416b295/"/>
      <url>/posts/f416b295/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>结构化查询语言(Structured Query Language)简称 SQL，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。</p><p>SQL 中主键的值不允许修改，也不允许复用，即不能将已经删除的主键值赋给新数据行的主键。</p><p>SQL 支持以下三种注释：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 注释1</span><span class="token comment" spellcheck="true">-- 注释2</span><span class="token comment" spellcheck="true">/* 注释3   注释4 */</span></code></pre><p>数据库创建与使用：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> test<span class="token punctuation">;</span><span class="token keyword">USE</span> test<span class="token punctuation">;</span></code></pre><h2 id="建表与改表"><a href="#建表与改表" class="headerlink" title="建表与改表"></a>建表与改表</h2><ol><li><p>创建表</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> mytable <span class="token punctuation">(</span> <span class="token comment" spellcheck="true"># int 类型，不为空，自增</span> id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># int 类型，不可为空，默认值为 1</span> col1 <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 变长字符串类型，最长为 45 个字符，可以为空</span> col2 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 日期类型，可为空</span> col3 <span class="token keyword">DATE</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 设置主键为 id</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>添加列</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> mytable <span class="token keyword">ADD</span> col4 CHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>删除列</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> mytable <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> col4<span class="token punctuation">;</span></code></pre></li><li><p>删除表</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> mytable<span class="token punctuation">;</span></code></pre></li></ol><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><ol><li><p>增加(Create)</p><pre class=" language-sql"><code class="language-sql"> <span class="token comment" spellcheck="true"># 普通插入</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mytable<span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 插入检索出来的数据</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mytable1<span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> col1<span class="token punctuation">,</span> col2 <span class="token keyword">FROM</span> mytable2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 将一个表的内容插入到一个新表</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> newtable <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytable<span class="token punctuation">;</span></code></pre></li><li><p>读取(Retrieve)</p><pre class=" language-sql"><code class="language-sql"> <span class="token comment" spellcheck="true"># DISTINCT 相同值只会出现一次。它作用于所有列，也就是说所有列的值都相同才算相同。</span> <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> col1<span class="token punctuation">,</span> col2 <span class="token keyword">FROM</span> mytable<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># LIMIT 限制返回的行数。一个参数返回前 x 行，两个参数返回从 x 开始共 y 行。</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytable <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre></li><li><p>更新(Update)</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">UPDATE</span> mytable <span class="token keyword">SET</span> col <span class="token operator">=</span> val <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></li><li><p>删除(Delete)</p><pre class=" language-sql"><code class="language-sql"> <span class="token comment" spellcheck="true"># 删除指定行数据</span> <span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> mytable <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 清空表即删除所有行数据</span> <span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> mytable<span class="token punctuation">;</span></code></pre></li></ol><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>可以按多个列进行排序，并且为每个列指定不同的排序方式(ASC：升序，默认；DESC：降序)。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytable<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> col1 <span class="token keyword">DESC</span><span class="token punctuation">,</span> col2 <span class="token keyword">ASC</span><span class="token punctuation">;</span></code></pre><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>可以使用 WHERE 关键字过滤数据。例如：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytable<span class="token keyword">WHERE</span> col <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></code></pre><p>其中 WHERE 可用的操作符有：</p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>&lt;= 或 !&gt;</td><td>小于等于</td></tr><tr><td>&gt;= 或 !&lt;</td><td>大于等于</td></tr><tr><td>BETWEEN</td><td>在两个值之间</td></tr><tr><td>IS NULL</td><td>为 NULL 值</td></tr></tbody></table><p>需要注意的是NULL 与 0、空字符串都不同。</p><p>AND 和 OR 用于连接多个过滤条件。优先处理 AND，当一个过滤表达式涉及到多个 AND 和 OR 时，可以使用 () 来决定优先级，使得优先级关系更清晰。</p><p>IN 操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。</p><p>NOT 操作符用于否定一个条件。</p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>通配符也是用在过滤语句中，但它只能用于文本字段。</p><ol><li>% 匹配大于等于 0 个任意字符；</li><li>_ 匹配一个任意字符；</li><li><input disabled="" type="checkbox"> 可以匹配集合内的字符，例如 [ab] 将匹配字符 a 或者 b。还可以使用脱字符 ^ 对其进行否定，也就是不匹配集合内的字符。</li></ol><p>需要使用 LIKE 关键字来进行通配符匹配。但是不要滥用通配符，通配符位于开头处匹配会非常慢。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytable<span class="token keyword">WHERE</span> col <span class="token operator">LIKE</span> <span class="token string">'[^AB]%'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 不以 A 和 B 开头的任意文本</span></code></pre><h2 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h2><p>在数据库服务器上完成数据的转换和格式化的工作往往比客户端上快得多，并且转换和格式化后的数据量更少的话可以减少网络通信量。例如：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> col1 <span class="token operator">*</span> col2 <span class="token keyword">AS</span> alias <span class="token keyword">FROM</span> mytable<span class="token punctuation">;</span></code></pre><p>CONCAT() 用于连接两个字段。许多数据库会使用空格把一个值填充为列宽，因此连接的结果会出现一些不必要的空格，使用 TRIM() 可以去除首尾空格。例如：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span>TRIM<span class="token punctuation">(</span>col1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span> TRIM<span class="token punctuation">(</span>col2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> concat_col <span class="token keyword">FROM</span> mytable<span class="token punctuation">;</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>各个 DBMS 的函数都是不相同的，因此不可移植，以下主要是 MySQL 的函数。</p><h3 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的平均值(会忽略 NULL 行)</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列值之和</td></tr></tbody></table><p>使用 DISTINCT 可以汇总不同的值。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> col1<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_col <span class="token keyword">FROM</span> mytable<span class="token punctuation">;</span></code></pre><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>LEFT()</td><td>从左边开始截取字符串，格式为(字符串, 长度)</td></tr><tr><td>RIGHT()</td><td>从右边开始截取字符串</td></tr><tr><td>SUBSTRING()</td><td>截取特定长度的字符串，格式为(字符串, 开始截取位置)或(字符串, 开始截取位置, 长度)</td></tr><tr><td>LOWER()</td><td>转换为小写字符</td></tr><tr><td>UPPER()</td><td>转换为大写字符</td></tr><tr><td>LTRIM()</td><td>去除左边的空格</td></tr><tr><td>RTRIM()</td><td>去除右边的空格</td></tr><tr><td>LENGTH()</td><td>长度</td></tr><tr><td>SOUNDEX()</td><td>转换为语音值</td></tr></tbody></table><p>SOUNDEX() 可以将一个字符串转换为描述其语音表示的字母数字模式。例如查找发音类似于 apple 的数据行：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytable<span class="token keyword">WHERE</span> SOUNDEX<span class="token punctuation">(</span>col1<span class="token punctuation">)</span> <span class="token operator">=</span> SOUNDEX<span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">)</span></code></pre><h3 id="日期和时间处理"><a href="#日期和时间处理" class="headerlink" title="日期和时间处理"></a>日期和时间处理</h3><p>日期格式：YYYY-MM-DD；时间格式：HH:MM:SS</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>ADDDATE()</td><td>增加一个日期（天、周等）</td></tr><tr><td>ADDTIME()</td><td>增加一个时间（时、分等）</td></tr><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>DATE()</td><td>返回日期时间的日期部分</td></tr><tr><td>DATEDIFF()</td><td>计算两个日期之差</td></tr><tr><td>DATE_ADD()</td><td>高度灵活的日期运算函数</td></tr><tr><td>DATE_FORMAT()</td><td>返回一个格式化的日期或时间串</td></tr><tr><td>DAY()</td><td>返回一个日期的天数部分</td></tr><tr><td>DAYOFWEEK()</td><td>对于一个日期，返回对应的星期几</td></tr><tr><td>HOUR()</td><td>返回一个时间的小时部分</td></tr><tr><td>MINUTE()</td><td>返回一个时间的分钟部分</td></tr><tr><td>MONTH()</td><td>返回一个日期的月份部分</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>SECOND()</td><td>返回一个时间的秒部分</td></tr><tr><td>TIME()</td><td>返回一个日期时间的时间部分</td></tr><tr><td>YEAR()</td><td>返回一个日期的年份部分</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 查询当前日期+时间</span><span class="token keyword">SELECT</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="数值处理"><a href="#数值处理" class="headerlink" title="数值处理"></a>数值处理</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SIN()</td><td>正弦</td></tr><tr><td>COS()</td><td>余弦</td></tr><tr><td>TAN()</td><td>正切</td></tr><tr><td>ABS()</td><td>绝对值</td></tr><tr><td>SQRT()</td><td>平方根</td></tr><tr><td>MOD()</td><td>余数</td></tr><tr><td>EXP()</td><td>指数</td></tr><tr><td>PI()</td><td>圆周率</td></tr><tr><td>RAND()</td><td>随机数</td></tr></tbody></table><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>把具有相同的数据值的行放在同一组中。可以对同一分组数据使用汇总函数进行处理。指定的分组字段除了能按该字段进行分组，也会自动按该字段进行排序。分组规定：</p><ol><li>GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；</li><li>除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出(除了汇总字段)；</li><li>NULL 的行会单独分为一组；</li><li>大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> col<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num <span class="token keyword">FROM</span> mytable<span class="token keyword">WHERE</span> col <span class="token operator">></span> <span class="token number">2</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> col <span class="token keyword">HAVING</span> num <span class="token operator">>=</span> <span class="token number">2</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> num<span class="token punctuation">;</span></code></pre><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询中只能返回一个字段的数据。可以将子查询的结果作为 WHRER 语句的过滤条件，例如：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytable<span class="token keyword">WHERE</span> col <span class="token operator">IN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> col1 <span class="token keyword">FROM</span> mytable1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON。连接可以替换子查询，并且比子查询的效率一般会更快。</p><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>内连接又称等值连接，使用 INNER JOIN 关键字。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> A<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">,</span> B<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token keyword">FROM</span> tablea <span class="token keyword">AS</span> A<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> tableb <span class="token keyword">AS</span> B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">key</span><span class="token punctuation">;</span></code></pre><p>可以不明确使用 INNER JOIN，而使用普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> A<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">,</span> B<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token keyword">FROM</span> tablea <span class="token keyword">AS</span> A<span class="token punctuation">,</span> tableb <span class="token keyword">AS</span> B<span class="token keyword">WHERE</span> A<span class="token punctuation">.</span><span class="token keyword">key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">key</span><span class="token punctuation">;</span></code></pre><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>自连接可以看成内连接的一种，只是连接的表是自身而已。一张员工表，包含员工姓名和员工所属部门，要找出与 Jim 处在同一部门的所有员工姓名。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 子查询版本</span><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> employee<span class="token keyword">WHERE</span> department <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> department <span class="token keyword">FROM</span> employee    <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">"Jim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 自连接版本</span><span class="token keyword">SELECT</span> <span class="token number">e1</span><span class="token punctuation">.</span>name <span class="token keyword">FROM</span> employee <span class="token keyword">AS</span> <span class="token number">e1</span><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> employee <span class="token keyword">AS</span> <span class="token number">e2</span> <span class="token keyword">ON</span> <span class="token number">e1</span><span class="token punctuation">.</span>department <span class="token operator">=</span> <span class="token number">e2</span><span class="token punctuation">.</span>department <span class="token operator">AND</span> <span class="token number">e2</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Jim"</span><span class="token punctuation">;</span></code></pre><h3 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h3><p>自然连接是把同名列通过等值测试连接起来的，同名列可以有多个。内连接和自然连接的区别：内连接提供连接的列，而自然连接自动连接所有同名列。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> A<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">,</span> B<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token keyword">FROM</span> tablea <span class="token keyword">AS</span> A<span class="token keyword">NATURAL</span> <span class="token keyword">JOIN</span> tableb <span class="token keyword">AS</span> B<span class="token punctuation">;</span></code></pre><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>外连接保留了没有关联的那些行。分为左外连接(LEFT OUTER JOIN 或 LEFT JOIN)，右外连接(RIGHT OUTER JOIN 或 RIGHT JOIN)以及全外连接(FULL OUTER JOIN 或 FULL JOIN)，左外连接就是保留左表没有关联的行。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> Customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> Orders<span class="token punctuation">.</span>order_num <span class="token keyword">FROM</span> Customers<span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> Orders <span class="token keyword">ON</span> Customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> Orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span></code></pre><h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><p>使用 UNION 来组合两个查询，如果第一个查询返回 M 行，第二个查询返回 N 行，那么组合查询的结果一般为 M+N 行。需要注意的是：</p><ol><li>每个查询必须包含相同的列、表达式和聚集函数。</li><li>默认会去除相同行，如果需要保留相同行，使用 UNION ALL。</li><li>只能包含一个 ORDER BY 子句，并且必须位于语句的最后。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> col <span class="token keyword">FROM</span> mytable<span class="token keyword">WHERE</span> col <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">UNION</span><span class="token keyword">SELECT</span> col <span class="token keyword">FROM</span> mytable<span class="token keyword">WHERE</span> col <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span></code></pre><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。对视图的操作和对普通表的操作一样。视图具有如下好处：</p><ol><li>简化复杂的 SQL 操作，比如复杂的连接；</li><li>只使用实际表的一部分数据；</li><li>通过只给用户访问视图的权限，保证数据的安全性；</li><li>更改数据格式和表示。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> myview <span class="token keyword">AS</span><span class="token keyword">SELECT</span> Concat<span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">)</span> <span class="token keyword">AS</span> concat_col<span class="token punctuation">,</span> col3<span class="token operator">*</span>col4 <span class="token keyword">AS</span> compute_col <span class="token keyword">FROM</span> mytable<span class="token keyword">WHERE</span> col5 <span class="token operator">=</span> val<span class="token punctuation">;</span></code></pre><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>存储过程可以看成是对一系列 SQL 操作的批处理。使用存储过程的好处：</p><ol><li>代码封装，保证了一定的安全性；</li><li>代码复用；</li><li>由于是预先编译，因此具有很高的性能。</li></ol><p>需要注意：</p><ol><li>包含 IN、存；OUT 和 INOUT 三种参数。</li><li>给变量赋值都需要用 SELECT INTO 语句。</li><li>每次只能给一个变量赋值，不支持集合的操作。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 声明语句结束符</span><span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true"># IN 存；OUT 取；INOUT 存取</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> myprocedure<span class="token punctuation">(</span><span class="token keyword">OUT</span> ret <span class="token keyword">int</span><span class="token punctuation">)</span>    <span class="token keyword">BEGIN</span>        <span class="token comment" spellcheck="true"># 声明变量 y</span>        <span class="token keyword">DECLARE</span> y <span class="token keyword">int</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 存入 y</span>        <span class="token keyword">SELECT</span> <span class="token function">sum</span><span class="token punctuation">(</span>col1<span class="token punctuation">)</span> <span class="token keyword">FROM</span> mytable <span class="token keyword">INTO</span> y<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 取出 y 计算存入 ret</span>        <span class="token keyword">SELECT</span> y<span class="token operator">*</span>y <span class="token keyword">INTO</span> ret<span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 调用存储过程</span><span class="token keyword">call</span> myprocedure<span class="token punctuation">(</span><span class="token variable">@ret</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 取参</span><span class="token keyword">select</span> <span class="token variable">@ret</span><span class="token punctuation">;</span></code></pre><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><p>在存储过程中使用游标可以对一个结果集进行移动遍历。游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。使用游标的四个步骤：</p><ol><li>声明游标，这个过程没有实际检索出数据；</li><li>打开游标；</li><li>取出数据；</li><li>关闭游标；</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> myprocedure<span class="token punctuation">(</span><span class="token keyword">OUT</span> ret <span class="token keyword">int</span><span class="token punctuation">)</span>    <span class="token keyword">BEGIN</span>        <span class="token comment" spellcheck="true"># 结束标记 done</span>        <span class="token keyword">DECLARE</span> done <span class="token keyword">boolean</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">DECLARE</span> mycursor <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> <span class="token keyword">SELECT</span> col1 <span class="token keyword">FROM</span> mytable<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 将结束标志绑定到游标，定义一个 continue handler，当 sqlstate '02000' 这个条件出现时，会执行 set done = 1</span>        <span class="token keyword">DECLARE</span> <span class="token keyword">CONTINUE</span> <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span> SQLSTATE <span class="token string">'02000'</span> <span class="token keyword">SET</span> done <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 打开游标</span>        <span class="token keyword">OPEN</span> mycursor<span class="token punctuation">;</span>        REPEAT            <span class="token comment" spellcheck="true"># 用指定的打开游标读取下一行</span>            <span class="token keyword">FETCH</span> mycursor <span class="token keyword">INTO</span> ret<span class="token punctuation">;</span>            <span class="token keyword">SELECT</span> ret<span class="token punctuation">;</span>        UNTIL done <span class="token keyword">END</span> REPEAT<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 关闭游标</span>        <span class="token keyword">CLOSE</span> mycursor<span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器会在某个表执行以下语句时而自动执行：DELETE、INSERT、UPDATE。</p><p>触发器必须指定在语句执行之前还是之后自动执行，之前执行使用 BEFORE 关键字，之后执行使用 AFTER 关键字。BEFORE 用于数据验证和净化，AFTER 用于审计跟踪，将修改记录到另外一张表中。</p><p>INSERT 触发器包含一个名为 NEW 的虚拟表。例如：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> mytrigger <span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> mytable<span class="token keyword">FOR EACH ROW</span> <span class="token keyword">SELECT</span> NEW<span class="token punctuation">.</span>col <span class="token keyword">INTO</span> <span class="token variable">@result</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 获取结果</span><span class="token keyword">SELECT</span> <span class="token variable">@result</span><span class="token punctuation">;</span></code></pre><p>DELETE 触发器包含一个名为 OLD 的虚拟表，并且是只读的。</p><p>UPDATE 触发器包含一个名为 NEW 和一个名为 OLD 的虚拟表，其中 NEW 是可以被修改的，而 OLD 是只读的。</p><p>MySQL 不允许在触发器中使用 CALL 语句，也就是不能调用存储过程。</p><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><ol><li><p>不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CREATE 和 DROP 语句。</p></li><li><p>MySQL 的事务提交默认是隐式提交，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。</p></li><li><p>设置 autocommit 为 0 可以取消自动提交；autocommit 标记是针对每个连接而不是针对服务器的。</p></li><li><p>如果没有设置保留点，ROLLBACK 会回退到 START TRANSACTION 语句处；如果设置了保留点，并且在 ROLLBACK 中指定该保留点，则会回退到该保留点。例如：</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> <span class="token comment" spellcheck="true">// ...</span> <span class="token keyword">SAVEPOINT</span> delete1 <span class="token comment" spellcheck="true">// ...</span> <span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> delete1 <span class="token comment" spellcheck="true">// ...</span> <span class="token keyword">COMMIT</span></code></pre></li></ol><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>基本术语：</p><ol><li>字符集为字母和符号的集合；</li><li>编码为某个字符集成员的内部表示；</li><li>校对字符指定如何比较，主要用于排序和分组。</li></ol><p>除了给表指定字符集和校对外，也可以给列指定：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> mytable <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true"># 指定行</span>    col <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> latin <span class="token keyword">COLLATE</span> latin1_general_ci<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 整个表</span><span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER SET</span> hebrew <span class="token keyword">COLLATE</span> hebrew_general_ci<span class="token punctuation">;</span></code></pre><p>可以在排序、分组时指定校对：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytable<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> col <span class="token keyword">COLLATE</span> latin1_general_ci<span class="token punctuation">;</span></code></pre><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p>MySQL 的账户信息保存在 mysql 这个数据库中。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">USE</span> mysql<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token keyword">user</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span></code></pre><ol><li><p>创建账号</p><pre class=" language-sql"><code class="language-sql"> <span class="token comment" spellcheck="true"># 新创建的账户没有任何权限。</span> <span class="token keyword">CREATE</span> <span class="token keyword">USER</span> myuser IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'mypassword'</span><span class="token punctuation">;</span></code></pre></li><li><p>修改账户名</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">RENAME</span> <span class="token keyword">USER</span> myuser <span class="token keyword">TO</span> newuser<span class="token punctuation">;</span></code></pre></li><li><p>删除账户</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">DROP</span> <span class="token keyword">USER</span> myuser<span class="token punctuation">;</span></code></pre></li><li><p>查看权限</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> myuser<span class="token punctuation">;</span></code></pre></li><li><p>授予权限<br> 账户用 username@host 的形式定义，username@% 使用的是默认主机名。</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> mydatabase<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> myuser<span class="token punctuation">;</span></code></pre></li><li><p>删除权限<br> GRANT(授予) 和 REVOKE(撤回) 可在几个层次上控制访问权限：</p><ul><li><p>整个服务器，使用 GRANT ALL 和 REVOKE ALL；</p></li><li><p>整个数据库，使用 ON database.*；</p><pre class=" language-sql"><code class="language-sql">  <span class="token keyword">REVOKE</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> mydatabase<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> myuser<span class="token punctuation">;</span></code></pre></li><li><p>特定的表，使用 ON database.table；</p></li><li><p>特定的列；</p></li><li><p>特定的存储过程。</p></li></ul></li><li><p>更改密码<br> 必须使用 Password() 函数进行加密。</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">SET</span> PASSWROD <span class="token keyword">FOR</span> myuser <span class="token operator">=</span> Password<span class="token punctuation">(</span><span class="token string">'new_password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概念</title>
      <link href="/posts/4e003d05/"/>
      <url>/posts/4e003d05/</url>
      
        <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是指逻辑上满足 ACID 的一组操作，要么都执行，要么都不执行。</p><ol><li>原子性(Atomicity)：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用。通过回滚可以使修改的操作失效，回滚可以用回滚日志(Undo Log)来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</li><li>一致性(Consistency)：执行事务前后，数据保持一致，所有事务对同一个数据的读取结果都是相同的。</li><li>隔离性(Isolation)：一个事务所做的修改在最终提交以前，对其它事务是不可见的。</li><li>持久性(Durability)：一个事务被提交之后，它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。系统发生奔溃可以用重做日志(Redo Log)进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。</li></ol><h2 id="并发一致性问题"><a href="#并发一致性问题" class="headerlink" title="并发一致性问题"></a>并发一致性问题</h2><p>在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。并发控制可以可以满足一致性，它通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂，所以数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。</p><ol><li>丢失修改：两个事务同时读取修改同一数据，后提交事务的修改结果覆盖了先提交事务的修改结果，导致先提交事务的修改被丢失。</li><li>读脏数据：当一个事务读取到另一个事务正在进行修改却还没有提交到数据库中的数据便称为脏读，而读取到的数据被称为脏数据，依据脏数据所做的操作可能是不对的(例如可能回滚了)。</li><li>不可重复读：事务 A 读取了数据还未进行提交操作时，事务 B 也读取了该数据并对其数据进行了修改、提交操作，导致事务两次读取同一数据其结果却不一样。常发生于 update 操作之上。</li><li>幻影读：事务 A 读取了数据还未进行提交操作时，事务 B 也读取了该数据并对其数据进行了插入、提交操作，导致事务 A 再次读取该数据时发现多出了一些不存在的记录。常发生于 insert 操作之上。</li></ol><h2 id="封锁"><a href="#封锁" class="headerlink" title="封锁"></a>封锁</h2><h3 id="封锁粒度"><a href="#封锁粒度" class="headerlink" title="封锁粒度"></a>封锁粒度</h3><p>MySQL 中提供了三种封锁粒度：行级锁定(row-level)、表级锁定(table-level)和页级锁定(page-level)。封锁颗粒度越大，发生锁定资源争用的概率越高，并发程度降低；封锁颗粒度越小，发生锁定资源争用的概率越小，并发程度提升，但是会带来额外开销(锁操作及实现算法复杂)。</p><ul><li>行级锁定：行级锁定是 MySQL 各存储引擎中最小颗粒度的锁定机制。由于行级锁定只锁定需要修改的那部分数据，增大了锁操作开销且很容易发生死锁，使用行级锁定的主要是    InnoDB 存储引擎。</li><li>表级锁定：表级锁定是 MySQL 各存储引擎中最大颗粒度的锁定机制。由于表级锁定一次会将整个表锁定，所以可以很好的避免死锁问题。使用表级锁定的主要是 MyISAM、MEMORY 和 CSV 等一些非事务性存储引擎。</li><li>页级锁定：开销和加锁时间界于表级锁定和行级锁定之间，会出现死锁，且锁定粒度也界于表级锁定和行级锁定之间，并发程度一般。使用页级锁定的主要是 BerkeleyDB 存储引擎。</li></ul><h3 id="封锁类型"><a href="#封锁类型" class="headerlink" title="封锁类型"></a>封锁类型</h3><ol><li>读写锁：<ul><li>互斥锁(Exclusive)：简写为 X 锁，又称写锁。一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。</li><li>共享锁(Shared)：简写为 S 锁，又称读锁。一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。</li></ul></li><li>意向锁(Intention Locks)：意向锁可以更容易地支持多粒度封锁。意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有如下两个规定：<ul><li>意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。</li><li>一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。<blockquote><p>需要注意的是任意 IS/IX 锁之间都是兼容的，因为它们只表示想要对表加锁，而不是真正加锁。且表级的 IS 锁和行级的 S 锁兼容。</p></blockquote></li></ul></li></ol><h3 id="封锁协议"><a href="#封锁协议" class="headerlink" title="封锁协议"></a>封锁协议</h3><ol><li>三级封锁协议：<ul><li>一级封锁协议：事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。可以解决丢失修改问题。</li><li>二级封锁协议：在一级封锁协议的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。可以解决读脏数据问题(修改时加 X 锁，此时就不能上 S 锁，也就是说修改时不能读取)。</li><li>三级封锁协议：在二级封锁协议的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。可以解决不可重复读的问题(读取时其它事务不能对 A 加 X 锁，避免了在读期间数据发生改变)。</li></ul></li><li>两段锁协议：加锁和解锁分为两个阶段进行。可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。串行执行的事务互不干扰，不会出现并发一致性问题。事务遵循两段锁协议是保证可串行化调度的充分条件，但不是必要条件。</li></ol><h3 id="MySQL-隐式与显示锁定"><a href="#MySQL-隐式与显示锁定" class="headerlink" title="MySQL 隐式与显示锁定"></a>MySQL 隐式与显示锁定</h3><ol><li>MySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。</li><li>InnoDB 也可以使用特定的语句进行显示锁定。</li></ol><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><ol><li>读未提交(Read uncommitted)：一个事务可以读取另一个未提交事务的数据。没有解决任何并发一致性问题。</li><li>读已提交(Read committed)：一个事务要等另一个事务提交后才能读取数据。解决了脏读的问题。</li><li>可重复读(Repeatable read)：在事务开始读取数据时不再允许修改操作。解决了丢失修改、不可重复读和脏读的问题。</li><li>序列化(Serializable)：也称为可串行化，是最高的事务隔离级别，在该级别下事务串行化顺序执行。解决了所有并发一致性问题。</li></ol><h2 id="多版本并发控制"><a href="#多版本并发控制" class="headerlink" title="多版本并发控制"></a>多版本并发控制</h2><p>多版本并发控制(Multi-Version Concurrency Control, MVCC)是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现读已提交和可重复读这两种隔离级别(读未提交太简单不需要使用 MVCC，序列化太复杂单独使用 MVCC 不能解决)。MVCC 利用了多版本的思想，写操作更新最新的版本快照，而读操作去读旧版本快照，没有互斥关系，这一点和 CopyOnWrite 类似。在 MVCC 中事务的修改操作(DELETE、INSERT、UPDATE)会为数据行新增一个版本快照，且只能读取已经提交的快照。</p><ol><li>快照读：MVCC 的 SELECT 操作是快照中的数据，不需要进行加锁操作。</li><li>当前读：MVCC 其它会对数据库进行修改的操作(INSERT、UPDATE、DELETE)需要进行加锁操作，从而读取最新的数据。</li></ol><h2 id="Next-Key-Locks"><a href="#Next-Key-Locks" class="headerlink" title="Next-Key Locks"></a>Next-Key Locks</h2><p>Next-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现，在可重复读(REPEATABLE READ)隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。通过索引锁(Record Locks)和间隙锁(Gap Locks)锁定一个记录上的索引并锁定索引之间的间隙(锁定前开后闭区间)。例如1、3和5，锁定间隙为(-∞, 1]、(1, 3]和(3, 5]。</p><h2 id="关系数据库设计理论"><a href="#关系数据库设计理论" class="headerlink" title="关系数据库设计理论"></a>关系数据库设计理论</h2><h3 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h3><ol><li>A-&gt;B 表示 A 决定 B 或 B 依赖于 A。</li><li>{A1, A2, ……, An} 是关系的一个或多个属性的集合且该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为键码。</li><li>A-&gt;B，若有A 的真子集 A’，使得 A’-&gt; B，那么 A-&gt;B 就是部分函数依赖，否则就是完全函数依赖。</li><li>若 A-&gt;B, B-&gt;C 则 A-&gt;C 是一个传递函数依赖。</li></ol><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><p>不符合范式的关系，会产生很多异常，主要有四种异常：冗余数据、修改异常、删除异常和插入异常。而范式理论是为了解决以上提到的四种异常。高级别范式的依赖于低级别的范式，1NF 是最低级别的范式。</p><ol><li>第一范式 (1NF)：属性不可分。</li><li>第二范式 (2NF)：每个非主属性完全函数依赖于键码，可以通过分解来满足。</li><li>第三范式 (3NF)：非主属性不传递函数依赖于键码，可以通过分解来满足。</li></ol><h2 id="E-R-图"><a href="#E-R-图" class="headerlink" title="E-R 图"></a>E-R 图</h2><p>实体-联系图(Entity Relationship Diagram)用来进行关系型数据库系统的概念设计，它由三部分组成：实体(方框)、属性(菱形)和联系(线段)。表示方法如下：</p><ol><li>出现多次的关系：一个实体在联系中出现几次，就要用几条线段连接。</li><li>联系的多向性：例如虽然老师可以开设多门课，并且可以教授多名学生，但是对于特定的学生和课程，只有一个老师教授，这就构成了一个三元联系。</li><li>子类：用一个三角形和两条线来连接类和子类，与子类有关的属性和联系都连到子类上，而与父类和子类都有关的连到父类上。</li><li>一对一关系：画两个带箭头的线段。</li><li>一对多关系：如果 A 到 B 是一对多关系，那么画个带箭头的线段指向 B。</li><li>多对多关系：画两个不带箭头的线段。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机操作系统</title>
      <link href="/posts/f55dd124/"/>
      <url>/posts/f55dd124/</url>
      
        <content type="html"><![CDATA[<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h3><p>并发：两个或多个事件在同一时间间隔发生。例如引入进程和线程使得程序并发运行。<br>并行：两个或多个事件在同一时刻发生，需要硬件支持。例如多核处理器和分布式计算系统可以并行运行。</p><h3 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h3><p>共享是指系统中的资源可以被多个并发进程共同使用。共享分为互斥共享和同时共享：</p><ul><li>互斥共享：在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问。</li><li>同时共享：能被多个进程同时访问。</li></ul><h3 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h3><p>虚拟技术把一个物理实体转换为多个逻辑实体。常用虚拟技术有时分复用技术和空分复用技术：</p><ul><li>时分复用技术：多个进程并发执行即每个进程轮流占用同一个处理器，每次只执行一小个时间片并快速切换。</li><li>空分复用技术：虚拟内存让应用程序觉得自己在使用一个连续完整的地址空间，每个进程都有各自的地址空间。使用虚拟内存时，地址空间的页会被映射至物理内存中(看起来连续实际上可能不连续)。根据程序的局部性，虚拟内存只会调用所需的程序段进入内存，然后通过页面置换算法不断替换所需程序段进入内存执行。</li></ul><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>异步性是指进程以不可预知的速度向前推进。进程是并发执行的，并且因为资源的问题不同进程之间存在着不同的相互制约关系，内存中的每个进程何时执行，何时暂停，以怎样的速度向前推进，程序总共需要多少时间才能完成等，都是不可预知的。</p><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>进程在用户态时候如果需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成。</p><h3 id="大内核与微内核"><a href="#大内核与微内核" class="headerlink" title="大内核与微内核"></a>大内核与微内核</h3><ul><li>大内核：将操作系统功能作为一个紧密结合的整体放到内核，由于各模块共享信息因此有很高的性能。</li><li>微内核：由于操作系统不断复杂，因此将一部分操作系统功能移出内核，从而降低内核的复杂性。通常只有微内核这一个模块运行在内核态，其余模块运行在用户态。由于需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。</li></ul><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><ul><li>外中断：由 CPU 执行指令以外的事件引起，如 I/O 完成中断、时钟中断和控制台中断等。</li><li>异常：由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。</li><li>陷入：在用户程序中使用系统调用。</li></ul><h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><ul><li>进程管理：进程控制、进程同步、进程通信、死锁处理、处理机调度等。</li><li>内存管理：内存分配、地址映射、内存保护与共享、虚拟内存等。</li><li>文件管理：文件存储空间的管理、目录管理、文件读写管理和保护等。</li><li>设备管理：完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率。主要包括缓冲管理、设备分配、设备处理、虛拟设备等。</li></ul><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><ul><li>进程：进程是资源分配的基本单位。进程控制块(Process Control Block, PCB)描述进程的基本信息和运行状态，所谓的创建进程和撤销进程，都是指对 PCB 的操作。</li><li>线程：线程是独立调度的基本单位。一个进程中可以有多个线程，它们共享进程资源。</li><li>区别：<ol><li>进程拥有资源，线程不拥有资源但是可以访问隶属进程的资源。</li><li>同一进程中的线程切换不会引起进程切换。</li><li>由于创建或撤销进程时系统都需要分配或回收资源，因此所付出的开销远大于线程。进程的切换需要保存当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程的切换只需要保存和设置少量寄存器的内容，开销较小。</li><li>线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC(Inter-Process Communication)。</li></ol></li></ul><h3 id="进程状态的切换"><a href="#进程状态的切换" class="headerlink" title="进程状态的切换"></a>进程状态的切换</h3><table><thead><tr><th>状态</th><th>作用</th></tr></thead><tbody><tr><td>就绪状态(ready)</td><td>等待被调度。</td></tr><tr><td>运行状态(running)</td><td>正在运行。</td></tr><tr><td>阻塞状态(waiting)</td><td>等待资源。</td></tr></tbody></table><ul><li>ready 的进程通过调度算法从而获得 CPU 时间，转为 running；running 的进程在分配给它的 CPU 时间片用完之后就会转为 ready，等待下一次调度。</li><li>waiting 是缺少需要的资源(不包括 CPU 时间)从而由 running 转换而来，当获得相应资源就会转为 ready。</li></ul><h3 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h3><p>不同环境的调度算法目标不同，因此需要针对不同环境来讨论调度算法。</p><ol><li>批处理系统：用于批量完成任务，因此调度算法目标是保证吞吐量和周转时间(即从提交到终止的时间)。<ul><li>先来先服务 FCFS(first-come first-serverd)：非抢占式的调度算法，按照请求的顺序进行调度。有利于长作业，但不利于短作业，短作业必须一直等待前面的长作业执行完毕才能执行。</li><li>短作业优先 SJF(shortest job first)：非抢占式的调度算法，按估计运行时间最短的顺序进行调度。如果一直有短作业到来，那么长作业永远得不到调度。</li><li>最短剩余时间优先 SRTN(shortest remaining time next)：最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。</li></ul></li><li>交互式系统：拥有有大量用户交互操作的系统，因此调度算法目标是快速地进行响应。<ul><li>时间片轮转：根据 FCFS 原则将进程排列成一个队列，进程按队列顺序依次执行一个时间片。时间片轮转算法的效率和时间片的大小有很大关系，例如进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁；而如果时间片过长，那么实时性就不能得到保证。</li><li>优先级调度：为每个进程分配一个优先级，按优先级进行调度。为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。</li><li>多级反馈队列：多级队列是为长作业进程考虑的算法，它设置了多个队列，每个队列时间片大小都不同(例如越往后的队列时间片越大)。进程在第一个队列没执行完，就会被移到下一个队列。每个队列优先权也不同，最前面的优先权最高。因此只有前一个队列没有进程在排队，才能调度当前队列上的进程。</li></ul></li><li>实时系统：实时系统要求一个请求在一个确定时间内得到响应。分为硬实时和软实时，前者必须满足绝对的截止时间，后者可以容忍一定程度的超时。</li></ol><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><ol><li>临界区：对临界资源(一次仅允许一个进程使用的资源)进行访问的那段代码称为临界区。为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。</li><li>同步与互斥：<ul><li>同步：多个进程因为合作产生的直接制约关系，使得进程有一定的先后执行关系。</li><li>互斥：多个进程在同一时刻只有一个进程能进入临界区。</li></ul></li><li>信号量：信号量(Semaphore)是一个整型变量，可以对其执行 P(通过) 和 V(释放) 操作，PV 操作被设计成原语，因此执行 PV 操作时屏蔽中断。若信号量的取值只能为 0 或者 1，那么就成为了互斥量(Mutex)，0 表示临界区已经加锁，1 表示临界区解锁。<ul><li>P 操作：执行 S-1 操作后，若 S 仍大于或等于 0，则进程继续执行；否则该进程睡眠并等待 S 大于 0。</li><li>V 操作：执行 S+1 操作后，若 S 仍大于 0，则进程继续执行；否则唤醒睡眠的进程让其完成 P 操作。</li></ul></li><li>管程：将使用信号量实现的程序中的控制代码独立出来，使得程序调用更容易。<ul><li>在一个时刻只能有一个进程使用管程，且进程在无法继续执行的时候不能一直占用管程，否则其它进程永远不能使用管程。</li><li>引入 wait() 和 signal() 来实现同步操作，其中 wait() 用于睡眠进程，而 signal() 用于唤醒睡眠的进程。</li></ul></li></ol><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><p>进程同步(控制多个进程按一定顺序执行)需要通过进程通信(进程间传输信息)传输一些进程同步所需要的信息。进程通信常用方法如下：</p><ol><li>管道：通过调用 pipe 函数创建，其中<code>fd[0]</code>用于读，<code>fd[1]</code>用于写。管道只支持半双工通信(单向交替传输)且只能在父子进程或者兄弟进程中使用。</li><li>FIFO：也称为命名管道，去除了管道只能在父子进程中使用的限制且严格遵守先进先出原则。</li><li>消息队列：相比于 FIFO，消息队列可以独立于读写进程存在，可以根据消息类型有选择地接收消息(FIFO 只能默认接收)，并且消息队列包括消息优先级和消息到达通知等功能。</li><li>信号量：用于为多个进程提供对共享数据对象的访问。</li><li>共享存储：因为数据不需要在进程之间复制，所以允许多个进程共享一个给定的存储区，可以使用信号量来同步对共享存储的访问。可以通过多个进程将同一个文件映射到它们的地址空间从而实现共享内存。</li><li>套接字：上面的通信机制都只是用于进程之间的通信，而套接字可用于不同机器间的进程通信。</li></ol><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>在一组进程发生死锁的情况下，这组死锁进程中的每一个进程都在等待另一个死锁进程所占有的资源。</p><h3 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h3><ol><li>互斥条件：在一段时间内，某资源只能被一个进程占用。</li><li>请求和保持条件：进程保持至少一个资源，又请求一个被其它进程占用的资源，此时请求进程被阻塞但又不释放自己持有的资源。</li><li>不可抢占条件：进程已获得的资源在未使用完之前不能被抢占，只能在进程使用完时由自己释放。</li><li>循环等待条件：两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。</li></ol><h3 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h3><ol><li>鸵鸟策略：当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略(忽略死锁)。</li><li>死锁检测和解除：不试图阻止死锁，而是当检测到死锁发生时，采取措施进行解除。<ul><li>每种类型一个资源的死锁检测：通过检测有向图是否存在环来实现，有环则产生了死锁，无环则没有死锁。</li><li>每种类型多个资源的死锁检测：每个进程最开始时都不被标记，执行过程有可能被标记。当算法结束时，任何没有被标记的进程都是死锁进程。例如1.寻找一个没有标记的进程 Pi，它所请求的资源小于等于资源剩余量；2.如果找到了这样一个进程，执行该进程结束后，将该进程所拥有的资源释放(现在资源=该进程原来拥有的资源+剩余的资源)，标记该进程并转回第一步；3.如果没有这样一个进程，算法终止。</li><li>死锁解除：利用抢占恢复；利用回滚恢复；通过杀死进程恢复。</li></ul></li><li>死锁预防：在程序运行之前预防发生死锁。<ul><li>破坏互斥条件：假脱机打印机技术允许若干个进程同时输出，唯一真正请求物理打印机的进程是打印机守护进程。</li><li>破坏请求和保持条件：可以规定所有进程在开始执行前请求所需要的全部资源；或者允许进程只获得运行初期需要的资源，便开始运行，在运行过程中逐步释放掉分配到 的已经使用完毕的资源，然后再去请求新的资源。</li><li>破坏不可抢占条件：让不可抢占的资源变得可以抢占，效率极低。</li><li>破坏循环等待条件：给资源统一编号，进程只能按编号顺序来请求资源。</li></ul></li><li>死锁避免：在程序运行时避免发生死锁。<ul><li>安全状态：如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每一个进程运行完毕，则称该状态是安全的。</li><li>单个资源的银行家算法：一个小城镇的银行家，他向一群客户分别承诺了一定的贷款额度，算法要做的是判断对请求的满足是否会进入不安全状态，如果是，就拒绝请求；否则予以分配。</li><li>多个资源的银行家算法：查找剩余资源量是否满足至少一个进程所需的资源，若不存在这样一个进程则状态是不安全的；假若找到这样一行，将该进程标记为终止，并将其已分配资源加到剩余资源中；重复以上两步，直到所有进程都标记为终止，则状态是安全的。</li></ul></li></ol><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。在操作系统中将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。</p><h3 id="分页系统地址映射"><a href="#分页系统地址映射" class="headerlink" title="分页系统地址映射"></a>分页系统地址映射</h3><p>内存管理单元(Memory Management Unit, MMU)管理着地址空间和物理内存的转换，其中的页表（Page table）存储着页（程序地址空间）和页框（物理内存空间）的映射表。一个虚拟地址分成两个部分，一部分存储页面号(前 4 位，最后一位表是否存在内存中)，一部分存储偏移量(后 12 位)。</p><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><p>在程序运行过程中，如果要访问的页面不在内存中，就发生缺页中断从而将该页调入内存中。此时如果内存已无空闲空间，系统必须从内存中调出一个页面到磁盘对换区中来腾出空间。页面置换算法的主要目标是使页面置换频率最低(也可以说缺页率最低)。</p><ol><li>最佳(Optimal replacement algorithm, OPT)：所选择的被换出的页面将是最长时间内不再被访问，通常可以保证获得最低的缺页率(理论算法，无法知道一个页面多长时间不再被访问)。</li><li>最近最久未使用(Least Recently Used, LRU)：为了实现 LRU 需要在内存中维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面是最近最久未访问的。因为每次访问都需要更新链表，因此这种方式实现的 LRU 代价很高。</li><li>最近未使用(Not Recently Used, NRU)：每个页面都有两个状态位：R 与 M，当页面被访问时设置页面的 R=1，当页面被修改时设置 M=1。其中 R 位会定时被清零。当发生缺页中断时，NRU 算法随机地从(R, M)=0,0、0,1、1,0、1,1 中挑选一个页面将它换出。NRU 优先换出已经被修改的脏页面(R=0，M=1)，而不是被频繁使用的干净页面(R=1，M=0)。</li><li>先进先出(First In First Out, FIFO)：选择换出的页面是最先进入的页面。该算法会将那些经常被访问的页面也被换出，从而使缺页率升高。</li><li>第二次机会算法：FIFO 算法可能会把经常使用的页面置换出去，为了避免这一问题对该算法做一个修改。当页面被访问时设置该页面的 R 位为 1。需要替换的时候，检查最老页面的 R 位。如果 R 位是 0，可以立刻置换掉；如果是 1，就将 R 位清 0，并把该页面放到链表的尾端，修改它的装入时间使它就像刚装入的一样，然后继续从链表的头部开始搜索。</li><li>时钟(Clock)：第二次机会算法需要在链表中移动页面，降低了效率。时钟算法使用环形链表将页面连接起来，再使用一个指针指向最老的页面。</li></ol><h3 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h3><p>虚拟内存采用的是分页技术，也就是将地址空间划分成固定大小的页，每一页再与内存进行映射。分段的做法是把每个表分成段，一个段构成一个独立的地址空间。每个段的长度可以不同，并且可以动态增长。分页仅仅是由于系统管理的需要，而分段是为了能更好的满足用户的需要。分页的作业地址空间是一维的，分段的作业地址空间是二维的，既需给出段名，又需给出段内地址。</p><h3 id="段页式"><a href="#段页式" class="headerlink" title="段页式"></a>段页式</h3><p>程序的地址空间划分成多个拥有独立地址空间的段，每个段上的地址空间划分成大小相同的页。这样既拥有分段系统的共享和保护，又拥有分页系统的虚拟内存功能。</p><h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><h3 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h3><ul><li>盘面(Platter)：一个磁盘有多个盘面；</li><li>磁道(Track)：盘面上的圆形带状区域，一个盘面可以有多个磁道；</li><li>扇区(Track Sector)：磁道上的一个弧段，一个磁道可以有多个扇区，它是最小的物理储存单位，目前主要有 512bytes 与 4K 两种大小；</li><li>磁头(Head)：与盘面非常接近，能够将盘面上的磁场转换为电信号(读)，或者将电信号转换为盘面的磁场(写)；</li><li>制动手臂(Actuator arm)：用于在磁道之间移动磁头；</li><li>主轴(Spindle)：使整个盘面转动。</li></ul><h3 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h3><p>读写一个磁盘块的时间的影响因素有：旋转时间(旋转到适当的扇区上)、寻道时间(移动到适当的磁道上)和实际的数据传输时间，其中寻道时间最长。</p><ul><li>先来先服务(First Come First Served, FCFS)：按照磁盘请求的顺序进行调度。因为未对寻道做任何优化，平均的寻道时间可能较长。</li><li>最短寻道时间优先(Shortest Seek Time First, SSTF)：优先调度与当前磁头所在磁道距离最近的磁道。虽然平均寻道时间比较低，但是可能导致两端的磁道请求更容易出现饥饿现象。</li><li>电梯算法(SCAN)：总是按一个方向来进行磁盘调度，直到该方向上没有未完成的磁盘请求，然后改变方向。改进版本是不进行方向改变，直接移动到最开始的位置继续进行电梯算法，解决了需要访问位置在当前访问位置前面一点时，平均寻道时间过长的问题。</li></ul><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><ul><li>预处理阶段：处理以 # 开头的预处理命令；</li><li>编译阶段：翻译成汇编文件；</li><li>汇编阶段：将汇编文件翻译成可重定位目标文件(二进制代码和数据)；</li><li>链接阶段：将可重定位目标文件和 printf.o 等单独预编译好的目标文件进行合并，得到最终的可执行目标文件。</li></ul><h3 id="目标文件"><a href="#目标文件" class="headerlink" title="目标文件"></a>目标文件</h3><ul><li>可执行目标文件：可以直接在内存中执行。</li><li>可重定位目标文件：可与其它可重定位目标文件在链接阶段合并，创建一个可执行目标文件。</li><li>共享目标文件：这是一种特殊的可重定位目标文件，可以在运行时被动态加载进内存并链接。</li></ul><h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><p>静态链接器以一组可重定位目标文件为输入，生成一个完全链接的可执行目标文件作为输出。链接器主要完成以下两个任务：</p><ul><li>符号解析：每个符号对应于一个函数、一个全局变量或一个静态变量，符号解析的目的是将每个符号引用与一个符号定义关联起来。</li><li>重定位：链接器通过把每个符号定义与一个内存位置关联起来，然后修改所有对这些符号的引用，使得它们指向这个内存位置。</li></ul><h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p>静态库有以下两个问题：</p><ul><li>当静态库更新时那么整个程序都要重新进行链接；</li><li>对于 printf 这种标准函数库，如果每个程序都要有代码，这会极大浪费资源。</li></ul><p>共享库是为了解决静态库的这两个问题而设计的，在 Linux 系统中通常用 .so 后缀来表示，Windows 系统上它们被称为 DLL。它具有以下特点：</p><ul><li>在给定的文件系统中一个库只有一个文件，所有引用该库的可执行目标文件都共享这个文件，它不会被复制到引用它的可执行文件中；</li><li>在内存中一个共享库的已编译程序的机器代码的一个副本可以被不同的正在运行的进程共享。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 协议</title>
      <link href="/posts/1e0873bb/"/>
      <url>/posts/1e0873bb/</url>
      
        <content type="html"><![CDATA[<h2 id="URI-和-URL"><a href="#URI-和-URL" class="headerlink" title="URI 和 URL"></a>URI 和 URL</h2><p>URI 是包含具体路径(不一定含文件)，URL 是包含具体文件路径(还必须是对应到路径下面的具体文件名称)。所以 URL 是 URI 的一个子集，URI是粗框架，URL是详细定位。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/uri_url.png"></p><h2 id="HTTP-请求报文和响应报文"><a href="#HTTP-请求报文和响应报文" class="headerlink" title="HTTP 请求报文和响应报文"></a>HTTP 请求报文和响应报文</h2><p>HTTP 协议是一种不保存状态，即无状态的的协议，也就是说 HTTP 协议对于发送过的请求或相应不做持久化处理，因此可以更快的处理大量事务。但随着 Web 的不断发展，有些业务需要使用状态信息例如登陆，于是引入了 Cookie 技术，有了 Cookie 再使用 HTTP 协议进行通信，就可以管理状态了。</p><p>请求报文：(如果只是对服务器本身发起请求，URI 可以使用 * 代替)<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/http_request.png"><br>响应报文：<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/http_response.png"></p><h2 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h2><p>HTTP 请求报文中请求行的方法字段。</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>GET</td><td>获取资源，请求访问已被 URI 识别的资源。</td></tr><tr><td>POST</td><td>传输实体主体，GET 也可以但是一般不用。</td></tr><tr><td>PUT</td><td>传输文件，方法自身不带验证机制，因此任何人都可上传有安全隐患，常用于 REST 架构网站。</td></tr><tr><td>HEAD</td><td>获取报文首部，与 GET 类似但是不返回报文主体部分，用于确认 URI 的有效性和资源更新的日期时间。</td></tr><tr><td>DELETE</td><td>删除文件，与 PUT 一样自身不带验证机制有安全隐患。</td></tr><tr><td>OPTIONS</td><td>询问支持的方法，用于查询请求 URI 指定的资源支持的方法。</td></tr><tr><td>TRACE</td><td>追踪路径，例如客户端到服务端之间有多个代理服务器，Trace 在 Max-Forwards 字段中填入数值，没经过一个服务器该数字减一，当达到0时该服务器返回状态码200响应。可以查询发送出去的请求是怎样被代理服务器修改的。由于容易引发 XST(Cross-Site Tracing，跨站追踪) 因此几乎不会使用。</td></tr><tr><td>CONNECT</td><td>要求用隧道协议连接代理，实现用隧道协议进行 TCP 通信。主要使用 SSL(Secure Sokcets Layer，安全套接层) 和 TLS(Transport Layer Security，传输层安全) 协议把通信内容加密后经网络隧道传输。</td></tr></tbody></table><h2 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h2><p>状态码的第一位指定了响应类别，分为如下5种：</p><table><thead><tr><th>状态码</th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>Informational(信息性状态码)</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>Success(成功状态码)</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirection(重定向状态码)</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>Client Error(客户端错误状态码)</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>Server Error(服务器错误状态码)</td><td>服务器处理请求出错</td></tr></tbody></table><p>经常使用的状态码：</p><h3 id="1XX-信息"><a href="#1XX-信息" class="headerlink" title="1XX 信息"></a>1XX 信息</h3><ul><li>100(Continue)：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</li></ul><h3 id="2XX-成功"><a href="#2XX-成功" class="headerlink" title="2XX 成功"></a>2XX 成功</h3><ul><li>200(OK)：请求被正常处理。</li><li>204(No Content)：代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。</li><li>206(Partial Content)：表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。例如图片加载完成一半发生了错误，可以不用重头加载，直接请求未加载的另一半。</li></ul><h3 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX 重定向"></a>3XX 重定向</h3><ul><li>301(Moved Permanently)：永久性重定向。该状态码表示请求的资源已被分配了新的 URI，以后应使用资源现在所指的 URI。</li><li>302(Found)：临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望用户(本次)能使用新的 URI 访问。</li><li>303(See Other)：该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。和302类似，但303强调使用 GET 方法获取资源。</li><li>304(Not Modified)：表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况，也就是说找到了资源，但是这个资源并不符合附带的条件。</li><li>307(Temporary Redirect)：临时重定向，与302类似。307强制不准从 POST 变成 GET，302虽然禁止，但是其实可以实行。</li></ul><h3 id="4XX-客户端错误"><a href="#4XX-客户端错误" class="headerlink" title="4XX 客户端错误"></a>4XX 客户端错误</h3><ul><li>400(Bad Request)：表示请求报文中存在语法错误。</li><li>401(Unauthorized)：表示发送的请求需要有通过 HTTP 认证，若之前已进行过1次请求，则当前返回的401表示用户认证失败。返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询(challenge)用户信息。当浏览器初次接收到401响应，会弹出认证用的对话窗口。</li><li>403(Forbidden)：表明对请求资源的访问被服务器拒绝了。</li><li>404(Not Found)：表明服务器上无法找到请求的资源。</li></ul><h3 id="5XX-服务器错误"><a href="#5XX-服务器错误" class="headerlink" title="5XX 服务器错误"></a>5XX 服务器错误</h3><ul><li>500(Internal Server Error)：表明服务器端在执行请求时发生了错误。</li><li>503(Service Unavailable)：表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入 RetryAfter 首部字段再返回给客户端。</li></ul><h2 id="代理、网关、隧道"><a href="#代理、网关、隧道" class="headerlink" title="代理、网关、隧道"></a>代理、网关、隧道</h2><ul><li><p>代理</p><ul><li>代理是一种有转发功能的应用程序，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。</li><li>每次通过代理服务器转发请求或响应时，会追加写入 Via 首部信息。</li><li>缓存代理：代理转发响应时，缓存代理(Caching Proxy)会预先将资源的副本保存在代理服务器上。当代理再次接收到对相同资源的请求时，就可以不从源服务器那里获取资源，而是将之前缓存的资源作为响应返回。</li><li>透明代理：转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理(Transparent Proxy)。反之，对报文内容进行加工的代理被称为非透明代理。</li></ul></li><li><p>网关</p><ul><li>网关是转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。</li><li>利用网关可以由 HTTP 请求转化为其他协议通信。</li><li>利用网关能提高通信的安全性，因为可以在客户端与网关之间的通信线路上加密以确保连接的安全(例如通过网关连接数据库并使用 SQL 语句查询数据)。</li></ul></li><li><p>隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL 等加密手段进行通信。</p></li></ul><h2 id="HTTP-首部"><a href="#HTTP-首部" class="headerlink" title="HTTP 首部"></a>HTTP 首部</h2><p>HTTP 首部包含4种 HTTP 首部字段类型，分别为通用首部字段、请求首部字段、响应首部字段和实体首部字段。</p><h3 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h3><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Cache-Control</td><td>控制缓存的行为</td></tr><tr><td>Connection</td><td>控制不再转发给代理的首部字段(例如 Connection: Upgrade 会删除 Upgrade 字段)、管理持久连接</td></tr><tr><td>Date</td><td>创建报文的日期时间</td></tr><tr><td>Pragma</td><td>报文指令，例如不缓存</td></tr><tr><td>Trailer</td><td>报文末端的首部一览，常用于分块传输，在报文末端显示首部。</td></tr><tr><td>Transfer-Encoding</td><td>指定报文主体的传输编码方式</td></tr><tr><td>Upgrade</td><td>升级为其他协议</td></tr><tr><td>Via</td><td>代理服务器的相关信息</td></tr><tr><td>Warning</td><td>错误通知，通常会告知用户一些与缓存相关的问题的警告。</td></tr></tbody></table><h3 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h3><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Accept</td><td>用户代理可处理的媒体类型</td></tr><tr><td>Accept-Charset</td><td>优先的字符集</td></tr><tr><td>Accept-Encoding</td><td>优先的内容编码</td></tr><tr><td>Accept-Language</td><td>优先的语言(自然语言)</td></tr><tr><td>Authorization</td><td>Web认证信息</td></tr><tr><td>Expect</td><td>期待服务器的特定行为</td></tr><tr><td>From</td><td>用户的电子邮箱地址</td></tr><tr><td>Host</td><td>请求资源所在服务器，常用于虚拟服务器(一个 IP 对应多个域名，使用 Host 指定域名)</td></tr><tr><td>If-Match</td><td>比较实体标记(ETag)</td></tr><tr><td>If-Modified-Since</td><td>比较资源的更新时间</td></tr><tr><td>If-None-Match</td><td>比较实体标记(与 If-Match 相反)</td></tr><tr><td>If-Range</td><td>资源未更新时发送实体 Byte 的范围请求</td></tr><tr><td>If-Unmodified-Since</td><td>比较资源的更新时间(与If-Modified-Since相反)</td></tr><tr><td>Max-Forwards</td><td>最大传输逐跳数(可经过多少代理服务器)</td></tr><tr><td>Proxy-Authorization</td><td>代理服务器要求客户端的认证信息</td></tr><tr><td>Range</td><td>实体的字节范围请求</td></tr><tr><td>Referer</td><td>对请求中 URI 的原始获取方</td></tr><tr><td>TE</td><td>传输编码的优先级</td></tr><tr><td>User-Agent</td><td>HTTP 客户端程序的信息</td></tr></tbody></table><h3 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h3><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Accept-Ranges</td><td>是否接受字节范围请求</td></tr><tr><td>Age</td><td>推算资源创建经过时间</td></tr><tr><td>ETag</td><td>资源的匹配信息</td></tr><tr><td>Location</td><td>令客户端重定向至指定 URI</td></tr><tr><td>Proxy-Authenticate</td><td>代理服务器对客户端的认证信息</td></tr><tr><td>Retry-After</td><td>对再次发起请求的时机要求</td></tr><tr><td>Server</td><td>HTTP服务器的安装信息</td></tr><tr><td>Vary</td><td>代理服务器缓存的管理信息</td></tr><tr><td>WWW-Authenticate</td><td>服务器对客户端的认证信息</td></tr></tbody></table><h3 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h3><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Allow</td><td>资源可支持的HTTP方法</td></tr><tr><td>Content-Encoding</td><td>实体主体适用的编码方式</td></tr><tr><td>Content-Language</td><td>实体主体的自然语言</td></tr><tr><td>Content-Length</td><td>实体主体的大小(单位：字节)</td></tr><tr><td>Content-Location</td><td>替代对应资源的URI</td></tr><tr><td>Content-MD5</td><td>实体主体的报文摘要</td></tr><tr><td>Content-Range</td><td>实体主体的位置范围</td></tr><tr><td>Content-Type</td><td>实体主体的媒体类型</td></tr><tr><td>Expires</td><td>实体主体过期的日期时间</td></tr><tr><td>Last-Modified</td><td>资源的最后修改日期时间</td></tr></tbody></table><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTP 主要不足如下：</p><ul><li>通信使用明文，内容可能会被窃听。</li><li>不验证通信方的身份，因此有可能遭遇伪装。</li><li>无法证明报文的完整性，所以有可能已遭篡改。</li></ul><p>通过和 SSL 或 TLS(TSL 是以 SSL 为原型开发的协议，有时会统一称该协议为 SSL) 组合使用可以加密 HTTP 的通信内容。HTTP 与 SSL 组合使用被称为 HTTPS(HTTP Secure，超文本传输安全协议)，是一种隧道通信技术。HTTPS 具有加密、认证和完整性保护的特性。</p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><ul><li>对称密钥加密：加密和解密使用同一密钥，但是面临着无法安全地将密钥传输给通信方的问题。</li><li>非对称密钥加密：加密和解密使用不同的密钥，公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密，但是无法证明非对称密钥加密的公开密钥是否被人篡改。</li><li>混合加密机制：非对称密钥加密速度比较慢，对称密钥加密相对较快，因此 HTTP 采用非对称密钥加密和对称密钥加密一起使用的混合加密机制。通过使用非对称加密方式传输对称密钥加密方式的密钥，之后通过对称密钥加密进行数据传输。</li></ul><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>为了确认非对称密钥加密的公开密钥没有被篡改，可以通过使用证书来对通信方进行认证。证书由数字证书认证机构(CA，Certificate Authority)颁发，它是客户端与服务器双方都可信赖的第三方机构。其认证过程如下：</p><ol><li>服务器将自己的公开密钥登陆至数字证书认证机构，数字认证机构使用自己的私有密钥向服务器的公开密码署数字签名并颁发公钥证书。</li><li>服务器向客户端发送公钥证书(包含服务器公开密钥和数字证书认证机构的数字签名)。</li><li>客户端接收到公钥证书，通过事先植入到浏览器中的可信数字证书认证机构的公开密钥进行验证，确认公钥证书的真实性。之后通过确认通过的公钥证书中的服务器公开密钥进行数据加密并传送给服务器。</li></ol><h3 id="完整性保护"><a href="#完整性保护" class="headerlink" title="完整性保护"></a>完整性保护</h3><p>HTTP 提供了 MD5 报文摘要功能，但不是安全的。例如报文内容被篡改之后，同时重新计算 MD5 的值，通信接收方是无法意识到发生了篡改。而 SSL 提供了安全的报文摘要功能来进行完整性保护，在进行 SSL 握手时应用层发送数据会附加一种叫做 MAC(Message Authentication Code)的报文摘要，MAC 能够查知报文是否遭到篡改，从而保护报文的完整性。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络之应用层</title>
      <link href="/posts/41158dda/"/>
      <url>/posts/41158dda/</url>
      
        <content type="html"><![CDATA[<p>不同的网络应用的应用进程之间需要不同的通信规则，因此需要使用应用层协议。</p><h2 id="域名系统-DNS"><a href="#域名系统-DNS" class="headerlink" title="域名系统 DNS"></a>域名系统 DNS</h2><p>域名系统(Domain Name System，DNS)是互联网使用的命名系统，用于提供主机名字和 IP 地址之间互相转换的服务。域名具有层次结构，从上到下依次为：根域名、顶级域名、二级域名等等。</p><p>DNS 可以使用 UDP 或者 TCP 进行传输，使用的端口号都为 53。大多数情况下 DNS 使用 UDP 进行传输，但在两种情况下会使用 TCP 进行传输：</p><ul><li>如果返回的响应超过了 512 字节(UDP 最大只支持 512 字节的数据)。</li><li>区域传送(区域传送是主域名服务器向辅助域名服务器传送变化的那部分数据)。</li></ul><h2 id="文件传输协议-FTP"><a href="#文件传输协议-FTP" class="headerlink" title="文件传输协议 FTP"></a>文件传输协议 FTP</h2><p>FTP 使用 TCP 进行连接，它需要两个连接来传送一个文件：</p><ul><li>控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传回服务器的应答。</li><li>数据连接：用来传送一个文件数据。</li></ul><p>网络文件系统 NFS 允许应用进程打开一个远地文件并能在该文件的某一个特定的位置上开始读写数据。</p><p>简单文件传送协议 TFTP 使用 UDP 进行文件传输，但不支持交互。</p><h2 id="远程终端协议-TELNET"><a href="#远程终端协议-TELNET" class="headerlink" title="远程终端协议 TELNET"></a>远程终端协议 TELNET</h2><p>TELNET 能将用户的输入传到远地主机，同时也能将远地主机的输出通过 TCP 连接返回到用户屏幕。TELNET 能够适应虚度哦计算机和操作系统的差异，使用了网络虚拟终端(Network Virtual Terminal，NVT)，客户将输入转换成 NVT 格式传送至服务器，服务器把收到的输入从 NVT 格式转换成远地系统所需的格式，向用户返回数据时，服务器将远地系统的格式转换成 NVT 格式，本地客户再从 NVT 格式转换成本地系统所需的格式。</p><h2 id="超文本传输协议-HTTP"><a href="#超文本传输协议-HTTP" class="headerlink" title="超文本传输协议 HTTP"></a>超文本传输协议 HTTP</h2><p>HTTP 协议定义了浏览器咋样向万维网服务器请求万维网文档以及服务器咋样把文档传送给浏览器。</p><h2 id="电子邮件协议"><a href="#电子邮件协议" class="headerlink" title="电子邮件协议"></a>电子邮件协议</h2><p>一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。邮件协议包含发送协议和读取协议，发送协议常用 SMTP，读取协议常用 POP3 和 IMAP。</p><ul><li>SMTP：SMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。MIME 并没有改动或者取代 SMTP，而是增加邮件主体的结构，定义了非 ASCII 码的编码规则。</li><li>POP3：POP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除，但最新版本的 POP3 可以不删除邮件。</li><li>IMAP：IMAP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以让用户随时随地去访问服务器上的邮件。</li></ul><h2 id="动态主机配置协议-DHCP"><a href="#动态主机配置协议-DHCP" class="headerlink" title="动态主机配置协议 DHCP"></a>动态主机配置协议 DHCP</h2><p>动态主机配置协议(Dynamic Host Configuration Protocol，DHCP) 提供了即插即用的连网方式，这种机制允许一台计算机加入新的网络和获取 IP 地址不用手工参与。DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。DHCP 工作过程如下(客户端使用 UDP 端口68，DHCP 服务器使用 UDP 端口67)：</p><ol><li>客户端发送 DHCPDISCOVER 报文(封装于 UDP)，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68。将报文被广播到同一个子网的所有主机上。</li><li>DHCP 服务器收到 DHCPDISCOVER 报文之后，发送 DHCPOFFER 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。</li><li>如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 DHCPREQUEST 报文给该 DHCP 服务器。</li><li>DHCP 服务器发送 DHCPACK 报文，表示客户端此时可以使用提供给它的信息，拒绝则发送 DHCPNACK 报文。</li><li>客户端可以提前终止 DHCP 服务器提供的服务，只需要向 DHCP 服务器发送 DHCPRELEASE 报文即可。</li></ol><h2 id="常用协议"><a href="#常用协议" class="headerlink" title="常用协议"></a>常用协议</h2><table><thead><tr><th>应用</th><th>应用层协议</th><th>端口号</th><th>传输层协议</th><th>附加</th></tr></thead><tbody><tr><td>域名解析</td><td>DNS</td><td>53</td><td>UDP/TCP</td><td>长度超过 512 字节时使用 TCP</td></tr><tr><td>文件传送协议</td><td>FTP</td><td>20/21</td><td>TCP</td><td>控制连接 21，数据连接 20</td></tr><tr><td>远程终端协议</td><td>TELNET</td><td>23</td><td>TCP</td><td></td></tr><tr><td>超文本传送协议</td><td>HTTP</td><td>80</td><td>TCP</td><td></td></tr><tr><td>简单邮件传送协议</td><td>SMTP</td><td>25</td><td>TCP</td><td></td></tr><tr><td>邮件读取协议</td><td>POP3</td><td>110</td><td>TCP</td><td></td></tr><tr><td>网际报文存取协议</td><td>IMAP</td><td>143</td><td>TCP</td><td></td></tr><tr><td>动态主机配置协议</td><td>DHCP</td><td>67/68</td><td>UDP</td><td>客户端 UDP 端口68，DHCP 服务器 UDP 端口67</td></tr><tr><td>简单网络管理协议</td><td>SNMP</td><td>161</td><td>UDP</td><td>用于网络资源监控、测试、配置和分析之类的</td></tr></tbody></table><h2 id="Web-页面请求过程"><a href="#Web-页面请求过程" class="headerlink" title="Web 页面请求过程"></a>Web 页面请求过程</h2><ol><li>DHCP 配置主机信息<ul><li>假设主机最开始没有 IP 地址以及其它信息，那么就需要先使用 DHCP 来获取。</li><li>主机生成一个 DHCP 请求报文，并将这个报文放入具有目的端口 67 和源端口 68 的 UDP 报文段中。</li><li>该报文段则被放入在一个具有广播 IP 目的地址(255.255.255.255) 和源 IP 地址（0.0.0.0）的 IP 数据报中。</li><li>该数据报则被放置在 MAC 帧中，该帧具有目的地址 FF:FF:FF:FF:FF:FF，将广播到与交换机连接的所有设备。</li><li>连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 DHCP ACK 报文，该报文包含以下信息：IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。</li><li>该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，因此现在交换机就可以直接知道应该向哪个接口发送该帧。</li><li>主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中安装默认网关。</li></ul></li><li>ARP 解析 MAC 地址<ul><li>主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。</li><li>主机生成一个 DNS 查询报文，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。</li><li>该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 IP 数据报中。</li><li>该 IP 数据报被放入一个以太网帧中，该帧将发送到网关路由器。</li><li>DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。</li><li>主机生成一个包含目的地址为网关路由器 IP 地址的 ARP 查询报文，将该 ARP 查询报文放入一个具有广播目的地址（FF:FF:FF:FF:FF:FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。</li><li>网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 ARP 回答报文，包含了它的 MAC 地址，发回给主机。</li></ul></li><li>DNS 解析域名<ul><li>知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。</li><li>网关路由器接收到包含 DNS 查询报文的以太网帧后，抽取出 IP 数据报，并根据转发表决定该 IP 数据报应该转发的路由器。</li><li>因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。</li><li>到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。</li><li>找到 DNS 记录之后，发送 DNS 回答报文，将该回答报文放入 UDP 报文段中，然后放入 IP 数据报中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。</li></ul></li><li>HTTP 请求页面<ul><li>有了 HTTP 服务器的 IP 地址之后，主机就能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。</li><li>在生成 TCP 套接字之前，必须先与 HTTP 服务器进行三次握手来建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。</li><li>HTTP 服务器收到该报文段之后，生成 TCP SYN ACK 报文段，发回给主机。</li><li>连接建立之后，浏览器生成 HTTP GET 报文，并交付给 HTTP 服务器。</li><li>HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将 Web 页面内容放入报文主体中，发回给主机。</li><li>浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。</li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络之传输层</title>
      <link href="/posts/9120eb8f/"/>
      <url>/posts/9120eb8f/</url>
      
        <content type="html"><![CDATA[<p>两台主机进行通信就是两台主机中的应用进程互相通信，IP 协议只是将分组送到了目的主机，还需要传输层将分组搬运到适应的目标进程中。也就是说网络层提供主机之间的逻辑通信，而运输层提供应用进程间的逻辑通信。</p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>用户数据报协议 UDP(User Datagram Protocol)是无连接的，尽最大可能交付，没有拥塞控制，面向报文(对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部)，支持一对一、一对多、多对一和多对多的交互通信。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/UDP.png"></p><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>传输控制协议 TCP(Transmission Control Protocol)是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流(把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块)，每一条 TCP 连接只能是点对点的(一对一)。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/TCP.png"></p><ul><li>ACK：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</li><li>SYN：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。</li><li>终止 FIN ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</li></ul><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>第三次握手是为了防止失效的连接请求到达服务器(第一个发送的连接未到达时发送了第二个连接，两个链接一起到达打开了两个连接)，让服务器错误打开连接。若 A 为客户端，B 为服务端。</p><ol><li>A 向 B 发送连接请求报文(SYN=1, ACK=0)，选择一个初始的序号 x。</li><li>B 收到连接请求报文，如果同意建立连接则向 A 发送连接确认报文(SYN=1, ACK=1)，确认号为 x+1，同时也选择一个初始的序号 y。</li><li>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</li><li>B 收到 A 的确认后，连接建立。</li></ol><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。四次挥手即 TCP 释放连接。若 A 为客户端，B 为服务端。</p><ol><li>A 发送连接释放报文(FIN=1)。</li><li>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</li><li>当 B 不再需要连接时，发送连接释放报文(FIN=1)。</li><li>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</li><li>B 收到 A 的确认后释放连接。</li></ol><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><p>TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。</p><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</p><p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离；接收窗口左部字节已经发送确认并交付主机(接收窗口只会对窗口内最后一个按序到达的字节进行确认)，就向右滑动接收窗口。</p><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>流量控制是为了控制发送方发送速率，保证接收方来得及接收。接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。</p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率降低整个网络的拥塞程度。</p><p>发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。</p><ul><li><p>慢开始与拥塞避免<br>  发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍。这样 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。</p></li><li><p>快重传与快恢复<br>  在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络之网络层</title>
      <link href="/posts/bc654c1/"/>
      <url>/posts/bc654c1/</url>
      
        <content type="html"><![CDATA[<p>网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。在网络层提供连接服务的计算机网络称为虚电路网络，在网络层提供无连接服务的计算机网络称为数据报网络。</p><h2 id="网际协议-IP"><a href="#网际协议-IP" class="headerlink" title="网际协议 IP"></a>网际协议 IP</h2><p>网际协议 IP(Internet Protocol) 可以使互连起来的多台计算机网络能够进行通信。与 IP 协议配套使用的有三个协议：</p><h3 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h3><p>地址解析协议 ARP(Address Resolution Protocol)通过 IP 地址就能获悉该 IP 地址对应的 MAC 地址，ARP 存在于主机的 ARP 高速缓存中，且只能解决同一个局域网上的主机或路由器的 IP 地址和硬件地址的映射问题，因此此时需要通过路由器与路由器之间进行通信获取不同网络的 MAC 地址。逆地址解析 RARP 就是通过 MAC 地址就能获悉 IP 地址，DHCP 协议中包含 RARP 协议。</p><h3 id="网际控制报文协议-ICMP"><a href="#网际控制报文协议-ICMP" class="headerlink" title="网际控制报文协议 ICMP"></a>网际控制报文协议 ICMP</h3><p>网际控制报文协议 ICMP(Internet Control Message Protocol)ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告。ICMP 并不是高层协议，因为它封装在 IP 数据报中作为其中的数据部分。ICMP 报文分为差错报告报文和询问报文(回送请求或时间戳请求)。</p><p>ICMP 有两个非常重要的应用，分别是 Ping 和 Traceroute。</p><ul><li>Ping 用于测试两台主机之间的连通性。其原理是通过向目的主机发送 ICMP Echo 请求报文，目的主机收到之后会发送 Echo 回答报文。Ping 会根据时间和成功响应的次数估算出数据包往返时间以及丢包率。</li><li>Traceroute 用于跟踪一个分组从源点到终点的路径。其原理是发送无法交付的 UDP 用户数据报，并由目的主机发送终点不可达差错报告报文。如源主机 A 到目的主机 D，中间经过 B、C 路由器，首先源主机 A 发送 TTL 为1的 IP 数据报，B 收到后将 TTL 减1，由于此时 TTL 为0所以将数据报丢弃并向源主机返回一个 ICMP 时间超过差错报告报文。然后源主机 A 发送 TTL 为2的 IP 数据报，此时能够被 C 路由器接收，C 路由器采取和 B 路由器一样的做法。如果经过 n 台路由器，则依次发送 TTL 为1至 n 的 IP 数据报。当达到目的主机时，目的主机要向源主机发送 ICMP 终点不可达差错报告报文。因此源主机知道了到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。</li></ul><h3 id="网际组管理协议-IGMP"><a href="#网际组管理协议-IGMP" class="headerlink" title="网际组管理协议 IGMP"></a>网际组管理协议 IGMP</h3><p>网际组管理协议 IGMP(Internet Group Management Protocol)是应用于 IP 多播的一种协议，其实质为让连接在本地局域网上的多播路由器知道本局域网上是否有主机参加或退出了某个多播组。该协议必须和多播路由选择协议一起时候，多播路由选择协议使得连接在局域网上的多播路由器必须和互联网上的其它多播路由器协同工作，以便把多播数据报以最小代价传送给所有的组成员。</p><h2 id="IP-地址编址方式"><a href="#IP-地址编址方式" class="headerlink" title="IP 地址编址方式"></a>IP 地址编址方式</h2><p>IP 地址的三种编制方法：分类、子网划分和无分类编址。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>IP 地址是一个全世界范围内唯一的32位标识符，其定义为 IP 地址 ::= {&lt;网络号&gt;, &lt;主机号&gt;}，网络号标志主机所连接到的网络，主机号标志该主机。一个 IP 地址在整个互联网范围内是唯一的。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/IPClassification.png"></p><p>特殊网络号和主机号：</p><ol><li>IP 地址中的全0表示当前网络。</li><li>网络号为 127 保留作为本地软件环回测试本主机的进程之间的通信之用。</li><li>128.0.0.0 和 192.0.0.0 是不指派的网络号。</li><li>主机号全0表示本主机，全1表示这个网络上的所有主机。</li></ol><h3 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h3><p>通过在 IP 地址中增加子网号字段(使用主机号的一部分)，使两级 IP 地址变成三级 IP 地址。</p><p>子网划分后的 IP 地址定义为 IP 地址 ::= {&lt;网络号&gt;, &lt;子网号&gt;, &lt;主机号&gt;}，要使用子网，必须配置子网掩码，子网掩码的位数即占用的主机号位数，其值为占用的位数的值都置为1。若某一 C 类地址的子网掩码为 255.255.255.192，意思为网络号占三个字节，子网号占2位，主机号占6位，因为192的二进制为11000000。</p><h3 id="无分类编址"><a href="#无分类编址" class="headerlink" title="无分类编址"></a>无分类编址</h3><p>无分类编址使用无分类域间路由选择 CIDR(Classless Inter-Domain Routing) 构造超网(supernetting)，消除了传统的 A 类、B 类和 C 类地址以及划分子网的概念。</p><p>CIDR 把 IP 地址划分为网络前缀和主机号两部分，其定义为 IP 地址 ::= {&lt;网络前缀&gt;, &lt;主机号&gt;}，可以使用 CIDR 记法在主机号后用<code>/网络号前缀号位数</code>的方式标识前缀号位数。例如 192.168.1.20/16 表示网络前缀号为前16位。</p><p>CIDR 地址块(网络前缀指定的网络)中有很多地址，所以在路由表中利用 CIDR 地址快来查找目的网络，通常这种地址的聚合被称为路由聚合(route aggregation)，使得路由表中的一个项目可以表示原来传统分类地址的很多个路由，因此路由聚合也被称为构成超网。</p><p>在路由表中的项目由网络前缀和下一跳地址组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。</p><h2 id="IPV6"><a href="#IPV6" class="headerlink" title="IPV6"></a>IPV6</h2><p>IPV6 的地址增大到128位，可用地址空间随之增大。<br>IPV6 会自动配置，因此不需要使用 DHCP。<br>IPV6 使用冒号十六进制记法，如 68E6:8C64:FFFF:FFFF:0:1180:960A:FFFF，一共8组共32个16进制数，也就是128个二进制数。</p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>路由器是一种具有多个输入端口和多个输出端口的专用计算机，其任务是转发分组。路由器的转发分组正是网络层的主要工作。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>路由器从功能上可以划分为：路由选择部分(根据所选定的路由选择协议构造出路由表并更新和维护路由表)和分组转发部分。分组转发结构由三个部分组成：交换结构(根据路由表对分组进行处理)、一组输入端口和一组输出端口。</p><h3 id="分组转发流程"><a href="#分组转发流程" class="headerlink" title="分组转发流程"></a>分组转发流程</h3><ul><li>从数据报的首部提取目的主机的 IP 地址 D，得到目的网络地址 N。</li><li>若 N 就是与此路由器直接相连的某个网络地址，则进行直接交付；</li><li>若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给表中所指明的下一跳路由器；</li><li>若路由表中有到达网络 N 的路由，则把数据报传送给路由表中所指明的下一跳路由器；</li><li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；</li><li>否则报告转发分组出错。</li></ul><h3 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h3><p>互联网采用的路由选择协议主要是自适应的(动态的)、分布式路由选择协议。将整个互联网划分为多个较小的自治系统(AS，autonomous system)，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。</p><p>可以把路由选择协议划分为两大类：内部网关协议(Interior Gateway Protocol，IGP)和外部网关协议(External Gateway Protocol，EGP)。</p><h4 id="路由信息协议-RIP"><a href="#路由信息协议-RIP" class="headerlink" title="路由信息协议 RIP"></a>路由信息协议 RIP</h4><p>路由信息协议(Routing Information Protocol，RIP)是内部网关协议的一种，是一种分布式的基于距离向量的路由选择协议。</p><p>RIP 协议要求网络中的每一个路由器都要维护从它自己到其他每一个目的网络的距离记录。从一路由器到直接连接的网络距离定义为1跳，从以路由器到非直接连接的网络的距离定义为所经过的路由器数加1跳。RIP 只允许一条路径最多只能包含15个路由器，因此 RIP 只适合于小型互联网，且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。</p><h4 id="开放最短路径优先-OSPF"><a href="#开放最短路径优先-OSPF" class="headerlink" title="开放最短路径优先 OSPF"></a>开放最短路径优先 OSPF</h4><p>开放最短路径优先(Open Shortest Path First，OSPF)是为了解决 RIP 坏消息传播慢和适用规模小的缺点开发出来的，也是内部网关协议的一种。它使用了 Dijkstra 的最短路径算法 SPF，并通过分布式的链路状态协议(link state protocol)实现。因此具有如下特点：</p><ul><li>向本自治系统中的所有路由器发送信息(洪泛法)。</li><li>发送的信息是与本路由器相邻的所有路由器的链路状态(本路由器与哪些路由器相邻及该链路的度量，也就是费用、距离、时延等)。</li><li>只有当链路状态发生变化时，路由器才向所有路由器用洪泛法发送此信息。</li></ul><p>因此所有的路由器最终都能获得全网的拓扑结构图，且这个拓扑结构图在全网范围内是一致的，所以 OSPF 的更新过程收敛的快。</p><h4 id="边界网关协议-BGP"><a href="#边界网关协议-BGP" class="headerlink" title="边界网关协议 BGP"></a>边界网关协议 BGP</h4><p>边界网关协议(Border Gateway Protocol，BGP)是外部网关协议的一种，解决了如下问题：</p><ul><li>互联网的规模太大，使得 AS 之间的路由选择非常困难。</li><li>AS 之间的路由选择必须考虑有关策略，例如有些 AS 不愿意其它 AS 经过。</li><li>各个 AS 内部使用不同路由选择协议，无法准确定义路径的度量。</li></ul><p>BGP 采用了路径向量路由选择协议力求寻找一条能够到达目的网络且比较好的路由，而并非要寻找一条最佳路由。每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。</p><h2 id="虚拟专用网-VPN"><a href="#虚拟专用网-VPN" class="headerlink" title="虚拟专用网 VPN"></a>虚拟专用网 VPN</h2><p>由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。</p><p>虚拟专用网指明了一些专用地址，这些地址只能用于一个机构的内部通信，而不能用于和互联网上的主机通信。专用地址如下：</p><ul><li>10.0.0.0 ~ 10.255.255.255</li><li>172.16.0.0 ~ 172.31.255.255</li><li>192.168.0.0 ~ 192.168.255.255</li></ul><p>VPN 使用公用的互联网作为本机构各专用网之间的通信载体。例如机构内的主机需要和机构外的公用网进行通信，可以通过将数据发送给机构内的出入口(某个路由器)，该出入口会加密数据，并增加首部其源地址为出入口的地址(也就是出入口在公用网的 IP 地址)，当到达目的地址的路由器后，该路由器解密加密的数据，恢复原本的数据报，并发送给目的主机。</p><h2 id="网络地址转换-NAT"><a href="#网络地址转换-NAT" class="headerlink" title="网络地址转换 NAT"></a>网络地址转换 NAT</h2><p>采用网络地址转换(Network Address Translation，NAT)可以让专用网内部已经分配到了本地 IP 地址的一些主机与互联网上的主机进行通信(不需要加密)。通过为路由器安装 NAT 软件，使用 NAT 来将本地 IP 转换为全球 IP。</p><p>在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把传输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换(Network Address and Port Translation，NAPT)。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络之数据链路层</title>
      <link href="/posts/c9d999de/"/>
      <url>/posts/c9d999de/</url>
      
        <content type="html"><![CDATA[<h2 id="数据链路层提供的服务"><a href="#数据链路层提供的服务" class="headerlink" title="数据链路层提供的服务"></a>数据链路层提供的服务</h2><p>数据链路层把网络层交付下来的数据构成帧发送到链路上，以及把接收到的帧中的数据取出并上交给网络层。数据链路层的传输单元为帧。因此链路层协议能够提供的服务包括：</p><ul><li>封装成帧：将网络层交付下来的数据根据链路层协议封装成相应的帧进行传输。</li><li>链路接入：媒体访问控制(Medium Access Control，MAC)协议规定帧在链路上的传输规则。</li><li>可靠交付：当链路层协议提供可靠交付时，它保证无差错地经链路层移动每个网络层数据报。如果是尽最大努力交付，当发现数据错误时不进行重发只是丢弃差错数据，可靠性由上层判断。高差错率链路提供可靠交付，否则只是检测差错进行尽最大努力交付。</li><li>差错检测：当传输的数据出现了差错时，可以通过差错检测出来。常见的差错检测有循环冗余检测(CRC 检验，对数据比特进行模2运算获得的余数加在数据尾作为校验码)和奇偶校验(通过一个附加比特记录1或0，使得数据加附加比特中1的总数为偶数个)。</li></ul><h2 id="链路层信道"><a href="#链路层信道" class="headerlink" title="链路层信道"></a>链路层信道</h2><p>链路层使用的信道有两大类：点对点信道和广播信道。</p><ul><li>点对点信道：一对一通信，不会发生碰撞，常用 PPP 协议进行控制。</li><li>广播信道：一对多通信，一个节点发送的数据能够被广播信道上所有的节点接收到，容易发生碰撞，需要使用多路访问协议进行协调。</li></ul><h2 id="链路层协议"><a href="#链路层协议" class="headerlink" title="链路层协议"></a>链路层协议</h2><h3 id="点对点协议"><a href="#点对点协议" class="headerlink" title="点对点协议"></a>点对点协议</h3><p>互联网用户通常需要连接到某个 ISP 之后才能接入到互联网，点对点协议(Point-to-Point Protocol，PPP)是用户计算机和 ISP 进行通信时所使用的数据链路层协议。PPP 协议是尽最大努力交付的协议，还有一种高级数据链路控制(high-level data link control，HDLC)协议是可靠交付的协议，但是因为如今链路差错率较低，所以几乎不使用。</p><h3 id="多路访问协议"><a href="#多路访问协议" class="headerlink" title="多路访问协议"></a>多路访问协议</h3><p>多路访问协议通常分为三类：信道划分协议、随机接入协议和轮流协议。</p><ul><li>信道划分协议：通过信道进行划分通常使用时分多路复用或频分多路复用在所有共享信道结点之间划分广播信道带宽。</li><li>随机接入协议：一个传输结点总是以信道的全部速率进行发送，当发生碰撞时，碰撞的结点反复的重发它的帧直至无碰撞为止，通常使用 CSMA 协议。</li><li>轮流协议：常用的有轮询协议和令牌传递协议，轮询协议是主结点以循环的方式轮询每个结点，而令牌传递协议用一个称为令牌的小的特殊帧在结点之间以某种固定的次序进行交换，获得令牌的可以发送数据，如果没有数据要发送，则赶紧将令牌传递给下一个结点。</li></ul><p>载波监听多点接入/碰撞检测(Carrier Sense Multiple Access with Collision Detection，CSMA/CD)协议：</p><ul><li>多点接入：说明是总线型网络，计算机以多点接入的方式连接在一根总线上。</li><li>载波监听：不断检测信道，如果信道一直被使用则只能等待，否则进行数据发送。</li><li>碰撞检测：在发送中，如果监听到信道已有其它主机正在发送数据，就表示发生了碰撞。此时发生碰撞的主机等待一个随机时间重新发送帧。</li></ul><h2 id="链路层寻址和-ARP"><a href="#链路层寻址和-ARP" class="headerlink" title="链路层寻址和 ARP"></a>链路层寻址和 ARP</h2><ul><li>MAC 地址：又称为硬件地址或物理地址，长度为48位全球地址，用于唯一标识网络适配器，存在于适配器的 ROM 中。</li><li>ARP(地址解析协议)：通过 ARP 表进行 IP 地址到 MAC 地址的转化，表中 IP 地址和 MAC 地址有一一映射的关系，并且有一个 TTL 值记载其寿命，寿命一到就会删除映射。</li><li>MAC帧：包含目的地址、源地址、类型(上一层使用的协议类型)、数据和 FCS 帧检验序列(使用 CRC 检验)。</li></ul><h2 id="局域网和以太网"><a href="#局域网和以太网" class="headerlink" title="局域网和以太网"></a>局域网和以太网</h2><ul><li>局域网是一种典型的广播信道，主要特点是网络为一个单位所拥有，且地理范围和站点数目均有限，以太网是一种星型拓扑结构局域网，目前以太网占领着有线局域网市场。</li><li>集线器：以太网早期使用集线器进行连接，集线器是一种物理层设备，当一个比特到达接口时，集线器重新生成这个比特，并将其能量强度放大，从而扩大网络的传输距离。如果集线器同时收到两个不同接口的帧，那么就发生了碰撞。</li><li>网桥(代替集线器)：网桥对收到的帧根据其 MAC 帧的目的地址进行转发和过滤。接收到帧时，根据帧的目的 MAC 地址，查找网桥中的地址表，然后从合适的发送接口发送，但是接收到两个不同接口的帧还是会发生碰撞。</li><li>交换机(代替网桥)：交换机相当于多接口的网桥，是一种即插即用设备，其内部的地址表是通过自学习算法自动地逐渐建立起来的。当地址表中没有目的地址时候会发送广播，否则进行单播。</li><li>虚拟局域网(VLAN，Virtual LAN)：虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络之物理层</title>
      <link href="/posts/18784b9d/"/>
      <url>/posts/18784b9d/</url>
      
        <content type="html"><![CDATA[<h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><p>模拟信号(连续信号)：即消息的参数的取值是连续的，如调制解调器到电话网之间的信号。<br>数字信号(离散信号)：即消息的参数的取值是离散的，如计算机到调制解调器之间的信号。</p><h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><p>单向通信(单工通信)：只能单向通信。<br>双向交替通信(半双工通信)：双方不能同时发送和接收消息。<br>双向同时通信(全双工通信)：双方可以同时发送和接收消息。</p><h2 id="调制"><a href="#调制" class="headerlink" title="调制"></a>调制</h2><p>基带调制：对基带信号(来自信源的信号)进行调制，将数字信号1或0直接用两种不同的电压来表示，然后送到线路上去传输，该过程常被称为编码。<br>带通调制：是将基带信号进行调制后形成的频分复用模拟信号。</p><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><table><thead><tr><th>技术</th><th>作用</th></tr></thead><tbody><tr><td>频分复用(FDM，Frequency Division Multiplexing)</td><td>用户在相同时间内占用不同的频带宽度。</td></tr><tr><td>时分复用(TDM，Time Division Multiplexing)</td><td>用户在不同的时间内占用同样的频带宽度。</td></tr><tr><td>统计时分复用(STDM，Statistic TDM)</td><td>与时分复用类似，但是使用集中器作为输入缓存，当集中器存满了1帧(不是数据链路层的帧)数据就会真正的发送出去。</td></tr><tr><td>波分复用(WDM，Wavelength Division Multiplexing)</td><td>相当于光的频分复用，例如应用于光纤技术。</td></tr><tr><td>码分复用(CDM，Code Division Multiplexing)</td><td>用户可以在同样的时间使用同样的频带进行通信。因为每个用户使用经过特殊挑选的不同码型，所以不会互相干扰。</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络概述</title>
      <link href="/posts/7c4ca347/"/>
      <url>/posts/7c4ca347/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p>网络把许多计算机连接在一起，而互联网则把许多网络连接在一起，因此互联网被称为”网络的网络”。</p><h2 id="ISP"><a href="#ISP" class="headerlink" title="ISP"></a>ISP</h2><p>互联网服务提供者 ISP(Internet Service Provider)，又称为互联网服务提供商，互联网交换点 IXP(Internet eXchange Point)主要作用就是允许两个网络(通常是两个同层网络)直接相连并交换分组，而不需要再通过第三个网络来转发分组。如今的互联网是一种多层次的 ISP 结构。较低层的 ISP 与较高层的 ISP 相连，较高层的 ISP 彼此互联。用户和内容提供商是较低层 ISP 的客户，较低层 ISP 是叫高层 ISP 的客户。如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/ISP.png"></p><h2 id="网络边缘部分"><a href="#网络边缘部分" class="headerlink" title="网络边缘部分"></a>网络边缘部分</h2><p>网络边缘部分由所有连接在互联网上的主机组成。主机又称为端系统，在网络边缘的端系统之间的通信方式通常可划分为两大类：客户-服务器方式(C/S 方式，Client/Server)和对等方式(P2P 方式，Peer-to-Peer)。</p><ul><li>C/S 方式：客户是服务请求方，服务器是服务提供方。</li><li>P2P 方式：本质上与 C/S 方式差不多，只是对等连接中的每一台主机既是客户又同时是服务器。</li></ul><h2 id="网络核心部分"><a href="#网络核心部分" class="headerlink" title="网络核心部分"></a>网络核心部分</h2><p>网络核心部分由大量网络和连接这些网络的路由器组成，通过使用路由器转发收到的分组为边缘部分提供连通性服务。转发数据的方法有两种分别为电路交换和分组交换。</p><ul><li>电路交换：用一个交换机连接许多部电话并通过交换机使用交换方法(按照某种方式动态地分配传输线路的资源)，让通话双方始终占用端到端的通信资源直至挂断。当将电路交换应用于传输计算机数据时，其线路的传输效率往往很低，因为用户不用一直占用资源。简单说电路交换需要先建立连接再传输报文，适用于连续传送大量的数据。</li><li>分组交换：主要用处为转发收到的分组，通常由路由器实现。分组交换采用存储转发技术，将一个报文(需要发送的整块数据)划分为几个分组(等长数据段加上由控制信息组成的首部，若分组称为包，则首部称为包头)后再进行传送。路由器在接收到分组时会先存储分组，检查其首部获得该分组目的地址并在查找转发表后从合适的接口转发出去交给下一个路由器。简单说分组交换不需要建立连接，直接传输分组，因此时延小，灵活性很好。</li></ul><h2 id="网络性能"><a href="#网络性能" class="headerlink" title="网络性能"></a>网络性能</h2><ul><li>速率(理论速度)：指的是数据的传送速率，常称为数据率或比特率，其单位为 bit/s 或 bps。</li><li>带宽(最高速度)：表示在单位时间内网络中的某信道所能通过的”最高数据率”，其单位为 bit/s。</li><li>吞吐量(实际传输量)：表示在单位时间内通过某个网络的实际的数据量。</li><li>时延(实际传输耗时)：指数据从网络的一端传送到另一端所需的时间。总时延=发送时延+传播时延+处理时延+排队时延。<ul><li>发送时延：主机或路由器发送数据帧所需要的时间。发送时延=数据帧长度/发送速率。</li><li>传播时延：电磁波在信道中传播一定的距离需要花费的时间。传播时延=信道长度/电磁波在信道上的传播速率。</li><li>处理时延：主机或路由器在收到分组时需要花费一定的时间进行处理。</li><li>排队时延：分组在经过网络传输时，进入路由器需要在输入队列中排队等待处理，处理完成后还要再输出队列中排队等待转发。</li></ul></li><li>时延带宽积：带宽可以看成一条路的宽度，而传播时延可以堪称长度，因此时延带宽积可以表示这段链路可容纳多少个比特。时延带宽积=传播时延*带宽。</li><li>往返时间：RTT(Round-Trip Time)=发送时间+返回时间，发送时间=数据长度/发送速率。应用场景当 A 向 B 发送数据后，B 向 A 发送确认，A 才会继续发送数据。</li><li>利用率：分信道利用率和网络利用率。信道利用率指某信道有百分之几的时间是被利用的(有数据通过的)，而网络利用率则是全网络的信道利用率的加权平均值，网络当前时延=网络空闲时延/(1-利用率)。</li></ul><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><p>各体系比对：</p><ul><li>OSI 体系结构复杂不实用。</li><li>TCP/IP 体系结构得到了广泛的应用，但是其网络接口层用于解决不同网络的互联问题，但实际没有什么具体的内容。</li><li>五层协议：对 OSI 和 TCP/IP 体系结构进行折中，能更好的体现计算机网络的原理。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/computerNetworkArchitecture.png"></p><p>体系结构的构造：</p><ol><li>为了进行通信，需要端到端连接，所以要先设计网。已知有电路交换和分组交换两种网，电路交换在现实生活中的场景是很久以前的拨号连接，需要通过电话线连接网络，一打电话就无法上网，一上网就无法打电话，非常的不适用，而且建立连接代价太高，所以抛弃。而分组交换又分为虚电路和数据报两种，虚电路的特点是实时性且实现复杂，互联网没有这个需求，所以使用数据报。此处可以使用物理电路传输数据报，因此需要一个可以将数据与物理信号相互转化的层，也就是物理层。</li><li>当连接的主机变多了，就不知道要发送数据给哪个主机了，而每个主机出场时有一个全球唯一的 MAC 地址，因此可以通过 MAC 地址来寻址发送数据，这就是物理链路层。</li><li>主机越来越多，通过 MAC 地址寻址已经变得很困难了，因为 MAC 地址分布无规律，无法通过 MAC 地址得知该主机所处的大概位置。因此出现了新的逻辑地址 IP，通过 IP 确认唯一的主机进行寻址。此时网络层就诞生了。</li><li>因为对数据连接的需求不同，有些人想要速度更快，不介意数据丢失，因此出现了 UDP，有些人不介意速度慢点，但是要求数据必须是可靠的，因此出现了 TCP，而且一台主机不可能就和一个服务器进行通信，为了实现并行通信，因此有了端口号，这就是运输层。</li><li>为了应对越来越多不同的需求，对这些常用需求进行封装，因此诞生了应用层。</li></ol><table><thead><tr><th>各层</th><th>作用</th></tr></thead><tbody><tr><td>物理层</td><td>在物理层上所传数据的单位是比特。</td></tr><tr><td>数据链路层</td><td>在两个相邻结点之间传送数据时，数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻结点间的链路上传送帧。每一帧包括数据和必要的控制信息(同步信息、地址信息、差错控制等)。</td></tr><tr><td>网络层</td><td>负责为分组交换(分组在 TCP/IP 中常称为数据包)网上的不同主机提供通信服务(IP)。</td></tr><tr><td>运输层</td><td>负责向两台主机之间的通信提供通用的的数据传输服务(TCP 或 UDP)。</td></tr><tr><td>应用层</td><td>通过应用进程间的交互来完成特定网络应用。</td></tr></tbody></table><p>各层之间通过不同的协议(控制两个或多个通信实体进行通信的规则)进行通信。常见的协议：</p><ul><li>网络层协议：IP 协议、ICMP 协议、ARP 协议、RARP 协议。</li><li>传输层协议：TCP 协议、UDP 协议。</li><li>应用层协议：FTP 协议、Telnet 协议、SMTP 协议、HTTP 协议、RIP 协议、NFS 协议、DNS 协议、RSTP 协议。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java I/O 体系</title>
      <link href="/posts/9185735d/"/>
      <url>/posts/9185735d/</url>
      
        <content type="html"><![CDATA[<p>Java I/O 流大致可以分成如下五类:</p><ul><li>对象操作: Serializable</li><li>磁盘操作: File</li><li>字节操作: InputStream 和 OutputStream</li><li>字符操作: Reader 和 Writer</li><li>网络操作: Socket 和 Datagram</li><li>新 I/O 流操作: NIO</li></ul><p>Java I/O 流使用了装饰器模式作为其设计模式，此处以 InputStream 为例，InputSteam 是一个抽象组件，FileInputStream、ByteArrayInputStream 等类都是可以被装饰者包起来的具体组件，而 FilterInputStream 就是一个抽象的装饰者，其具体的装饰者有 PushbackInputStream、BufferedInputStream、DataInputStream 和 LineNumberInputStream 等，它们都是在装饰类的基础上新增一些功能，例如当需要一个具有缓存功能的字节流对象时，只需要使用 BufferedInputStream 包裹 FileInputStream 类即可实现。</p><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/InputStream.png"></p><p>实现 AutoCloseable 接口不需要手动关闭流。</p><h2 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h2><p>序列化: 将一个对象转换成字节序列，方便存储和传输。通常使用 ObjectOutputStream.writeObject() 进行序列化，使用 ObjectInputStream.readObject() 反序列化。序列化不会对静态变量进行序列化，因为序列化只是保存对象的状态，静态变量属于类的状态。</p><p>Serializable: 序列化的类需要实现 Serializable 接口，它只是一个标准，没有任何方法需要实现，但是如果不去实现它的话而进行序列化，会抛出异常。</p><p>transient: transient 关键字可以使一些属性不会被序列化。</p><h2 id="磁盘操作"><a href="#磁盘操作" class="headerlink" title="磁盘操作"></a>磁盘操作</h2><p>File 类可以用于表示文件和目录的信息，但是它不表示文件的内容。Java7 开始可以使用 Paths 和 Files，而 Path 可以直接取代 File。Path 可以通过 Paths 的 get 方法获取文件路径(字符串或 URI 形式都可)。</p><p>常用的 Files 方法:</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>createDirectories()</td><td>创建一个完整的路径，即包括所有的上层目录。</td></tr><tr><td>createFile()</td><td>创建新文件。</td></tr><tr><td>exists()</td><td>文件是否存在。</td></tr><tr><td>copy()</td><td>可以从文件复制到文件或文件复制到输出流或者输入流复制到文件，还有一个可选 CopyOption 选项拥有三个参数: ATOMIC_MOVE(将文件作为原子文件系统操作移动。)、COPY_ATTRIBUTES(将属性复制到新文件。)、REPLACE_EXISTING(替换现有文件，如果存在)。</td></tr><tr><td>isDirectory()</td><td>是否是一个文件夹。</td></tr><tr><td>readAttributes()</td><td>读取文件权限，可以通过 PosixFileAttributes 类修改。</td></tr><tr><td>newBufferedWriter()</td><td>带缓冲区的文件读写。</td></tr><tr><td>newDirectoryStream()</td><td>遍历一个文件夹。</td></tr><tr><td>walkFileTree()</td><td>遍历整个文件目录。</td></tr></tbody></table><h2 id="字节操作"><a href="#字节操作" class="headerlink" title="字节操作"></a>字节操作</h2><p>字节操作即对文件数据以字节的形式进行读取操作。如下是一个文件字节读入输出的小例子:</p><pre class=" language-java"><code class="language-java">File src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\blog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">;</span>BufferedInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>BufferedOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cnt <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>编码与解码: 编码即将字符转化成字节，而解码就是把字节重新组合成字符。若编码和解码使用的编码方式不一致会出现乱码。常用的编码有如下三种:</p><ul><li>GBK 编码: 中文字符占2个字节，英文字符占1个字节；</li><li>UTF-8 编码: 中文字符占3个字节，英文字符占1个字节；</li><li>UTF-16BE 编码: 中文字符和英文字符都占3个字节。BE(big-endian)即大端(将高位的字节放在低地址表示)的意思，相应的有 LE(little-endian)即小端(将高位的字节放在高地址表示)的意思。UTF-16 没有指定后缀，则开始的两个字节表示该字节数组是大端(FE FF)还是小端(FF FE)。</li></ul><p>Java 的内存编码使用双字节编码 UTF-16be，因为 char 类型 16 位即两个字节，所以通过双字节编码可以使用一个 char 存储一个中文或一个英文。</p><p>String 使用<code>byte[] bytes = getBytes();</code>方法进行编码，不带参则是使用默认的编码方式，默认编码方式与平台有关通常为 UTF-8，解码使用<code>new String(bytes, "UTF-8");</code>的方式。</p><h3 id="Reader-与-Writer"><a href="#Reader-与-Writer" class="headerlink" title="Reader 与 Writer"></a>Reader 与 Writer</h3><p>不管是磁盘还是网络传输，最小的存储单元都是字节，而不是字符。但是在程序中操作的通常是字符形式的数据，因此 Java 提供了对字符进行操作的方法。InputStreamReader 实现从字节流解码成字符流，而 OutputStreamWriter 实现字符流编码成为字节流。如下是一个文件字节读入输出的小例子:</p><pre class=" language-java"><code class="language-java">File src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\nana\\桌面\\note.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\nana\\桌面\\note1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FileReader fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>FileWriter fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">;</span>BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">)</span><span class="token punctuation">;</span>BufferedWriter bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fileWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>String line<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="网络操作"><a href="#网络操作" class="headerlink" title="网络操作"></a>网络操作</h2><ul><li><p>InetAddress 类表示Internet协议(IP)地址，其常用方法如下:</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getLocalHost()</td><td>返回本地主机的地址。</td></tr><tr><td>getByName(String host)</td><td>根据域名创建 InetAddress。</td></tr><tr><td>getByAddress(String host, byte[] addr)</td><td>根据提供的主机名和 IP 地址(只提供 IP 地址也可以)创建 InetAddress。</td></tr><tr><td>getAddress()</td><td>返回此 InetAddress 对象的原始 IP 地址。</td></tr></tbody></table></li><li><p>URL 表示统一资源定位符，可以当成是指向万维网上的”资源”的指针。如下是从 URL 指向的资源中读取数据的小例子:</p><pre class=" language-java"><code class="language-java">  URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  InputStream inputStream <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 此处可以指定编码方式</span>  InputStreamReader inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>  BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>  String line<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>Socket(TCP 通信) 是一个抽象层，应用程序可以通过它发送或接收数据，对其进行操作如同操作 I/O 流一样。Java 中 Socket 类作为客户端，ServerSocket 类作为服务端，并通过 InputStream 和 OutputStream 进行通信。简单例子如下:</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/30 20:46   * @Description 服务端   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketServer</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">50000</span><span class="token punctuation">;</span>          ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 开启服务端监听等待接收消息，使用客户端回复消息或者获取消息</span>              Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              OutputStream outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              InputStreamReader inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>              OutputStreamWriter outputStreamWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>              BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>              BufferedWriter bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>outputStreamWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 接收数据</span>              String line<span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">// 发送数据</span>              bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 即关闭了数据发送，之后只能接收数据，如果不是用这个或者socket关闭则会出现SocketException</span>              socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/30 20:59   * @Description 客户端   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketClient</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          InetAddress disHost <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> disPort <span class="token operator">=</span> <span class="token number">50000</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 参数分别为服务端ip，服务端端口</span>          Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>disHost<span class="token punctuation">,</span> disPort<span class="token punctuation">)</span><span class="token punctuation">;</span>          InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          OutputStream outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          InputStreamReader inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>          OutputStreamWriter outputStreamWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>          BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>          BufferedWriter bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>outputStreamWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 发送数据</span>          String message <span class="token operator">=</span> <span class="token string">"测试连接"</span><span class="token punctuation">;</span>          bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>          bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 即关闭了数据发送，之后只能接收数据，如果不是用这个或者socket关闭则会出现SocketException</span>          socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 接收数据</span>          String line<span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 当关闭socket的时候，该socket的输入/输出流也会关闭，如果关闭输出流，socket也会被关闭。</span>          socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>Datagram(UDP 通信)，Java 通过 DatagramSocket(通信类) 和 DatagramPacket(数据包类) 实现 UDP 通信。简单例子如下:</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/30 21:42   * @Description 客户端   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatagramClient</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 创建数据报套接字</span>          <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">40000</span><span class="token punctuation">;</span>          DatagramSocket datagramSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content1 <span class="token operator">=</span> <span class="token string">"发送！"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 需要发送的数据包参数: 数据，数据长度，目标ip地址，目标端口</span>          DatagramPacket datagramPacket1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>content1<span class="token punctuation">,</span> content1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 发送数据</span>          datagramSocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>datagramPacket1<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 创建数据报包，发送用</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          DatagramPacket datagramPacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> content<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 接收数据报包</span>          datagramSocket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>datagramPacket<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 从数据报包中获取数据</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> datagramPacket<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          datagramSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/30 21:41   * @Description 服务端   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatagramServer</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 创建数据报套接字</span>          <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">50000</span><span class="token punctuation">;</span>          DatagramSocket datagramSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 创建数据报包，发送用</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          DatagramPacket datagramPacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> content<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 接收数据报包</span>          datagramSocket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>datagramPacket<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 从数据报包中获取数据</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> datagramPacket<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content1 <span class="token operator">=</span> <span class="token string">"发送！"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 需要发送的数据包参数: 数据，数据长度，目标ip地址，目标端口</span>          DatagramPacket datagramPacket1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>content1<span class="token punctuation">,</span> content1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token number">40000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 发送数据</span>          datagramSocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>datagramPacket1<span class="token punctuation">)</span><span class="token punctuation">;</span>          datagramSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><p>NIO 即新 I/O，弥补了原 I/O 流的不足，提供了高速和面向块的 I/O。面向流的 I/O 一次处理一个字节数据，其速度较慢，而面向块的 NIO 一次处理一个数据块，速度比按流处理数据快很多。Java 以 NIO 为基础重新实现了 java.io.*，包中的一些类包含以块的形式读写数据的方法，因此即使是在面向流的系统中，处理速度也很快。</p><h3 id="通道与缓冲区"><a href="#通道与缓冲区" class="headerlink" title="通道与缓冲区"></a>通道与缓冲区</h3><ul><li><p>通道 Channel 是对原 I/O 包中的流的模拟，可以通过它读取和写入数据。通道与流的不同之处在于，流只能在一个方向上移动(一个流必须是 InputStream 或者 OutputStream 的子类)，而通道是双向的，可以用于读、写或者同时用于读写。常用的通道有如下四种:</p><ul><li>FileChannel: 从文件中读写数据；</li><li>DatagramChannel: 通过 UDP 读写网络中数据；</li><li>SocketChannel: 通过 TCP 读写网络中数据；</li><li>ServerSocketChannel: 可以监听新进来的 TCP 连接，对每一个新进来的连接都创建一个 SocketChannel。</li></ul></li><li><p>发送给一个通道的所有数据都必须首先放到缓冲区中，从通道中读取的任何数据都要先读到缓冲区中。常用缓冲区有 ByteBuffer、CharBuffer、ShortBuffer、IntBuffer、LongBuffer、FloatBuffer 和 DoubleBuffer。缓冲区拥有三个变量: capacity(最大容量)、position(当前已经读写的字节数) 和 limit(还可以读写的字节数)。初始时，position 为0，limit 等于 capacity。将数据读入缓冲区时，将 position 的位置增加读入数据的大小，limit 不变。当需要将缓冲区数据输出至通道时，需要先调用 flip() 方法，该方法将 limit 设置为当前 position，再将 position 置为0，每输出一个字节 position 就自增1，position 等于 limit 时缓冲区无数据。最后数据输出完成时，需要调用 clear() 方法将 position 和 limit 的值归位(position=0，limit=capacity)。</p></li><li><p>使用 NIO 的通道缓和冲区进行文件复制案例如下:</p><pre class=" language-java"><code class="language-java">  File src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\note.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  File dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\note1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>  FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">;</span>  FileChannel in <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  FileChannel out <span class="token operator">=</span> fileOutputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 分配一个新的直接字节缓冲区，其大小为1024</span>  ByteBuffer byteBuffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> r <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 将读切换成写</span>      byteBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 清空缓冲区，相当于将写切换成读</span>      byteBuffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>NIO 实现了 I/O 多路复用中的 Reactor 模型(可以处理一个或多个输入源，通过 Service Handler 同步的将输入事件采用多路复用分发给多个相应的 Request Handler 处理)，一个线程 Thread 使用一个选择器 Selector 通过轮询的方式去监听多个通道 Channel 上的事件，从而让一个线程就可以处理多个事件。只有 Socket Channel 才能配置为非阻塞。因此 NIO 常常被叫做非阻塞 I/O。</p><p>NIO 套接字小例子:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/30 22:52 * @Description NIO 实现服务端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NioSocketServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建选择器</span>        Selector selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将通道注册至选择器中</span>        ServerSocketChannel serverSocketChannel <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将通道设置成非阻塞模式</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指定注册事件，可以使用或操作符选择多个。OP_ACCEPT: 用于接受操作(如接收到一个客户端的请求就会触发)；OP_CONNECT: 用于套接字连接；OP_READ: 读操作；OP_WRITE: 写操作</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置服务端地址，此处使用服务端套接字通道创建服务端socket</span>        ServerSocket serverSocket <span class="token operator">=</span> serverSocketChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 服务端socket绑定地址</span>        InetSocketAddress address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocket<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置监听，阻塞直至监听到一个事件为止</span>            selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取到达的事件</span>            Set<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> keys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Iterator<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> keyIterator <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>keyIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SelectionKey key <span class="token operator">=</span> keyIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 相应接受操作，将请求客户端注册制selector</span>                    ServerSocketChannel tempServerSocketChannel <span class="token operator">=</span> <span class="token punctuation">(</span>ServerSocketChannel<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 服务器为每个新连接创建一个 SocketChannel，用于从读取客户端发送的数据</span>                    SocketChannel socketChannel <span class="token operator">=</span> tempServerSocketChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 将发起请求的客户端注册至selector，并设置为读操作，在第二轮循环中可以对其发送的数据进行读取</span>                    socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 相应读操作</span>                    SocketChannel socketChannel <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">readDataFromSocketChannel</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    socketChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 删除最近一次next的对象</span>                keyIterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 读取数据     * @param socketChannel 客户端通道     * @return 返回解码的数据     * @throws IOException io异常     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">readDataFromSocketChannel</span><span class="token punctuation">(</span>SocketChannel socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ByteBuffer byteBuffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            byteBuffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            byteBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            byteBuffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OutputStream out <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String s <span class="token operator">=</span> <span class="token string">"测试连接"</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="内存映射文件"><a href="#内存映射文件" class="headerlink" title="内存映射文件"></a>内存映射文件</h3><p>内存映射文件是由一个文件到一块内存的映射，因为整个文件都在内存中，所以可以把文件当成一个非常大的数组进行随机访问。其速度比 I/O 流和 NIO 都要快。</p><pre class=" language-java"><code class="language-java">File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\nana\\桌面\\note1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 只读</span><span class="token comment" spellcheck="true">// FileChannel fileChannel = FileChannel.open(file.toPath());</span><span class="token comment" spellcheck="true">// 可读可写</span>FileChannel fileChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过通道的 map 方法映射内存，READ_WRITE: 读/写映射；READ_ONLY: 只读映射；PRIVATE: 私有(写时复制)映射模式，相当于复制一份不会影响文件</span>MappedByteBuffer mappedByteBuffer <span class="token operator">=</span> fileChannel<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>FileChannel<span class="token punctuation">.</span>MapMode<span class="token punctuation">.</span>READ_WRITE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 容器</title>
      <link href="/posts/f431e3b/"/>
      <url>/posts/f431e3b/</url>
      
        <content type="html"><![CDATA[<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>java.util.Collection 是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法。当多个线程对同一个集合的内容进行操作时，可能会产生 Fail-Fast 异常，即在迭代过程中如果集合对象的结构发生变化例如添加或删除了一个元素或调整了集合的大小就会改变 modCount(用于记录结构发生变化的次数) 的值，此时会抛 ConcurrentModificationException 异常，此时使用线程安全的集合即可解决问题。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/Collection.png"></p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>List 称为有序集合，允许包含重复元素。</p><ul><li>ArrayList: 基于动态数组实现，查找快，增删慢，线程不安全。如果要使用线程安全的 ArrayList 可以考虑使用 CopyOnWriteArrayList 类，该类的写操作在复制的数组中进行(需要加锁)，读操作则在原始数组中进行，当写操作完成时把原始数组指向新的数组，因为其实现了读写分离，所以很适合读多写少的应用场景，但是复制的数组多占用了一倍的存储空间，读操作也不能读取实时性的数据，因此不适合内存敏感以及实时性要求高的场景。</li><li>Vector: 和 ArrayList 类似，但是它是线程安全的，所以效率比 ArrayList 低。Stack 类继承拓展了 Vector 的操作。</li><li>LinkedList: 基于双向链表实现，查找慢，增删快，线程不安全。而且可以用作栈、队列和双向队列。</li></ul><p>查找多增删少用 ArrayList，反过来用 LinkedList，如果是多线程使用则使用 Vector。</p><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><ul><li>LinkedList: 如果 Queue 使用 LinkedList 实现，可以使用它实现双向队列。</li><li>PriorityQueue: 基于堆结构实现，可以用它实现优先队列(队头是最小元素)，不允许使用 null，其容量会自动增大减少始终保持和队列中拥有的元素一样大，但是它的线程是不安全的。</li><li>ConcurrentLinkedQueue: 线程安全的队列，队头保存最长元素，队尾是最短元素，不允许使用 null。</li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set 称为无序集合，不允许包含重复元素，最多只能拥有一个空元素。</p><ul><li>TreeSet: 基于红黑树实现，且实现了 SortedSet 接口，因此支持有序性操作(排序)，但线程是不安全的，其查找时间复杂度为 O(logn)。</li><li>HashSet: 基于哈希表实现，支持快速查找，但不支持有序性操作，不允许有相同值存在(会自动覆盖)，其线程是不安全的，查找时间复杂度为 O(1)。</li><li>LinkedHashSet: 具有 HashSet 的查找效率，并且内部使用双向链表维护元素的插入顺序即插入顺序是可预测的，但是线程是不安全的。</li></ul><p>需要排序用 TreeSet， 否则 HashSet，如果不需要排序但是需要保持插入顺序则使用 LinkedHashSet。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map 是一个接口，它是以键值对的形式进行存储的，且不能包含重复的键，每个键只能对应一个值。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/Map.png"></p><ul><li>TreeMap: 基于红黑树实现，其线程是不安全的。</li><li>HashMap: 基于采用了拉链法解决碰撞冲突的哈希表(数组+链表，链表超过一定值改用数组+红黑树，减少链表查询时间)实现，其线程是不安全的，允许使用 null 键值。</li><li>LinkedHashMap: 使用双向链表来维护元素的插入顺序即插入顺序是可预测的，顺序为插入顺序或者最近最少使用(LRU)顺序，其线程是不安全的。</li><li>Hashtable 与 ConcurrentHashMap: 和 HashMap 类似，但是它是线程安全的且不允许使用 null 键值。但是 Hashtable 是 Java 的一个遗留类，所以不应该去使用它，可以通过使用 ConcurrentHashMap 来支持线程安全，且 ConcurrentHashMap 引入了分段锁，因此效率很高，但同样不允许使用 null 键值。</li><li>WeakHashMap: 和 HashMap 类似，其线程也是不安全的。WeakHashMap 具有弱键，当 WeakHashMap 中的键值对不再普通使用时会在下一次垃圾回收时自动被回收。常用于实现缓存，通过 WeakHashMap 来引用缓存对象，而 JVM 对这部分缓存进行回收。Tomcat 中的 ConcurrentCache 就使用了 WeakHashMap 来实现缓存，常用对象放入 eden 中不会被回收，不常用的对象放入 longterm(使用 WeakHashMap 实现) 中，longterm 中不用的对象会被回收，put 方法会优先添加 eden，若 eden 存储容量超过了将 eden 的所有对象存储在 longterm 中，而 get 方法会先从 eden 中读取若没找到则在 longterm 中寻找并将其放入 eden。</li></ul><p>需要排序使用 TreeMap，否则 HashMap，如果不需要排序但是需要保持插入顺序则使用 LinkedHashMap。如果是多线程使用则使用 ConcurrentHashMap，不要使用 Hashtable。</p><h2 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h2><p>Collection 继承了 Iterable 接口，其中的 iterator 方法能够产生一个 Iterator 对象，通过这个对象就可以迭代遍历 Collection 中的元素。同样的也可以使用高级 for 直接遍历集合。此处使用了迭代器模式。</p><h2 id="util"><a href="#util" class="headerlink" title="util"></a>util</h2><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><p>java.util.Arrays 是一个工具类，主要包含了操纵数组的各种方法。常用的方法有如下:</p><table><thead><tr><th>常用方法</th><th>作用</th></tr></thead><tbody><tr><td>Arrays.sort(Object[] array)</td><td>对数组进行升序排序。</td></tr><tr><td>fill(Object[] array, Object object)</td><td>为数组元素填充相同的值。</td></tr><tr><td>toString(Object[] array)</td><td>返回数组的字符串形式。</td></tr><tr><td>deepToString(Object[][] arrays)</td><td>返回多维数组的字符串形式。</td></tr><tr><td>asList(T… a)</td><td>将数组转换成 List。(使用了适配器模式)</td></tr></tbody></table><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><p>java.util.Collections 是一个工具类。它包含有各种有关集合操作的静态多态方法。常用的方法有如下:</p><table><thead><tr><th>常用方法</th><th>作用</th></tr></thead><tbody><tr><td>shuffle(Collection)</td><td>洗牌即将当前集合内的数据进行随机排序。</td></tr><tr><td>reverse(Collection)</td><td>逆序排序即对当前集合的元素按照相反的顺序进行排序。</td></tr><tr><td>sort(Collection)</td><td>对当前集合进行升序排序。</td></tr><tr><td>binarySearch(Collection, Object o)</td><td>二分查找指定集合中的元素，返回所查找元素的索引。</td></tr><tr><td>replaceAll(List list, Object old, Object new)</td><td>替换指定元素为其它元素，若要替换的值存在则返回 true，否则返回 false。</td></tr><tr><td>copy(List m, List n)</td><td>将集合 n 中的元素全部复制到 m 中,并且覆盖相应索引的元素。</td></tr><tr><td>swap(List list, int i, int j)</td><td>交换集合中指定的元素。</td></tr><tr><td>fill(List list, Object o)</td><td>为数组元素填充相同的值。</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 基础</title>
      <link href="/posts/a019e08c/"/>
      <url>/posts/a019e08c/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><table><thead><tr><th>数据类型</th><th>位数</th><th>默认值</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>8</td><td>0</td><td>Byte</td></tr><tr><td>short</td><td>16</td><td>0</td><td>Short</td></tr><tr><td>int</td><td>32</td><td>0</td><td>Integer</td></tr><tr><td>long</td><td>64</td><td>0L</td><td>Long</td></tr><tr><td>float</td><td>32</td><td>0.0f</td><td>Float</td></tr><tr><td>double</td><td>64</td><td>0.0d</td><td>Double</td></tr><tr><td>char</td><td>16</td><td>‘\u0000’</td><td>Character</td></tr><tr><td>boolean</td><td>8</td><td>false</td><td>Boolean</td></tr></tbody></table><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>基本类型都有包装类型，对应的包装类型表参照上表，基本类型与其对应的包装类型之间的赋值使用自动装箱(Integer.valueof(num))与拆箱完成(x.intValue())。包装类都被声明为 final，所以都不能被继承。</p><h3 id="缓存池"><a href="#缓存池" class="headerlink" title="缓存池"></a>缓存池</h3><p><code>Integer.valueOf()</code>方法会优先使用缓冲池中的对象，而<code>new Integer()</code>方法每次都会新建一个对象。但是也并不是说当<code>Integer a = Integer.valueOf(num);Integer b = Integer.valueOf(num);</code>时两者就一定相等。这里的缓冲池还有大小之分，若 num 在缓冲池大小内则会优先使用缓冲池中的 num 对象，否则会新建一个对象。例如 Integer 的缓冲池大小为 -128~127，所以当 num 超过这个大小时，a 不会等于 b。这里有一点特殊的是 Integer 的上界可以在启动 JVM 时通过输入参数<code>-XX:AutoBoxCacheMax=&lt;size&gt;</code>手动更改。</p><p>基本类型对应的缓冲池大小如下：</p><ul><li>boolean 为 true 或 false。</li><li>int、short 和 byte 在 -128~127 之间。</li><li>char 在 \u0000 到 \u007F 之间。</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h3><p>String 类被声明为 final，因此 String 类同样不可被继承。在 Java8 中 String 类通过<code>private final char value[]</code>存储数据，但是在 Java9 中 String 类的实现改用<code>private final byte[] value</code>存储数据，同时使用<code>private final byte coder</code>来标识使用了哪种编码。因为 String 类中的 value 数组都被声明为了 final，且内部没有改变 value 数组的方法，保证了 String 是不可变的。</p><p>String 不可变带来的好处：</p><ul><li>String 的 hash 值也不会改变，因此 String 只需计算一次 hash 值。</li><li>若有内容相等的的 String 可以从字符串常量池中直接获取(相当于缓冲区了)。</li><li>当多个线程调用 String 时也不会产生问题，是线程安全的。</li><li>String 作为参数传递时也可以保证参数不会被改变，安全性高。例如一个类使用了值为 “A” 的 String，该 String 的值被改变成 “B” 时，使用 String 的那个类仍然将这个 String 当作 “A”，但是改变 String 以及后来使用 String 的类都会将 String 当作 “B” 看待，会产生一系列的问题。</li></ul><h3 id="String、StringBuilder-和-StringBuffer"><a href="#String、StringBuilder-和-StringBuffer" class="headerlink" title="String、StringBuilder 和 StringBuffer"></a>String、StringBuilder 和 StringBuffer</h3><p>String 是不可变的；StringBuilder 和 StringBuffer 是可变的。</p><p>String 是线程安全的；StringBuilder 是线程不安全的；StringBuffer 通过使用 synchronized 进行同步，因此线程是安全的。</p><p>在 Java 中字符串的拼接默认使用的其实是 StringBuffer。</p><h3 id="String-Pool"><a href="#String-Pool" class="headerlink" title="String Pool"></a>String Pool</h3><p>字符串常量池(String Pool)保存着所有字符串字面量(literal strings)，这些字面量在编译时期就确定。使用 String Pool 有两种方法：</p><ul><li>直接使用双引号声明出来的 String 对象会直接存储在常量池中。</li><li>如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern 方法。intern 方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串存入常量池中。</li></ul><p>在 Java7 之前，String Pool 被放在运行时常量池中，属于永久代，但是因为其存储空间有限，在大量使用字符串的情况下会导致内存溢出错误，所以在 Java7 中，String Pool 被移到堆中。</p><h3 id="new-String"><a href="#new-String" class="headerlink" title="new String()"></a>new String()</h3><p><code>String s = new String("xxx")</code>的方法会在编译时创建”xxx”字符串字面量并将其保存在字符串常量池中(如果”xxx”不存在于常量池中的话)，然后 new String(“xxx”)会在堆中创建一个 String s 的对象，并赋值为”xxx”(从常量池中引用)。</p><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>Java 不能隐式执行向下转型，因为这会造成精度降低。例如<code>float f = 1.1</code>，其中1.1是 double 型，占用64位，而 float 占用32位，将64位转换成32位会导致精度降低。但是如果使用算术运算符例如<code>f += 1</code>或<code>f++</code>之类的，Java 会自动执行隐式类型转换，相当于<code>f = (short) (f + 1)</code>，整体进行向下转型。</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><ul><li>数据：声明数据为常量，可以是编译时常量，也可以是运行时初始化后不能被改变的常量。对于基本类型，final 使数值不能改变；对于引用类型，final 使引用不能改变，但是被引用的对象本身可以修改。</li><li>方法：声明方法则该方法无法被子类重写(private 方法隐式地被指定为 final)。</li><li>类：声明类则该类无法被继承。</li></ul><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><ul><li>静态变量：又称为类变量，可以通过类名调用。与实例变量不同在于，实例变量每创建一个实例就会产生一个实例变量，实例摧毁则实例变量摧毁。</li><li>静态方法：类加载时静态方法就存在了，不需要依赖任何实例。静态方法不能是抽象方法，同样的不能使用 this 和 super 关键字。</li><li>静态语句块：类加载时静态语句块会执行一次。</li><li>静态内部类：非静态内部类依赖于外部类的实例，需要先创建外部类的实例才能用这个实例去创建非静态内部类，而静态内部类可以直接调用不用这么复杂。静态内部类不能访问外部类的非静态变量和方法。</li><li>静态导包：例如<code>import java.lang.Math.*;</code>调用方法为<code>Math.sqrt(1);</code>，使用静态导包<code>import static java.lang.Math.*;</code>调用方法为<code>sqrt(1);</code>。</li><li>初始化顺序：先静态(静态变量、静态语句块)，后普通(实例变量、普通语句块)，最后构造函数。例如父类(静态)→子类(静态)→父类(普通)→父类(构造函数)→子类(普通)→子类(构造函数)。</li></ul><h3 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h3><p>该关键字标记的成员变量不参与序列化过程。</p><h2 id="Object-通用方法"><a href="#Object-通用方法" class="headerlink" title="Object 通用方法"></a>Object 通用方法</h2><h3 id="euqals"><a href="#euqals" class="headerlink" title="euqals()"></a>euqals()</h3><p>equals()即判断两个引用对象是否等价，其实现为：</p><ul><li>如果传入对象为 null，返回 false；</li><li>检查是否为同一个对象的引用，如果是直接返回 true；</li><li>检查是否是同一个类型(getClass())，如果不是，直接返回 false；</li><li>将 Object 对象进行转型，判断每个关键域是否相等。</li></ul><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h3><p>两个等价的对象其散列值一定相同，但是散列值相同的两个对象不一定等价，所以在覆写 equals() 方法时应当总是覆写 hashCode() 方法。</p><p>理想的哈希函数应当具有均匀性即将不相等的对象均匀分布到所有可能的哈希值上。这就要求哈希函数对所有域的值都进行考虑，可以将每个域都当成 R 进制的某一位，然后组成一个 R 进制的整数。</p><p>R 一般取奇数，如果是偶数，当乘法溢出时最高位会丢失(乘2等于向左移动1位)。由于 Java 地址值的位数关系，R 一般取31。当31乘以 x 时编译器会自动优化为<code>(x&lt;&lt;5) - x</code>提升效率。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h3><table><thead><tr><th>作用域</th><th>当前类</th><th>同一包</th><th>子孙类</th><th>其他包</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>需要注意的是默认权限和保护权限：默认权限同包不同类可以访问，不同包不同类不可以访问；保护权限同包不同类可以访问，不同包情况下子类可以访问。</p><p>子类如果要重写父类的方法，则子类中该方法的访问级别不能低于父类中该方法的访问级别，这是为了确保使用父类实例的时候可以用子类实例去代替，确保满足里氏替换原则。</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类和抽象方法都使用 abstract 关键字进行声明。如果一个类中包含抽象方法，那么这个类必须声明为抽象类。抽象类不能被实例化，只能被继承。</p><h3 id="接口类"><a href="#接口类" class="headerlink" title="接口类"></a>接口类</h3><p>接口类是抽象类的延申，解决了 Java 不能多继承的问题。接口类在 Java8 之前只能看成是一个完全抽象的类，它不能有任何的方法实现，但是从 Java8 开始，接口类通过关键字 default 也可以拥有默认的方法实现。</p><p>接口的字段必须是 static 和 final 类型的，且访问权限必须是 public。</p><h3 id="super、重写和重载"><a href="#super、重写和重载" class="headerlink" title="super、重写和重载"></a>super、重写和重载</h3><p>super 可以让子类访问父类的构造函数，或者调用父类的方法。</p><p>重写指子类实现了与父类在方法声明上完全相同的一个方法。需要注意如下三点：</p><ul><li>子类方法的访问权限必须大于等于父类方法；</li><li>子类方法的返回类型必须是父类方法返回类型或为其子类型。</li><li>子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。</li></ul><p>重载指同一个类中方法名相同，但是参数类型、参数个数或者参数顺序至少有一个不同的方法。若只有返回值不同，方法名、参数类型、参数个数和参数顺序都相同的方法不算重载。</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>每个类都有一个 Class 对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。</p><p>类加载相当于 Class 对象的加载，通过<code>Class c = 类名.class</code>或<code>Class = Class.forName("类名")</code>进行加载。</p><p>反射主要提供了如下功能：</p><ul><li>在运行时判断任意一个对象所属的类；</li><li>在运行时构造任意一个类的对象；</li><li>在运行时判断任意一个类所具有的成员变量和方法(通过反射甚至可以调用 private 方法)；</li><li>在运行时调用任意一个对象的方法。</li></ul><p>简单说就是反射可以动态地获取创建实例的类信息。通过反射获取所需实例的类信息可以极大程度地降低程序的耦合性。反射常用于调试器或测试工具获取私有成员等。虽然反射非常强大，但是其性能开销也大，反射涉及动态类型的解析，所以 JVM 无法对反射代码进行优化，因此反射操作的效率比非反射操作低很多。而且反射只能在一个没有安全限制的环境中运行。反射能够操作私有属性及方法，因此使用反射可能会导致意料之外的问题发生。通过以上种种可知，当一个功能可以不使用反射完成时最好就不使用。</p><p>Class 和 java.lang.reflect 都对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类：</p><ul><li>Field：操作类的属性。</li><li>Method：操作类的方法。</li><li>Constructor：提供了一个类的单个构造函数的信息和访问权限。</li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>所有异常类型都是内置类 Throwable 的子类，Throwable 有两个不同的分支，一个分支是 Error，它表示不希望被程序捕获或是程序无法处理的错误，例如 JVM 运行错误的栈溢出异常和内存溢出异常等；另一个分支是 Exception，而 Exception 又可以细分为不受检查异常(Unchecked Exception)和检查异常(Checked Exception)：</p><ul><li>不受检查异常：运行时异常(Runtime Exception)是不受检查异常，在程序中可以选择捕获处理或者不处理，通常这些异常都是逻辑错误引起的，程序应该从逻辑角度尽量避免这类异常的发生，例如空指针异常，数组下标越界等。</li><li>受检查异常：Runtime Exception 以外的异常统称为非运行时异常，例如 I/O 异常、 SQL 异常以及用户自定义的异常(一般步自定义受检查异常)，这类异常必须进行处理，否则程序无法通过编译。</li></ul><p>用户可以通过继承 Exception 或者其子类创建自定义异常类。</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>在集合中存储对象并在使用前进行类型转换是非常的不方便的，所以 Java 提供了泛型防止了那种情况的发生。泛型提供了编译期的类型安全，确保你只能把正确类型的对象放入集合中，避免了在运行时出 ClassCastException。</p><p>泛型是通过类型擦除来实现的，编译器在编译时擦除了所有类型相关的信息，所以在运行时不存在任何类型相关的信息。例如<code>List&lt;String&gt;</code>在运行时仅用一个 List 来表示，这样做是为了和旧版本的 Java 进行兼容。</p><p>限定通配符和非限定通配符：限定通配符对类型进行了限制，限定通配符有两种，一种是<code>&lt;? extends T&gt;</code>它通过确保类型必须是 T 的子类来设定类型的上界，另一种是<code>&lt;? super T&gt;</code>它通过确保类型必须是 T 的父类来设定类型的下界；非限定通配符<code>&lt;?&gt;</code>表示可以用任意类型来替代。泛型类型必须用限定内的类型来进行初始化，否则会导致编译错误。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Java 注解(Annotation)是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明和配置的功能。注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。包含在 java.lang.annotation 包中。注解和修饰符有些类似，应用于包、类型、构造方法、方法、成员变量、参数以及本地变量的声明语句中。例如<code>@param</code>、<code>@override</code>等，前者用于文档生成，后者用于编译时检测是否是覆盖了超类方法。</p><p>注解本质是一个继承了 Annotation 的特殊接口，其具体实现类是 Java 运行时生成的动态代理类。通过反射获取注解可以获得动态代理对象，利用代理对象调用自定义注解(接口)的方法，会最终调用  AnnotationInvocationHandler 的 invoke 方法。该方法会从 memberValues 这个 map 中索引出对应的值。而 memberValues 的来源是 Java 常量池。</p><p>java.lang.annotation 提供了四种元注解，专门注解其他的注解(在自定义注解的时候，需要使用到元注解)：</p><ul><li>@Documented – 注解是否将包含在 JavaDoc 中。</li><li>@Retention – 什么时候使用该注解。<ul><li>RetentionPolicy.SOURCE: 在编译阶段丢弃，例如检测类注解<code>@override</code>等。</li><li>RetentionPolicy.CLASS: 在类加载的时候丢弃，在字节码文件的处理中有用，注解默认使用这种方式。</li><li>RetentionPolicy.RUNTIME: 始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解的信息，自定义的注解通常使用这种方式。</li></ul></li><li>@Target – 注解用于什么地方。<ul><li>ElementType.CONSTRUCTOR: 用于描述构造器。</li><li>ElementType.FIELD: 成员变量、对象、属性(包括 enum 实例)。</li><li>ElementType.LOCAL_VARIABLE: 用于描述局部变量。</li><li>ElementType.METHOD: 用于描述方法。</li><li>ElementType.PACKAGE: 用于描述包。</li><li>ElementType.PARAMETER: 用于描述参数。</li><li>ElementType.TYPE: 用于描述类、接口(包括注解类型)或 enum 声明。</li></ul></li><li>@Inherited – 是否允许子类继承该注解。</li></ul><p>自定义注解：</p><ul><li>Annotation 类型定义为<code>@interface</code>, 所有的 Annotation 会自动继承 java.lang.Annotation 这一接口，并且不能再去继承别的类或是接口。</li><li>参数成员只能用 public 或默认这两个访问权限修饰。</li><li>参数成员只能用基本类型 byte、short、char、int、long、float、double、boolean 八种基本数据类型和 String、Enum、Class、annotations 等数据类型，以及这一些类型的数组。</li><li>要获取类方法和字段的注解信息，必须通过 Java 的反射技术来获取 Annotation 对象。</li><li>注解也可以没有定义成员，不过这样注解就没啥用了。</li></ul><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/29 19:33 * @Description 动物注解 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">enum</span> Color <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 动物颜色         */</span>        <span class="token function">DEFAULT</span><span class="token punctuation">(</span><span class="token string">"白色"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">RED</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">BLACK</span><span class="token punctuation">(</span><span class="token string">"黑色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 颜色         */</span>        <span class="token keyword">private</span> String color<span class="token punctuation">;</span>        <span class="token function">Color</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 动物名称     * @return 动物名称     */</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"动物"</span><span class="token punctuation">;</span>    Color <span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> Color<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/29 19:52 * @Description 动物信息注解 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">AnimalInfor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 国家     * @return 国家     */</span>    String <span class="token function">country</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"国家"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 价格     * @return 价格     */</span>    <span class="token keyword">double</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/29 20:11 * @Description 自定义注解测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> dogClass <span class="token operator">=</span> Dog<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Dog dog <span class="token operator">=</span> <span class="token punctuation">(</span>Dog<span class="token punctuation">)</span> dogClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> dogClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Animal animal <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dog<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dog<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>AnimalInfor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                AnimalInfor animalInfor <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>AnimalInfor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dog<span class="token punctuation">.</span><span class="token function">setInfo</span><span class="token punctuation">(</span>animalInfor<span class="token punctuation">.</span><span class="token function">country</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> animalInfor<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        dog<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Java-特点"><a href="#Java-特点" class="headerlink" title="Java 特点"></a>Java 特点</h2><ul><li>Java 是存粹的面向对象的语言。</li><li>Java 通过虚拟机从而实现跨平台特性。</li><li>Java 没有指针，它的引用可以理解为安全指针。</li><li>Java 支持自动垃圾回收。</li><li>Java 不支持多重继承，只能通过实现多个接口来达到相同目的。</li><li>Java 不支持操作符重载(把已经定义的、有一定功能的操作符进行重新定义，来完成更为细致具体的运算等功能)。</li><li>Java 的 goto 是保留字，但是不可用。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之字符串</title>
      <link href="/posts/45407bae/"/>
      <url>/posts/45407bae/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h2><h3 id="键索引计数法"><a href="#键索引计数法" class="headerlink" title="键索引计数法"></a>键索引计数法</h3><p>假设将一个班级的学生分5组，按组进行排序。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 学生数组长度，共多少人 */</span><span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 学生分成的组数 */</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 辅助数组，用于排序 */</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> aux <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 索引表，例如第一组3人，第二组5人，则第一组从0开始索引，第二组从3开始索引 */</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 计算出现频率，即每组多少人，方法key()为获得学生的组号 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    count<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 将频率转化成索引，即第一组从下标哪开始到哪，第二组从下标哪开始到哪等 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    count<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 将学生按组分类，例如第二组学生第一个从下标3开始存，存了之后索引表第二组索引自增一，下一个第二组学生就从下标4开始存等 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    aux<span class="token punctuation">[</span>count<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 将数据从辅助数组复制回原数组 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="低位优先字符串排序"><a href="#低位优先字符串排序" class="headerlink" title="低位优先字符串排序"></a>低位优先字符串排序</h3><p>低位优先(Least Significant Digit first, LSD)的字符串排序算法能够稳定地将定长字符串排序。若字符串的长度为 n，那么从右向左以每个位置的字符作为键，用键索引计数法将字符串排序 n 遍即可获得有序字符串。只能适用于字符串长度相同的情况。可以用于基数排序。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/28 11:31 * @Description 低位优先字符串排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lsd</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 低位优先排序字符串     * @param a 等长字符串数组     * @param w 字符串长度     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> aux <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从右往左每个字符当键</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> w <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 索引表</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 计算出现频率</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 遍历所有字符串，计算第i位键频率</span>                count<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将频率转换为索引</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将元素分类</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>                aux<span class="token punctuation">[</span>count<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 回写</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"345"</span><span class="token punctuation">,</span> <span class="token string">"678"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Lsd<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s1 <span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="高位优先字符串排序"><a href="#高位优先字符串排序" class="headerlink" title="高位优先字符串排序"></a>高位优先字符串排序</h3><p>高位优先(Most Significant Digit First，MSD)的字符串排序算法与低位优先字符串相反，高位优先算法从左向右遍历所有字符，首先使用索引计数法将所有字符串按照首字母排序，然后再递归的将每个首字母(忽略首字母)所对应的子数组排序。高位优先算法支持不同长度的字符串排序，为了防止字符串越界，规定索引表频率为0时表示字符串的结尾，为1时表示第一个字符等等。可以用于基数排序。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/28 12:25 * @Description 高位优先字符串排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Msd</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * ASCII 基数     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> R <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 小数组的切换阈值     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 辅助数组，用于排序     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> aux<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取字符串第index个字符     * @param s     字符串s     * @param index 下标     * @return 存在返回字符，不存在返回-1     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">charAt</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 高位优先排序     * @param a 字符串数组a     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        aux <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 排序所给字符串数组中从lo下标到hi下标的字符串，字符串根据index排序     * @param a     字符串数组a     * @param lo    字符串数组开始下标     * @param hi    字符串数组结束下标     * @param index 字符下标     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从左往右每个字符当键</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hi <span class="token operator">&lt;=</span> lo <span class="token operator">+</span> M<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">insertion</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 索引表</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>R <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算出现频率</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span><span class="token function">charAt</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将频率转换为索引</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> R <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将元素分类</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            aux<span class="token punctuation">[</span>count<span class="token punctuation">[</span><span class="token function">charAt</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 回写</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i <span class="token operator">-</span> lo<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 递归的以每个字符为键进行排序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> R<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo <span class="token operator">+</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> lo <span class="token operator">+</span> count<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从第d个字符开始进行插入排序     * @param a  字符串数组a     * @param lo 开始下标     * @param hi 结束下标     * @param d  第几个字符     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertion</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> lo <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 交换两字符串在数组中的位置     * @param a 字符串数组a     * @param i 字符串i     * @param j 字符串j     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断字符串v的第d个字符是否比字符串w的小     * @param v 字符串v     * @param w 字符串w     * @param d 第d个字符     * @return true or false     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">less</span><span class="token punctuation">(</span>String v<span class="token punctuation">,</span> String w<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> d<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> w<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> w<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 字符串v的第i个字符比字符串w的第i个字符小</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> w<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 字符串v的第i个字符比字符串w的第i个字符大</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 两串d个字符相同，根据长短判断</span>        <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> w<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"345465456"</span><span class="token punctuation">,</span> <span class="token string">"678"</span><span class="token punctuation">,</span> <span class="token string">"1239"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Msd<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s1 <span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三向字符串快速排序"><a href="#三向字符串快速排序" class="headerlink" title="三向字符串快速排序"></a>三向字符串快速排序</h3><p>三项字符串快速排序和三向快速排序类似，将字符串分成三部分进行排序。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/28 13:36 * @Description 三向字符串快速排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Quick3String</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取字符串第index个字符     * @param s     字符串s     * @param index 下标     * @return 存在返回字符，不存在返回-1     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">charAt</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 三向字符串快速排序     * @param a 字符串数组a     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 排序所给字符串数组中从lo下标到hi下标的字符串，字符串根据index排序     * @param a     字符串数组a     * @param lo    字符串数组开始下标     * @param hi    字符串数组结束下标     * @param index 字符下标     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hi <span class="token operator">&lt;=</span> lo<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> lt <span class="token operator">=</span> lo<span class="token punctuation">,</span> gt <span class="token operator">=</span> hi<span class="token punctuation">;</span>        <span class="token keyword">int</span> letter <span class="token operator">=</span> <span class="token function">charAt</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> gt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">charAt</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> letter<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lt<span class="token operator">++</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">></span> letter<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> gt<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 首字母小于切分字符</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> lt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>letter <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 等于</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lt<span class="token punctuation">,</span> gt<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 大于</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> gt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 交换两字符串在数组中的位置     * @param a 字符串数组a     * @param i 字符串i     * @param j 字符串j     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="单词查找"><a href="#单词查找" class="headerlink" title="单词查找"></a>单词查找</h2><h3 id="R-向单词查找树"><a href="#R-向单词查找树" class="headerlink" title="R 向单词查找树"></a>R 向单词查找树</h3><p>树的结点由字符串键中的所有字符构成，允许使用被查找键中的字符进行查找。根结点不包含任何字符，单词查找树查找可能终止于一个内部节点，即不一定总是到叶子结点。适用于较短的键和较小的字母表。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/28 14:00 * @Description 单词查找树 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrieSt</span><span class="token operator">&lt;</span>Value<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * ASCII 基数     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> R <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根结点     */</span>    <span class="token keyword">private</span> Node root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 该结点包含的字符         */</span>        <span class="token keyword">private</span> Object val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 该结点的子结点们         */</span>        <span class="token keyword">private</span> Node<span class="token punctuation">[</span><span class="token punctuation">]</span> nexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据单词(键)获得该单词对应结点种保存的值。     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> Value <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Value<span class="token punctuation">)</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查找第d个字符对应的子单词查找树     * @param root 根结点     * @param key  单词(键)     * @param d    第d个字符     * @return 子单词查找树的结点     */</span>    <span class="token keyword">private</span> Node <span class="token function">get</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果第d个字符和单词长度一样长，返回该结点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">char</span> letter <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 找到第d个字符对应的子树，并使d+1查找单词的下一个字符</span>        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>letter<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向单词树中存单词     * @param key   单词(键)     * @param value 值     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 确保根结点为空</span>        root <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据所给键、值和当前字符存单词     * @param root  当前结点     * @param key   键     * @param value 值     * @param d     第d个字符     * @return 返回根结点     */</span>    <span class="token keyword">private</span> Node <span class="token function">put</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> Value value<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果第d个字符和单词长度一样长，该结点存value并返回该结点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            root<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">char</span> letter <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>letter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>letter<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TrieSt<span class="token operator">&lt;</span>Integer<span class="token operator">></span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieSt</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> st<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除单词     * @param key 键     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据所给结点，键和当前字符删除单词     * @param root 当前结点     * @param key  键     * @param d    第d个字符     * @return 返回根结点     */</span>    <span class="token keyword">private</span> Node <span class="token function">delete</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果找到最后一个字符将其值置为空</span>            root<span class="token punctuation">.</span>val <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 否则一直寻找该单词最后一个字符</span>            <span class="token keyword">char</span> letter <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>letter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>letter<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如过当前结点的值不为空，直接返回该结点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 遍历当前结点的所有连接，如果连接都为空，返回null即删除该结点，否则直接返回当前结点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> letter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> letter <span class="token operator">&lt;</span> R<span class="token punctuation">;</span> letter<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>letter<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> root<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三向单词查找树"><a href="#三向单词查找树" class="headerlink" title="三向单词查找树"></a>三向单词查找树</h3><p>单词查找树每个结点包含 r 个子结点，为了避免 r 过度的浪费空间，可以使用三向单词查找树。三向单词查找树每个结点含有一个字符，三条链接和一个值，着三条连接分别对应着当前字符小于、等于和大于结点字符的所有键。适用于非随机的键。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/28 15:12 * @Description 三向单词查找树 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tst</span><span class="token operator">&lt;</span>Value<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根结点     */</span>    <span class="token keyword">private</span> Node root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 字符         */</span>        <span class="token keyword">char</span> letter<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 左中右连接         */</span>        Node left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 值         */</span>        Value val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据单词(键)获得该单词对应结点种保存的值。     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> Value <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查找第d个字符对应的子单词查找树     * @param root 根结点     * @param key  单词(键)     * @param d    第d个字符     * @return 子单词查找树的结点     */</span>    <span class="token keyword">private</span> Node <span class="token function">get</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">char</span> letter <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>letter <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>letter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前字符小于结点字符</span>            <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>letter <span class="token operator">></span> root<span class="token punctuation">.</span>letter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前字符大于结点字符</span>            <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">&lt;</span> key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 未达到查找单词最后一个字符，不大于不小于那就是等于了</span>            <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>mid<span class="token punctuation">,</span> key<span class="token punctuation">,</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 达到查找单词最后一个字符，直接返回当前结点</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向单词树中存单词     * @param key   单词(键)     * @param value 值     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 不需要确保根结点为空</span>        root <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据所给键、值和当前字符存单词     * @param root  当前结点     * @param key   键     * @param value 值     * @param d     第d个字符     * @return 返回根结点     */</span>    <span class="token keyword">private</span> Node <span class="token function">put</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> Value value<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> letter <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果根结点为空，直接向根结点存入第一个字符</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>letter <span class="token operator">=</span> letter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>letter <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>letter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前字符小于结点字符</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>letter <span class="token operator">></span> root<span class="token punctuation">.</span>letter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前字符大于结点字符</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">&lt;</span> key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 未达到查找单词最后一个字符，不大于不小于那就是等于了</span>            root<span class="token punctuation">.</span>mid <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>mid<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 达到查找单词最后一个字符，直接存储字符</span>            root<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="子串查找"><a href="#子串查找" class="headerlink" title="子串查找"></a>子串查找</h2><h3 id="Brute-Force-字符串查找算法"><a href="#Brute-Force-字符串查找算法" class="headerlink" title="Brute-Force 字符串查找算法"></a>Brute-Force 字符串查找算法</h3><p>暴力子字符串查找算法，子串与主串一一匹配。</p><p>实现代码1(逐一匹配)：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span> <span class="token punctuation">(</span>String pat<span class="token punctuation">,</span> String txt<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> txt<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 主串与子串进行匹配</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txt<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">!=</span> pat<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 找到匹配，返回匹配的初始位置</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 未找到匹配，返回主串的长度</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现代码2(显示回退)：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span> <span class="token punctuation">(</span>String pat<span class="token punctuation">,</span> String txt<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> n <span class="token operator">=</span> txt<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">,</span> m <span class="token operator">=</span> pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txt<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> pat<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若匹配，则子串向后挪动1位</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若不匹配，主串指针i回退子串完成匹配的j个位置，子串匹配指针j从0开始</span>            i <span class="token operator">-=</span> j<span class="token punctuation">;</span>            j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若子串指针匹配长度等于子串的长度匹配成功</span>        <span class="token keyword">return</span> i <span class="token operator">-</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 未找到匹配，返回主串的长度</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Knuth-Morris-Pratt-字符串查找算法"><a href="#Knuth-Morris-Pratt-字符串查找算法" class="headerlink" title="Knuth-Morris-Pratt 字符串查找算法"></a>Knuth-Morris-Pratt 字符串查找算法</h3><p>Knuth-Morris-Pratt 字符串查找算法即 KMP 算法，KMP 算法在匹配失败时不需要回退到最开始的位置重新进行匹配，可以有两种方法记录信息。</p><ul><li><p>前缀表实现</p><p>  前缀表：计算前缀表，例如模式串为 ababc，将其拆分成 a，ab，aba，abab 四子串，a 的公共部分为 0(前缀后缀不能为本身)，ab 的最大前缀为 a、最大后缀为 b，因此公共部分为 0； aba 的最大前缀为 ab， 最大后缀为 ba，不匹配则减少一位只进行一位匹配前缀 a 和 后缀 a 匹配，则公共部分为 1；abab 为 2。因此模式串 ababc 的状态就是 -1，0，0，1，2。为模式串标上 0，1，2，3，4的下标分别对应上其状态 -1，0，0，1，2。当匹配失败时，将匹配失败位置的模式串状态值当作下标在模式串中寻找其相应的位置，使用这个位置的字符与主串匹配失败位置的字符进行匹配。若匹配位置的状态值为-1则表示子串向右挪一位进行匹配。</p><p>  计算 maxL, nextJ, nextVal的值：<br>  maxL：找出相等的前缀和后缀的个数，maxL 的值就是程序中 next 表的值。<br>  nextJ：通过将 maxL 向右平移一位，在最前面添加一个-1，去掉最后一个数，然后整体加一可以获得。<br>  nextVal：查看 maxL 和 nextJ 的值，当 maxL 不等于 nextJ 的时候，nextVal 的值就等于 nextJ 的值；当 当 maxL 等于 nextJ 的时候，nextVal 的值就等于查找序号为 nextJ 的 nextVal 值。</p><table><thead><tr><th></th><th>a</th><th>b</th><th>a</th><th>a</th><th>b</th><th>c</th><th>a</th><th>c</th></tr></thead><tbody><tr><td>数组下标</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>序号</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td></tr><tr><td>maxL</td><td>0</td><td>0</td><td>1</td><td>1</td><td>2</td><td>0</td><td>1</td><td>0</td></tr><tr><td>nextJ</td><td>0</td><td>1</td><td>1</td><td>2</td><td>2</td><td>3</td><td>1</td><td>2</td></tr><tr><td>nextVal</td><td>0</td><td>1</td><td>0</td><td>2</td><td>1</td><td>3</td><td>0</td><td>2</td></tr></tbody></table><p>  整体代码：</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 通过模式串获取next表   * @param pat 模式串   * @return next表   */</span>  <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">pre_next</span><span class="token punctuation">(</span>String pat<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> patLen <span class="token operator">=</span> pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 若模式串长度8，使用下标0-7，实际计算使用1-8</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>patLen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 若计算下标为i的next值时，会将其填入下标为i+1的位置上</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> patLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> pat<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> pat<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              i<span class="token operator">++</span><span class="token punctuation">;</span>              j<span class="token operator">++</span><span class="token punctuation">;</span>              next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * KMP字符串查询(前缀表)   * @param pat 模式串   * @param txt 主串   * @return 匹配成功的初始位置 OR 匹配失败(FALSE)   */</span>  <span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span>String pat<span class="token punctuation">,</span> String txt<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token function">pre_next</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> patLen <span class="token operator">=</span> pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> txtLen <span class="token operator">=</span> txt<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> txtLen <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> patLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> txt<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> pat<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              i<span class="token operator">++</span><span class="token punctuation">;</span>              j<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> patLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> i <span class="token operator">-</span> patLen<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>  next 表计算流程如下：</p><table><thead><tr><th>i</th><th>j</th><th>maxL</th><th>index</th></tr></thead><tbody><tr><td>0</td><td>-1</td><td>-1</td><td></td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>-1</td><td></td><td></td></tr><tr><td>2</td><td>0</td><td>0</td><td>2</td></tr><tr><td>3</td><td>1</td><td>1</td><td>3</td></tr><tr><td>3</td><td>0</td><td></td><td></td></tr><tr><td>4</td><td>1</td><td>1</td><td>4</td></tr><tr><td>5</td><td>2</td><td>2</td><td>5</td></tr><tr><td>5</td><td>0</td><td></td><td></td></tr><tr><td>5</td><td>-1</td><td></td><td></td></tr><tr><td>6</td><td>0</td><td>0</td><td>6</td></tr><tr><td>7</td><td>1</td><td>1</td><td>7</td></tr><tr><td>7</td><td>0</td><td></td><td></td></tr><tr><td>7</td><td>-1</td><td></td><td></td></tr><tr><td>8</td><td>0</td><td>0</td><td>8</td></tr></tbody></table></li><li><p>DFA 实现</p><p>  DFA：通过使用确定有限状态自动机(DFA)记录模式匹配状态，状态匹配方法如下：设模式串为 ABABAC，字母表 r 为 ABC。(DFA 根据文本中的字符改变而改变自身的状态，还有一种非确定有限状态自动机 NFA 在抽象方面比 DFA 更强，他可以根据或操作判断模式是否存在，即可以根据不确定的字符判断模式是否存在，常用于正则表达式)</p><p>  第一步：将输入的A记为1，其它都记为0。(i=0，j=0)</p><table><thead><tr><th></th><th>A</th><th>B</th><th>A</th><th>B</th><th>A</th><th>C</th></tr></thead><tbody><tr><td>A</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>B</td><td>0</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>C</td><td>0</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>  第二步：把第一个字符的状态值复制到第二个状态值，然后修改匹配成功的字符的状态值，也就是说本来从上到下是110，因为B是输入的所以是匹配成功的，变成了120，i记得要赋值成修改之前的 B 的值，也就是匹配不成功时 B 的值。(i=0，j=1)</p><table><thead><tr><th></th><th>A</th><th>B</th><th>A</th><th>B</th><th>A</th><th>C</th></tr></thead><tbody><tr><td>A</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td></tr><tr><td>B</td><td>0</td><td>2</td><td></td><td></td><td></td><td></td></tr><tr><td>C</td><td>0</td><td>0</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>  第三步：不断重复，例如第三列为300(i=1，j=2)，最后表的样子为</p><table><thead><tr><th></th><th>A</th><th>B</th><th>A</th><th>B</th><th>A</th><th>C</th></tr></thead><tbody><tr><td>A</td><td>1</td><td>1</td><td>3</td><td>1</td><td>5</td><td>1</td></tr><tr><td>B</td><td>0</td><td>2</td><td>0</td><td>4</td><td>0</td><td>4</td></tr><tr><td>C</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>6</td></tr></tbody></table><p>  整体代码：</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2020/3/28 16:57  * @Description KMP 模式匹配算法  */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kmp</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 模式串      */</span>      <span class="token keyword">private</span> String pat<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 确定有限状态自动机，行表匹配串字符，列表匹配串索引，值为状态      * 状态的意思是例如dfa[r][j]，在已匹配j个字符时，若当前字符串字母为r，已匹配数量会变为多少      */</span>      <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dfa<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 构造模式串的DFA      * @param pat 模式串      */</span>      <span class="token keyword">public</span> <span class="token function">Kmp</span><span class="token punctuation">(</span>String pat<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 使用模式串构造dfa</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>pat <span class="token operator">=</span> pat<span class="token punctuation">;</span>          <span class="token keyword">int</span> m <span class="token operator">=</span> pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// ASCII 基数</span>          <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 一共可能有256个字符，表示输入下标为多少的某个字符其状态为什么</span>          dfa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 将模式串第一个字符的状态值置为 1，第一个字符和自己匹配不管怎么样都是匹配的，也就是已匹配1个</span>          dfa<span class="token punctuation">[</span>pat<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 计算dfa[][j]即模式串第二到最后一个字符的状态值，j是第几个字符</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 遍历所有可能的字符，</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  dfa<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dfa<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">// 一开始全部都是设定成不匹配的，此时要修改匹配成功情况下的值，也就是模式串第j个位置的字符就是输入字符，他匹配数量一定增1，其他情况都是匹配失败</span>              dfa<span class="token punctuation">[</span>pat<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// i 是记录这个当前第j次循环开始时匹配不成功情况下的值，也就是上面那个循环结束时pat.charAt(j)的值。</span>              i <span class="token operator">=</span> dfa<span class="token punctuation">[</span>pat<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 和暴力查找算法的显示回退思路一样，只是回退时使用的是DFA而已      * @param txt 需要查找子串的主串      * @return 查找到的子串下标开始位置      */</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>String txt<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> i<span class="token punctuation">,</span> n <span class="token operator">=</span> txt<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> j<span class="token punctuation">,</span> m <span class="token operator">=</span> pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 匹配不成功时候回退到第j个字符，匹配成功也会有相应状态，所以不需要加判断了</span>              j <span class="token operator">=</span> dfa<span class="token punctuation">[</span>txt<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 若子串指针匹配长度等于子串的长度匹配成功</span>              <span class="token keyword">return</span> i <span class="token operator">-</span> m<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 未找到匹配，返回主串的长度</span>              <span class="token keyword">return</span> n<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          String txt <span class="token operator">=</span> <span class="token string">"ABCDEFT"</span><span class="token punctuation">;</span>          String pat <span class="token operator">=</span> <span class="token string">"DEF"</span><span class="token punctuation">;</span>          Kmp kmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Kmp</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>kmp<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="Boyer-Moore-字符串查找算法"><a href="#Boyer-Moore-字符串查找算法" class="headerlink" title="Boyer-Moore 字符串查找算法"></a>Boyer-Moore 字符串查找算法</h3><p>用一个数组记录字母表中的每个字符在模式串中出现的最右位置，当匹配失败时通过该数组查找与主串匹配失败的字符在模式串中的最右位置来进行重新匹配。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/28 20:25 * @Description Boyer-Moore 子串查找算法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoyerMoore</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 记录字母表中的每个字符在模式串中出现的最靠右的位置     * 例如ABBA，则A是3，B是2     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 模式串     */</span>    <span class="token keyword">private</span> String pat<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BoyerMoore</span><span class="token punctuation">(</span>String pat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pat <span class="token operator">=</span> pat<span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>        right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将right的所有值设置成-1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将包含于模式串中的值设置成该字符在模式串中出现的最右边的位置</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            right<span class="token punctuation">[</span>pat<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Boyer-Moore查找     * @param txt 需要查找子串的主串     * @return 查找到的子串下标开始位置     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>String txt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> txt<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 匹配失败时模式串移动的的幅度</span>        <span class="token keyword">int</span> skip<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> m<span class="token punctuation">;</span> i <span class="token operator">+=</span> skip<span class="token punctuation">)</span> <span class="token punctuation">{</span>            skip <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// right中记录的是最右的位置，因此从right的最右向左遍历</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果出现了不相等则修改移动幅度skip</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pat<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> txt<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/*                     * 若模式串的j下标字符与主串的i+j下标字符不匹配，                     * 查找right表主串不匹配字符不在其中直接右挪一位，在其中则j减去该字符在模式串中最右的位置的下标                     * 也就是说将与主串那个字符匹配的模式串中最右的该字符移动上去与之匹配                     */</span>                    skip <span class="token operator">=</span> j <span class="token operator">-</span> right<span class="token punctuation">[</span>txt<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 若j减去模式串最右的位置的字符出现了负数，不需要将模式串左右，直接将模式串右移一位即可</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>skip <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        skip <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 当skip为0时，匹配成功返回主串与模式串匹配的初始位置</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>skip <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//匹配失败返回主串长度。</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String txt <span class="token operator">=</span> <span class="token string">"ABCDEFT"</span><span class="token punctuation">;</span>        String pat <span class="token operator">=</span> <span class="token string">"DEF"</span><span class="token punctuation">;</span>        BoyerMoore boyerMoore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoyerMoore</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boyerMoore<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Rabin-Karp-指纹字符串查找算法"><a href="#Rabin-Karp-指纹字符串查找算法" class="headerlink" title="Rabin-Karp 指纹字符串查找算法"></a>Rabin-Karp 指纹字符串查找算法</h3><p>通过计算模式字符串的散列函数，然后用相同的散列函数计算文本中所有可能的 m 个字符的子字符串散列值并寻找匹配，当寻找到一个散列值与模式字符串相同的子字符串还要继续验证两者是否真的匹配。Rabin-Karp 算法能在常数时间内计算 m 个字符的子字符串散列值，否则直接计算每个字符串的散列值将导致该算法比暴力查询还要慢。</p><p>此处使用的 horner 方法即如果在每次算术操作之后都将结果模以 Q 等价于在完成所有算术操作之后将最终的结果模以 Q，可以在常数时间内高效的移动子串。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>字符串排序</p><table><thead><tr><th>算法</th><th>稳定性</th><th>时间复杂度</th><th>空间复杂度</th><th>优势</th></tr></thead><tbody><tr><td>低位优先排序</td><td>是</td><td>O(nw)</td><td>O(n)</td><td>较短的定长字符串</td></tr><tr><td>高位优先排序</td><td>是</td><td>O(n)~O(nw)</td><td>O(n+wr)</td><td>随机字符串</td></tr><tr><td>三向快速排序</td><td>否</td><td>O(n)~O(nw)</td><td>O(w+logn)</td><td>含有较长公共前缀的字符串</td></tr></tbody></table></li><li><p>字符串查找</p><ol><li>暴力查找实现简单且在一般情况下性能良好，但是其所需时间可能和 MN 成正比，JAVA 中的 indexOf() 采用的是暴力查找；</li><li>KMP 算法能够保证线性级别的性能且不需要再正文中回退，但是需要额外内存空间；</li><li>Boyer-Moore 算法在一般情况下性能是亚线性级别(可能是线性级别的 M 倍)，但是需要额外内存空间；</li><li>Rabin-Karp 算法性能是线性级别的，但是其内循环很长。</li></ol></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之图</title>
      <link href="/posts/d01e83b2/"/>
      <url>/posts/d01e83b2/</url>
      
        <content type="html"><![CDATA[<h2 id="背包类"><a href="#背包类" class="headerlink" title="背包类"></a>背包类</h2><p>下面算法会用到背包类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 10:33 * @Description 背包(存取不能删) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bag</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 头结点     */</span>    <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>Item<span class="token operator">></span> first<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 结点个数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> Item item<span class="token punctuation">;</span>        <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>Item<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化背包     */</span>    <span class="token keyword">public</span> <span class="token function">Bag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        first <span class="token operator">=</span> null<span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 背包是否位空     * @return true or false     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> first <span class="token operator">==</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 背包存储的数据个数     * @return 背包存储的数据个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加     * @param item 元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>Item<span class="token operator">></span> oldFirst <span class="token operator">=</span> first<span class="token punctuation">;</span>        first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        first<span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>        first<span class="token punctuation">.</span>next <span class="token operator">=</span> oldFirst<span class="token punctuation">;</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedIterator</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 背包迭代器     */</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">LinkedIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 当前结点         */</span>        <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>Item<span class="token operator">></span> current<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">LinkedIterator</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>Item<span class="token operator">></span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>            current <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> current <span class="token operator">!=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 背包无删除方法</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Item <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Item item <span class="token operator">=</span> current<span class="token punctuation">.</span>item<span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> item<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>并查集用于解决动态连通性问题，能动态连接两个顶点，并且判断两个顶点是否连通。</p><h3 id="Quick-Find"><a href="#Quick-Find" class="headerlink" title="Quick Find"></a>Quick Find</h3><p>可以快速的判断两个结点是否相通，因为同一连通分量的所有结点 id 相等，所以通过判断 id 是否相等就可以判断两个结点是否连通。</p><p>union 操作代价很高，需要将其中一个连通分量的所有 id 改成另一个连通分量的 id。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 20:48 * @Description quick find */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickFindUf</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 连通分量编号     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">QuickFindUf</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化，一个结点一个连通分量，刚开始无连接结点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查找p所在连通分量的编号     * @param p 结点p     * @return 编号     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 连接结点p和结点q     * @param p 结点p     * @param q 结点q     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pId <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> qId <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若两个结点id相等返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pId <span class="token operator">==</span> qId<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 否则把所有id等于p的都改成id等于q</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> id<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pId<span class="token punctuation">)</span> <span class="token punctuation">{</span>                id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> qId<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Quick-Union"><a href="#Quick-Union" class="headerlink" title="Quick Union"></a>Quick Union</h3><p>可以快速的进行 union 操作，只需要修改一个结点的id即可，但是 find 操作代价很高，因为同一个连通分量的结点 id 值均不同，一个结点的 id 只是指向另一个结点，查找需要找到最顶层的结点 id。</p><p>quick union 会导致树高度可能为结点的数目，查找非常耗时。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 20:54 * @Description quick union */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickUnionUf</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 连通分量编号     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">QuickUnionUf</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化，一个结点一个连通分量，刚开始无连接结点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查找p所在连通分量的编号     * @param p 结点p     * @return 编号     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若结点p的值不等于结点p的下标，说明结点p的值是另一个结点的下标，将修改p的下标为p的值，继续查找根结点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 连接结点p和结点q     * @param p 结点p     * @param q 结点q     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> qRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将p的根结点下标改成q的根结点下标即可</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pRoot <span class="token operator">!=</span> qRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>            id<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">=</span> qRoot<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="加权-Quick-Union"><a href="#加权-Quick-Union" class="headerlink" title="加权 Quick Union"></a>加权 Quick Union</h3><p>通过将较小的树连接到较大的树上解决了 quick union 树高的问题。加权 quick union 的树高最多不超过 logn。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 21:02 * @Description 加权 quick union */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeightedQuickUnionUf</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 连通分量编号     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 保存结点的数量信息     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WeightedQuickUnionUf</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化，一个结点一个连通分量，刚开始无连接结点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化，刚开始每个结点树高都为1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查找p所在连通分量的编号     * @param p 结点p     * @return 编号     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若结点p的值不等于结点p的下标，说明结点p的值是另一个结点的下标，将修改p的下标为p的值，继续查找根结点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 连接结点p和结点q     * @param p 结点p     * @param q 结点q     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> qRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若结点p和结点q处于同一分量直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pRoot <span class="token operator">==</span> qRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果结点p分量树小于结点q分量树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">&lt;</span> size<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将结点p分量树挂到结点q分量树上</span>            id<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">=</span> qRoot<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 结点q分量树需要加上结点p分量树的个数</span>            size<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 与上面相反</span>            id<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span> <span class="token operator">=</span> pRoot<span class="token punctuation">;</span>            size<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="路径压缩的加权-Quick-Union"><a href="#路径压缩的加权-Quick-Union" class="headerlink" title="路径压缩的加权 Quick Union"></a>路径压缩的加权 Quick Union</h3><p>将每一个连通分量的指向都指向根结点，修改 find 方法即可。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    id<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>给定一幅有向图，将所有的顶点排序，使得所有的有向边均从排在前面的元素指向排在后面的元素称为拓扑排序。而且拓扑排序只能在有向无环图中才能进行。</p><p>拓扑排序实现只需要稍微修改深度优先搜索的代码即可完成。深度优先搜索时保存路径的数据结构的性质以及在递归调用前保存还是递归调用后保存，拓扑排序能分成三种排列顺序：前序(递归调用前入队)；后序(递归调用后入队)；逆后序(递归调用后压栈)；</p><p>实现代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 10:30 * @Description 有向图数据类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Digraph</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 顶点数目     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 边数目     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> e<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 邻接表，包数组，每一个包代表一个而顶点的所有邻接顶点     */</span>    <span class="token keyword">private</span> Bag<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> adj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Digraph</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        adj <span class="token operator">=</span> <span class="token punctuation">(</span>Bag<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 顶点个数     * @return 顶点个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 边个数     * @return 边个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加边     * @param v 顶点v     * @param w 顶点w     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>        adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 遍历顶点v的所有邻接顶点     * @param v 顶点v     * @return 顶点v的所有邻接顶点     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">adj</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有向图反转，即入度变出度，出度变入度     * @return 反转的有向图     */</span>    <span class="token keyword">public</span> Digraph <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Digraph digraph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Digraph</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">:</span> <span class="token function">adj</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                digraph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> digraph<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 13:58 * @Description 基于深度优先搜索的顶点排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepthFirstOrder</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 存储顶点是否被遍历过的信息     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marked<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 前序排序     */</span>    <span class="token keyword">private</span> Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> pre<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 后序排序     */</span>    <span class="token keyword">private</span> Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> post<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 逆后序排序     */</span>    <span class="token keyword">private</span> Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> reversePost<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化图，遍历所有顶点     * @param g 图g     */</span>    <span class="token keyword">public</span> <span class="token function">DepthFirstOrder</span><span class="token punctuation">(</span>Digraph g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        post <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reversePost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        marked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若图非连通，遍历所有非连通子图</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 深度优先搜索     * @param g 图g     * @param v 顶点v     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Digraph g<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pre<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">:</span> g<span class="token punctuation">.</span><span class="token function">adj</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        post<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        reversePost<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 前序遍历顶点     * @return 前序顶点集     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后序遍历顶点     * @return 后序顶点集     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> post<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 逆后序遍历顶点     * @return 逆后序顶点集     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">reversePost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reversePost<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 14:11 * @Description 有向图环检测 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectedCycle</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 存储顶点是否被遍历过的信息     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marked<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从起点到一个顶点的已知路径上的最后一个顶点。     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edgeTo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 有向环中的所有顶点，若存在环     */</span>    <span class="token keyword">private</span> Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> cycle<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 一次深度优先搜索中(一张子图中)遍历过的顶点     * true表遍历过，false表没遍历过     * 与marked区别为，marked标记整个图，onStack表一个子图即正在递归中的顶点     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> onStack<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化图，深度优先搜索查找环     * @param g 图g     */</span>    <span class="token keyword">public</span> <span class="token function">DirectedCycle</span><span class="token punctuation">(</span>Digraph g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        onStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        edgeTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        marked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 深度优先搜索，若搜索的顶点的邻接顶点在栈中则有环     * @param g 图g     * @param i 顶点i     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Digraph g<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将该顶点置为true因为遍历过</span>        onStack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        marked<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">:</span> g<span class="token punctuation">.</span><span class="token function">adj</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 有环直接返回</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 无环且邻接顶点没有被遍历过，就遍历</span>                edgeTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>onStack<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果当前顶点的邻接顶点在子图中遍历过则有环</span>                cycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// cycle记录edgeTo中走过的路径。从当前顶点开始，到产生环的邻接顶点(不包含)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">!=</span> w<span class="token punctuation">;</span> j <span class="token operator">=</span> edgeTo<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 例0-1-2-3-0， i是3，edgeTo回退到0，不将0加入</span>                    cycle<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 将产生环的邻接顶点加入路径，将0加入</span>                cycle<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将当前顶点加入，即变成了 3-2-1-0-3 的循环</span>                cycle<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 递归回退将顶点置为false</span>        onStack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 是否有环     * @return true or false     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cycle <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 遍历环，若环存在     * @return 环中顶点集     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">cycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cycle<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 13:35 * @Description 拓扑排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Topological</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 顶点的拓扑排序     */</span>    <span class="token keyword">private</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> order<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化图，若有向图无环进行拓扑排序     * @param g 图g     */</span>    <span class="token keyword">public</span> <span class="token function">Topological</span><span class="token punctuation">(</span>Digraph g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DirectedCycle cycleFinder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectedCycle</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cycleFinder<span class="token punctuation">.</span><span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            DepthFirstOrder dfs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DepthFirstOrder</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>            order <span class="token operator">=</span> dfs<span class="token punctuation">.</span><span class="token function">reversePost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 顶点拓扑排序集     * @return 顶点拓扑排序集     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> order<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 是不是有向无环图     * @return true or false     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> order <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Kosaraju-算法"><a href="#Kosaraju-算法" class="headerlink" title="Kosaraju 算法"></a>Kosaraju 算法</h2><p>计算有向图的强连通分量分两步：</p><ol><li>在给定的有向图 g 中，使用 DepthFirstOrder 来计算 g 的反向图 ~g，并获得其逆后序排列。</li><li>对获得的反向图 ~g 的逆后序排列进行深度优先搜索即可获得强连通分量的数量。</li><li>所有在同一个dfs()递归中被访问的顶点都属于同一个强连通分量，通过强连通分量的标识符进行识别。</li></ol><p>关键代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 已访问过的顶点</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marked<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 强连通分量的数量</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 强连通分量的标识符，若顶点v是第i个连通分量则id[v]=i</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> id<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">KosarajuSCC</span><span class="token punctuation">(</span>Digraph g<span class="token punctuation">)</span> <span class="token punctuation">{</span>    id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    DepthFirstOrder order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DepthFirstOrder</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">:</span> order<span class="token punctuation">.</span><span class="token function">reversePost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 可能是非连通图</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Digraph g<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 顶点v是第count个连通分量，id[v]=count</span>    id<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">:</span> g<span class="token punctuation">.</span><span class="token function">adj</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">stronglyConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 顶点 v 和顶点 w 是否强连通</span>    <span class="token keyword">return</span> id<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> id<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>给定一副加权无向图，找到它的一颗最小生成树(MST)即一颗树中所有边的权值之和最小的生成树。图的生成树是它的一颗含有其所有顶点的无环连通子图。</p><p>最小生成树通用类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 15:37 * @Description 带权重的边基础数据类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Edge<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 顶点v     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 顶点w     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> w<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 权重     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得顶点v     * @return 顶点v     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">either</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取另一个顶点     * @param vertex v或w     * @return 返回w或v     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token keyword">int</span> vertex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vertex <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>vertex <span class="token operator">==</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"参数有问题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 该边权重     * @return 返回权重     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Edge that<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> that<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> that<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d--%d %.2f"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 15:44 * @Description 加权无向图数据类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EdgeWeightedGraph</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 顶点数目     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 边数目     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> e<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 邻接表     */</span>    <span class="token keyword">private</span> Bag<span class="token operator">&lt;</span>Edge<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> adj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">EdgeWeightedGraph</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        adj <span class="token operator">=</span> <span class="token punctuation">(</span>Bag<span class="token operator">&lt;</span>Edge<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 顶点个数     * @return 顶点个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 边个数     * @return 边个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加边     * @param edge 边     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span>Edge edge<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token function">either</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> w <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span>        adj<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 遍历顶点v的所有邻接顶点     * @param v 顶点v     * @return 顶点v的所有邻接顶点     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Edge<span class="token operator">></span> <span class="token function">adj</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回所有边     * @return 边集     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Edge<span class="token operator">></span> <span class="token function">edges</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Bag<span class="token operator">&lt;</span>Edge<span class="token operator">></span> bag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Edge e <span class="token operator">:</span> adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 因为每个顶点会在边中出现两次，所以这里只取一个</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bag<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Prim-算法"><a href="#Prim-算法" class="headerlink" title="Prim 算法"></a>Prim 算法</h3><p>选择一个结点作为树的根结点，将这个根结点的所有边存入优先队列。从优先队列中取出一条权值最小的边并将它添加到树中(如果未失效)，再将这个边的另一个顶点添加到树中。然后将新顶点的所有边加入优先队列，选择一条权值最小的边重复之前的操作，直至队列中无边。</p><p>算法实现：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 16:15 * @Description 最小生成树的Prim算法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimMst</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 顶点集是否被遍历过     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marked<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 最小生成树的边     */</span>    <span class="token keyword">private</span> Queue<span class="token operator">&lt;</span>Edge<span class="token operator">></span> mst<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 优先队列存储待选择的边     */</span>    <span class="token keyword">private</span> PriorityQueue<span class="token operator">&lt;</span>Edge<span class="token operator">></span> pq<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化生成树，并生成最小生成树     * @param g 图g     */</span>    <span class="token keyword">public</span> <span class="token function">PrimMst</span><span class="token punctuation">(</span>EdgeWeightedGraph g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        marked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        mst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">visit</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Edge e <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">either</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果边的两个顶点都遍历过了跳过</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mst<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果顶点v没被遍历过，遍历</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">visit</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果顶点w没被遍历过，遍历</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">visit</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 遍历顶点v的所有边，将边的另一头未被标记的顶点加入优先队列     * @param g 图g     * @param v 顶点v     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>EdgeWeightedGraph g<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Edge e <span class="token operator">:</span> g<span class="token punctuation">.</span><span class="token function">adj</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>e<span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pq<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 最小生成树的所有边     * @return 最小生成树所有边     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Edge<span class="token operator">></span> <span class="token function">edges</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mst<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 最小生成树的权值     * @return 树的权值     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> weight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Edge e <span class="token operator">:</span> mst<span class="token punctuation">)</span> <span class="token punctuation">{</span>            weight <span class="token operator">+=</span> e<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Kruskal-算法"><a href="#Kruskal-算法" class="headerlink" title="Kruskal 算法"></a>Kruskal 算法</h3><p>Prim 算法是随便选一个结点然后选择该节点权值最小的边扩展成最小生成树，而 Kruskal 算法是选择权值最小的边，然后选择权值第二小的边(如果加入的边会构成循环则舍弃)，直到构成一颗最小生成树为止。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 17:07 * @Description 最小生成树的Kruskal算法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kruskal</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 最小生成树的边     */</span>    <span class="token keyword">private</span> Queue<span class="token operator">&lt;</span>Edge<span class="token operator">></span> mst<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化生成树，并生成最小生成树     * @param g 图g     */</span>    <span class="token keyword">public</span> <span class="token function">Kruskal</span><span class="token punctuation">(</span>EdgeWeightedGraph g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PriorityQueue<span class="token operator">&lt;</span>Edge<span class="token operator">></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Edge e <span class="token operator">:</span> g<span class="token punctuation">.</span><span class="token function">edges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pq<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 并查集</span>        Uf uf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uf</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mst<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Edge e <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">either</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>uf<span class="token punctuation">.</span><span class="token function">connected</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 并查集判断顶点v和顶点w是否相连</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 顶点v和顶点w不相连则将其连接</span>            uf<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>            mst<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 最小生成树的所有边     * @return 最小生成树所有边     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Edge<span class="token operator">></span> <span class="token function">edges</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mst<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 最小生成树的权值     * @return 树的权值     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> weight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Edge e <span class="token operator">:</span> mst<span class="token punctuation">)</span> <span class="token punctuation">{</span>            weight <span class="token operator">+=</span> e<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><p>单点路径最短：给定一幅加权有向图和一个起点 s，找到顶点 s 到顶点 v 的最短(总权重最小)路径(如果可达)。</p><p>最短路径树(Shortest Path Tree，SPT)：给定一副加权有向图和一个起点 s，以 s 为起点的一颗最短路径树包含从 s 起可达的所有顶点。</p><h3 id="Dijkstra-算法"><a href="#Dijkstra-算法" class="headerlink" title="Dijkstra 算法"></a>Dijkstra 算法</h3><p>和 Prim 算法构造方法类似，Dijkstra 算法通过将最小权值的非树顶点放松加入树中，不断重复直至所有顶点都在树中或所有的非树顶点的权值都是无穷大为止。也就是说该算法每次都会为最短路径树添加一条边，该边由一个树中的顶点指向一个非树顶点 w 且它是到 s 最近的顶点。</p><p>Dijkstra 算法能够解决边权值非负的加权有向图的单起点最短路径问题。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 17:39 * @Description 加权有向边数据类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectedEdge</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 边的起点     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 边的终点     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> w<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 边的权重     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DirectedEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得起点     * @return 顶点v     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取终点     * @return 返回w     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> w<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取权值     * @return 权值     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d->%d %.2f"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 17:45 * @Description 加权无向图数据类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EdgeWeightedGraph</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 顶点数目     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 边数目     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> e<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 邻接表     */</span>    <span class="token keyword">private</span> Bag<span class="token operator">&lt;</span>DirectedEdge<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> adj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">EdgeWeightedGraph</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        adj <span class="token operator">=</span> <span class="token punctuation">(</span>Bag<span class="token operator">&lt;</span>DirectedEdge<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 顶点个数     * @return 顶点个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 边个数     * @return 边个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加边     * @param edge 边     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span>DirectedEdge edge<span class="token punctuation">)</span> <span class="token punctuation">{</span>        adj<span class="token punctuation">[</span>edge<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 遍历顶点v的所有邻接顶点     * @param v 顶点v     * @return 顶点v的所有邻接顶点     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>DirectedEdge<span class="token operator">></span> <span class="token function">adj</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回所有边     * @return 边集     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>DirectedEdge<span class="token operator">></span> <span class="token function">edges</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Bag<span class="token operator">&lt;</span>DirectedEdge<span class="token operator">></span> bag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>DirectedEdge e <span class="token operator">:</span> adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bag<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 18:13 * @Description 最短路径Dijkstra算法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DijkstraSp</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 存储顶点是否被遍历过的信息     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marked<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从起点到一个顶点的已知路径上的最后一个顶点。     */</span>    <span class="token keyword">private</span> DirectedEdge<span class="token punctuation">[</span><span class="token punctuation">]</span> edgeTo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 最短路径的长度     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> distTo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 优先队列存储待选择的边     */</span>    <span class="token keyword">private</span> PriorityQueue<span class="token operator">&lt;</span>DirectedEdge<span class="token operator">></span> pq<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DijkstraSp</span><span class="token punctuation">(</span>EdgeWeightedGraph g<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 权值不能为负</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>DirectedEdge e <span class="token operator">:</span> g<span class="token punctuation">.</span><span class="token function">edges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"权值不能为负"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        edgeTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectedEdge</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        distTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        marked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 比较返回路径长度最小的</span>            <span class="token keyword">double</span> dist1 <span class="token operator">=</span> distTo<span class="token punctuation">[</span>e1<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> e1<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> dist2 <span class="token operator">=</span> distTo<span class="token punctuation">[</span>e2<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> e2<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>dist1<span class="token punctuation">,</span> dist2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将所有顶点的路径权值初始化为达不到</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            distTo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Double<span class="token punctuation">.</span>POSITIVE_INFINITY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 选择一个顶点作为开始顶点</span>        distTo<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 松弛边</span>        <span class="token function">relax</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            DirectedEdge e <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">relax</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 松弛边操作：放松边v->w意味着检查v到w的最短路径是否是从s到v，然后由v到w。     * 由v到w的最短路径为distTo[v]+e.weight，如果这个值小于distTo[w]就更新数据，否则忽略。     * @param g 图g     * @param v 顶点v     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">relax</span><span class="token punctuation">(</span>EdgeWeightedGraph g<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>DirectedEdge edge <span class="token operator">:</span> g<span class="token punctuation">.</span><span class="token function">adj</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>distTo<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span> edge<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> distTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                distTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> distTo<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span> edge<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                edgeTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> edge<span class="token punctuation">;</span>                pq<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 顶点v的权值     * @param v 顶点v     * @return 顶点v的权值     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">distTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> distTo<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 起点到顶点v是否有路径     * @param v 顶点v     * @return true or false     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPathTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回起点到顶点v的最短路径     * @param v 顶点v     * @return 路径     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>DirectedEdge<span class="token operator">></span> <span class="token function">pathTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasPathTo</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>DirectedEdge<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>DirectedEdge edge <span class="token operator">=</span> edgeTo<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span> edge <span class="token operator">!=</span> null<span class="token punctuation">;</span> edge <span class="token operator">=</span> edgeTo<span class="token punctuation">[</span>edge<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> path<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="顶点松弛-拓扑排序结合求解"><a href="#顶点松弛-拓扑排序结合求解" class="headerlink" title="顶点松弛+拓扑排序结合求解"></a>顶点松弛+拓扑排序结合求解</h3><p>按照拓扑结构放松顶点，该方法求情节最短路径能够处理负权重的边，且比 Dijkstra 算法快。</p><p>如果要求最长路径可以将 distTo 初始化为 Double.NEGATIVE_INFINITY，并且将 relax 方法中的不等式方法更改即可。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/27 20:03 * @Description 边松弛+拓扑排序求解最短路径 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AcyclicSp</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 从起点到一个顶点的已知路径上的最后一个顶点。     */</span>    <span class="token keyword">private</span> DirectedEdge<span class="token punctuation">[</span><span class="token punctuation">]</span> edgeTo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 最短路径的长度     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> distTo<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AcyclicSp</span><span class="token punctuation">(</span>EdgeWeightedGraph g<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        edgeTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectedEdge</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        distTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            distTo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Double<span class="token punctuation">.</span>POSITIVE_INFINITY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        distTo<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Topological topological <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Topological</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> topological<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">relax</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 其它方法同 Dijkstra 算法。</span><span class="token punctuation">}</span></code></pre><h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><p>如果将一系列任务的长度定义为完成所有任务的最早可能时间，那么最长的任务序列就是问题的关键路径。所以使用顶点松弛+拓扑排序结合求解最长路径即可得到关键路径。</p><h3 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h3><p>利用动态规划的思想寻找给定的加权图中多源点之间最短路径的算法。Dijkstra 算法是单源最短路径算法。</p><h3 id="Bellman-Ford-算法"><a href="#Bellman-Ford-算法" class="headerlink" title="Bellman-Ford 算法"></a>Bellman-Ford 算法</h3><p>在任意含有 v 个顶点的加权有向图中给定起点 s，从 s 无法到达任何负权重环，而通过 Bellman-Ford 算法能解决其中的单点最短路径问题。通过将 distTo[s] 初始化为0，其它 distTo[] 元素初始化为无穷大，并以任意顺序放松有向图的所有边，重复 v 轮。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>并查集</p><table><thead><tr><th>算法</th><th>find</th><th>union</th></tr></thead><tbody><tr><td>Quick Find</td><td>O(n)</td><td>1</td></tr><tr><td>Quick Union</td><td>树高</td><td>树高</td></tr><tr><td>加权 Quick Union</td><td>O(logn)</td><td>O(logn)</td></tr><tr><td>路劲压缩加权 Quick Union</td><td>接近1</td><td>接近1</td></tr></tbody></table></li><li><p>最小生成树</p><table><thead><tr><th>算法</th><th>空间</th><th>时间</th><th>图类型</th></tr></thead><tbody><tr><td>Prime 算法</td><td>O(E)</td><td>O(ElogE)</td><td>无向图</td></tr><tr><td>Kruskal 算法</td><td>O(E)</td><td>O(ElogE)</td><td>无向图</td></tr></tbody></table></li><li><p>最短路径</p><table><thead><tr><th>算法</th><th>局限</th><th>最坏情况</th><th>一般情况</th><th>所需空间</th><th>优势</th></tr></thead><tbody><tr><td>Dijkstra 算法</td><td>边的权重必须为正</td><td>O(ElogV)</td><td>O(ElogV)</td><td>V</td><td>最坏情况下仍有较好的性能</td></tr><tr><td>拓扑排序</td><td>只适用于无环加权有向图</td><td>O(E+V)</td><td>O(E+V)</td><td>V</td><td>是无环图中的最优算法</td></tr><tr><td>Bellman-Ford 算法</td><td>不能存在负权重环</td><td>O(E+V)</td><td>O(VE)</td><td>V</td><td>适用领域广泛</td></tr></tbody></table></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之查找</title>
      <link href="/posts/4cc1103c/"/>
      <url>/posts/4cc1103c/</url>
      
        <content type="html"><![CDATA[<h2 id="符号表模板"><a href="#符号表模板" class="headerlink" title="符号表模板"></a>符号表模板</h2><p>抽象了符号表所需的基本操作。</p><h3 id="无序符号表模板"><a href="#无序符号表模板" class="headerlink" title="无序符号表模板"></a>无序符号表模板</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/25 21:22 * @Description 无序符号表模板 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UnorderedSt</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 存储的键值对个数     * @return 当前个数     */</span>    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据key获得其value     * @param key 键     * @return 值     */</span>    Value <span class="token function">get</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据键值存入键值对     * @param key   键     * @param value 值     */</span>    <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据键删除键值对     * @param key 键     */</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="有序符号表模板"><a href="#有序符号表模板" class="headerlink" title="有序符号表模板"></a>有序符号表模板</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/25 21:26 * @Description 有序符号表模板 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderedSt</span><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 存储的键值对个数     * @return 当前个数     */</span>    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据key获得其value     * @param key 键     * @return 值     */</span>    Value <span class="token function">get</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据键值存入键值对     * @param key   键     * @param value 值     */</span>    <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获得最小的键     * @return 最小的键     */</span>    Key <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获得最大的键     * @return 最大的键     */</span>    Key <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 小于key的键的数量     * @param key 键     * @return 符合要求的键的个数     */</span>    <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 表中[lo...hi]之间的所有键，已排序     * @param lo 起始键     * @param hi 终点键     * @return 返回[lo...hi]之间的所有键的集合     */</span>    List<span class="token operator">&lt;</span>Key<span class="token operator">></span> <span class="token function">keys</span><span class="token punctuation">(</span>Key lo<span class="token punctuation">,</span> Key hi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h2><p>符号表(Symbol Table)主要用于将一个键与一个值联系起来即存储键值对，它支持高效地插入和查找。符号表分为无序符号表和有序符号表，有序符号表通常通过比较键的大小保持键的有序。</p><h3 id="无序符号表实现"><a href="#无序符号表实现" class="headerlink" title="无序符号表实现"></a>无序符号表实现</h3><p>无序符号表常用链表来实现，方便插入和顺序查找。</p><p>时间复杂度：插入和查找的时间复杂度均为O(n)。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/25 21:39 * @Description 顺序查找(基于无序链表) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SequentialSearchSt</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">UnorderedSt</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        Key key<span class="token punctuation">;</span>        Value value<span class="token punctuation">;</span>        Node next<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">,</span> Node next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根结点     */</span>    <span class="token keyword">private</span> Node first<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 符号表大小     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Value <span class="token function">get</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node current <span class="token operator">=</span> first<span class="token punctuation">;</span> current <span class="token operator">!=</span> null<span class="token punctuation">;</span> current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> current<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node current <span class="token operator">=</span> first<span class="token punctuation">;</span> current <span class="token operator">!=</span> null<span class="token punctuation">;</span> current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                current<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node current <span class="token operator">=</span> first<span class="token punctuation">,</span> pre <span class="token operator">=</span> first<span class="token punctuation">;</span> current <span class="token operator">!=</span> null<span class="token punctuation">;</span> pre <span class="token operator">=</span> current<span class="token punctuation">,</span> current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    first <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                size<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SequentialSearchSt<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequentialSearchSt</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="有序符号表实现"><a href="#有序符号表实现" class="headerlink" title="有序符号表实现"></a>有序符号表实现</h3><p>有序符号表通常使用一对平行数组实现，两个数组分别存储键和值。该算法保证了键的有序性，并通过二分查找高效的实现查找操作。其实现核心为rank()方法，该方法能够定位需要查找的键的位置或者是需要插入的键的插入位置。</p><p>时间复杂度：再n个键的有序数组中二分查找最多需要(lgn+1)次比较，因此查找的时间复杂度为O(lgn)；在最糟糕的情况下，插入的键在数组首位则整个数组需要后移一位，一共有两个数组需要访问数组约2n次，所以插入的时间复杂度为O(n)。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/25 22:26 * @Description 二分查找(基于有序数组) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearchSt</span><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">OrderedSt</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 键数组     */</span>    <span class="token keyword">private</span> Key<span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 值数组     */</span>    <span class="token keyword">private</span> Value<span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前存储的键值对数量     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BinarySearchSt</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        keys <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        values <span class="token operator">=</span> <span class="token punctuation">(</span>Value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Key <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Key <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> keys<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 返回小于key的键的数量</span>        <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Value <span class="token function">get</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> values<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果存在更新值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            values<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 不存在则将插入位置后面的元素依次后移一位</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> keys<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> values<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>        values<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Key<span class="token operator">></span> <span class="token function">keys</span><span class="token punctuation">(</span>Key lo<span class="token punctuation">,</span> Key hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Key<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">rank</span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BinarySearchSt<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySearchSt</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二叉查找树-B-树"><a href="#二叉查找树-B-树" class="headerlink" title="二叉查找树(B 树)"></a>二叉查找树(B 树)</h2><p>为了支持高效插入操作需要使用链式结构，但是二分查找法不适用于链式结构，因此诞生了二叉查找树，同时拥有高效的插入和查找操作。</p><p>一颗二叉查找树(BST)是一颗二叉树，其中每个结点都含有一个键且每个结点的键都大于其左子树中的任意结点的键而小于右子树的任意结点的键。BST的中序遍历结果是递增排序。</p><p>时间复杂度：二叉查找树拥有顺序查找(无序链表)和二分查找(有序数组)的优点，所以其查找和插入的时间复杂度均为O(n)。</p><p>基本数据结构：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/26 10:07 * @Description 二叉查找树 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bst</span><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">OrderedSt</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 二叉树根节点     */</span>    <span class="token keyword">protected</span> Node root<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 键         */</span>        Key key<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 值         */</span>        Value value<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 左结点         */</span>        Node left<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 右结点         */</span>        Node right<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 以该结点为根的子树结点个数(包括该结点)         */</span>        <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 红黑树判断         */</span>        <span class="token keyword">boolean</span> color<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 该结点为根的子树结点个数(包括该结点)     * @param node 结点     * @return 结点个数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 重新计算结点个数     * @param node 以该结点为根的子树结点个数。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recalculateSize</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">size</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>get()：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Value <span class="token function">get</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 递归查找键，键比根结点键小左子树查找，键比根结点键大右子树查找。 * @param root 二叉查找树根节点 * @param key  需要查找的键 * @return 返回该键的值 */</span><span class="token keyword">private</span> Value <span class="token function">get</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>put()：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    root <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 插入结点，找到同样的键覆盖值，没有找到则需新建结点挂入树种。同时更新挂入结点及其所有双亲结点的大小 * @param root  根结点 * @param key   键 * @param value 值 * @return 返回插入结点的引用 */</span><span class="token keyword">private</span> Node <span class="token function">put</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">recalculateSize</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>floor()：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 从根结点起，返回小于等于传入键的的最大键 * @param key 传入键 * @return 返回满足要求的键 */</span><span class="token keyword">public</span> Key <span class="token function">floor</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node node <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>key<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 从所给结点起，返回小于等于键传入键的的最大键 * @param root 结点 * @param key  传入键 * @return 返回满足要求的键所在结点 */</span><span class="token keyword">private</span> Node <span class="token function">floor</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若相等返回该结点</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若所给键小于结点的键，则键一定在左子树种</span>        <span class="token keyword">return</span> <span class="token function">floor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若所给键大于结点的键，则递归该结点的右结点继续判断，若右结点返回空就把当前结点返回</span>        Node temp <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> temp <span class="token operator">==</span> null <span class="token operator">?</span> root <span class="token operator">:</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>rank()：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 小于key的键的数量</span>    <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 返回小于所给键的键的个数 * @param root 当前结点 * @param key  所给键 * @return 小于所给键的个数 */</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若小于，递归左子树的排名</span>        <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若大于，递归计算右子树的排名再加上左子树的结点数再加一个根结点。</span>        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">rank</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若等于，返回该结点左子树的结点数</span>        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>min()：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Key <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 返回最小的键所在结点 * @param root 结点 * @return 最小键所在结点 */</span><span class="token keyword">private</span> Node <span class="token function">min</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>deleteMin()：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 删除最小键所在结点 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    root <span class="token operator">=</span> <span class="token function">deleteMin</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 递归删除最小键所在结点，同时更新删除结点的所有双亲结点的大小 * @param root 当前结点 * @return 第一次返回需要删除结点的右结点，之后都是返回当前结点 */</span><span class="token keyword">private</span> Node <span class="token function">deleteMin</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 找到一个结点左子树为空，返回右子树</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将该结点的左子树删除，右子树挂载到其左子树</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deleteMin</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重新计算结点大小</span>    <span class="token function">recalculateSize</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>delete()：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 删除给出键所在结点 * @param key 需要删除的键 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    root <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 递归删除所给键所在结点，同时更新删除结点的所有双亲结点的大小 * 删除方法：找到键所在节点的第一个右子树，遍历这个右子树的左子树找到叶子结点，用这个叶子结点替换删除结点， * 需要删除结点的左子树是这个叶子结点的左子树，需要删除节点的右子树是这个叶子结点的右子树， * 当然叶子结点如果有右子树则要变成需要删除结点右子树的左子树。 * @param root 当前结点 * @param key  键 * @return 第一次返回需要删除结点的右结点，之后都是返回当前结点 */</span><span class="token keyword">private</span> Node <span class="token function">delete</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node temp <span class="token operator">=</span> root<span class="token punctuation">;</span>        root <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteMin</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> temp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">recalculateSize</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>keys()：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Key<span class="token operator">></span> <span class="token function">keys</span><span class="token punctuation">(</span>Key lo<span class="token punctuation">,</span> Key hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Key<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">keys</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> list<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 表中[lo...hi]之间的所有键，已排序，相当于中序遍历 * @param root 当前结点 * @param list 满足要求的键集合 * @param lo   起始键 * @param hi   终点键 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">keys</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Key<span class="token operator">></span> list<span class="token punctuation">,</span> Key lo<span class="token punctuation">,</span> Key hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cmpLo <span class="token operator">=</span> lo<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cmpHi <span class="token operator">=</span> hi<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查找左结点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmpLo <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">keys</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> list<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 判断是否在指定范围之内，lo一定小于等于所选键，hi一定大于等于所选键</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmpLo <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cmpHi <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查找右结点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmpHi <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">keys</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> list<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="平衡查找树"><a href="#平衡查找树" class="headerlink" title="平衡查找树"></a>平衡查找树</h2><p>如果能够保证二叉查找树的树高为lgn的话，也就是二叉查找树是完全二叉树的话，就不会出现二叉查找树的最坏情况出现，此时时间复杂度由O(n)提升至O(lgn)。</p><h3 id="2-3-查找树"><a href="#2-3-查找树" class="headerlink" title="2-3 查找树"></a>2-3 查找树</h3><p>在动态插入时保证树的完美平衡代价非常高昂，因此通过提升树中一个结点保存键的个数减少平衡的代价。2-3查找树引入2-结点(一个键两条链接，左连接的键小于该键，右链接的键大于该键)和3-结点(两个键三条链接，左连接的键小于左键，中间链接的键大于左键小于又见，右链接的键大于右键)来保证平衡。一颗完美平衡的2-3查找树中的所有空链接到根结点的距离都应该是相同的。</p><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>红黑二叉查找树通过标准的二叉查找树(2-结点构成)和颜色信息(替换3-结点)来表示2-3查找树。若指向一个结点的颜色信息为红色则表示这个结点和上层结点表示的是一个3-结点，为黑色则表示是一个普通链接。红黑树既是二叉查找树又是2-3查找树，继承了二叉查找树中高效的查找方法和2-3查找树中高效的平衡插入算法。</p><p>红黑二叉树也可以表示为是含有红黑链接并满足下列条件的二叉查找树：</p><ul><li>红链接均为左链接；</li><li>没有任何一个结点同时和两条红链接相连；</li><li>该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同。</li></ul><p>颜色表示(此处继承二叉查找树代码构建红黑树)：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/26 14:31 * @Description 红黑树 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedBlackBst</span><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Bst</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 指向结点的链接颜色为红色     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> RED <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 指向结点的链接颜色为黑色     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> BLACK <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 指向结点的链接颜色是不是红色     * @param node 结点     * @return true or false     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isRed</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 默认空连接颜色为黑色</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> BLACK<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>color <span class="token operator">==</span> RED<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>左旋转：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 右链接为红色需要进行左旋转操作，红黑树只允许左连接为红色 * 操作：需要变动四处，将根结点的右结点替换根结点，将根结点的右结点的左结点当作根结点的右结点， * 变换颜色，计算结点个数 * @param root 需要旋转的结点 * @return 返回旋转后的根结点 */</span><span class="token keyword">private</span> Node <span class="token function">rotateLeft</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 根结点的右结点</span>    Node right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根结点的右结点变成右结点的左结点</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 右结点替换根结点，根结点变成右结点的左结点</span>    right<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 变色，右结点继承根结点的颜色，根结点变红</span>    right<span class="token punctuation">.</span>color <span class="token operator">=</span> root<span class="token punctuation">.</span>color<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改结点的个数，右结点继承根结点的结点个数，根结点重新计算</span>    right<span class="token punctuation">.</span>size <span class="token operator">=</span> root<span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token function">recalculateSize</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>右旋转：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 当出现两个连续的红链接时，将其中一个红色的左链接进行右旋转操作，操作与左旋转相反 * @param root 需要旋转的结点 * @return 返回旋转后的根结点 */</span><span class="token keyword">private</span> Node <span class="token function">rotateRight</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 根结点的左结点</span>    Node left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根结点的左结点变成左结点的右结点</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 左结点替换根结点，根结点变成左结点的右结点</span>    left<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 变色，左结点继承根结点的颜色，根结点变红</span>    left<span class="token punctuation">.</span>color <span class="token operator">=</span> root<span class="token punctuation">.</span>color<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改结点的个数，左结点继承根结点的结点个数，根结点重新计算</span>    left<span class="token punctuation">.</span>size <span class="token operator">=</span> root<span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token function">recalculateSize</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>颜色转换：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 颜色转换，若一个结点指向左右结点的颜色都是红色的，这就是一个4-结点。 * 需要进行分裂操作，并将指向子结点的颜色变成黑色，指向父节点的颜色从黑色变成红色。 * @param root 需要变换颜色的结点 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">flipColors</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    root<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>插入：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    root <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根结点永远是黑色的</span>    root<span class="token punctuation">.</span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 插入结点， * 1.先按二叉查找树的方法插入到正确位置，插入结点颜色是红色 * 2.若指向右结点的颜色为红色，左结点的颜色为黑色，左旋； * 若指向左结点的颜色为红色，左结点的左结点颜色还是红色，右旋； * 若指向左右节点的颜色均为红色，进行颜色转换。 * 3. 最后的最后要将根结点变成黑色。（此处在调用方法中实现了） * @param root  当前结点 * @param key   键 * @param value 值 * @return 返回插入结点的引用 */</span><span class="token keyword">private</span> Node <span class="token function">put</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 没找到键的位置，把键插入到应该在的位置，颜色设置为红色。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查找键所在结点位置，若找到了覆盖其值。</span>    <span class="token keyword">int</span> cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 右红左黑(左旋)，可能会出现左脸红两个，所以放在第一个判断。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isRed</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 左连红两个(右旋)，之后可能左右都红，所以放在第二个判断。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 左右都红(变色)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">flipColors</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重新计算根结点的结点个数</span>    <span class="token function">recalculateSize</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><p>散列表类似于数组，只是用散列函数将被查找的键转化为数组的一个索引，通过转化后的索引访问数组。访问散列表的速度和访问数组元素一样快速，可以在常数时间内实现查找和插入操作。散列表无法实现有序性操作，散列函数无法表示键的大小关系。</p><h3 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h3><p>如果有一个大小为 M 的数组，散列函数可以将任意键转换为 [0, M-1] 内的正整数，该正整数即为哈希值。散列函数可能会让不同的键拥有相同的哈希值，也就是哈希值分布不均匀，此时就发生了碰撞，需要特殊的碰撞解决方法进行处理。若散列值计算很耗时，可以将每个键的散列值缓存起来，这种方法称为软缓存。</p><ul><li><p>正整数：常用除留余数法，选择任意正整数 k % M(数组长度)得到的数可以有效的将键散布在 [0, M-1] 之间。M 的选择最好是素数，否则无法利用键中包含的所有信息而导致散布不均匀。例如 M 取10的 k 次方，那么就只能利用键的后k位进行散布。</p></li><li><p>浮点数：将键表示为二进制数然后使用除留余数法。</p></li><li><p>字符串：可以通过如下方式散列，r为进制数，通过 r 乘上哈希值再加上字符的ASCII码模数组长度得到字符串的哈希值。如果是多部分组合的类型也可以使用该方法。</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> sign <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      hash <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">*</span> hash <span class="token operator">+</span> sign<span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>hashCode()：该方法是 java 中的一个实现了哈希函数的方法，它默认使用对象的地址值，地址值32位也就是说可以均匀散列至32位整数中。如果需要一个数组索引而不是一个32位的整数，所以可以结合除留余数法进行如下改造。也可以自己覆写对象中的 hashCode() 方法。</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 将符号位屏蔽即32位整数变成31位非负整数，然后使用除留余数法。0x7fffffff即01111111...31个1</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x7fffffff</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>其它的散列函数</p><ul><li>数字分析法：提前知道关键字集合，且每个关键字的位数比散列表的地址码位数多，则可以从关键字中提取数字分布比较均匀的若干位作为散列地址。</li><li>平方取中法：直接取得数字的平方，然后取其中几位。</li><li>折叠法：将关键字分割成相同位数的几部分，然后取这几部分的叠加和(舍去进位)作为散列地址。</li></ul></li></ul><h3 id="碰撞解决"><a href="#碰撞解决" class="headerlink" title="碰撞解决"></a>碰撞解决</h3><h4 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h4><p>将一个大小为 M 的数组中的每个元素指向一条链表，当元素发生碰撞时，就会将该元素存储在索引指向的链表中。拉链法进行查询时，首先查找 key 所在的链表，然后从链表中顺序查找。</p><h4 id="线性探测"><a href="#线性探测" class="headerlink" title="线性探测"></a>线性探测</h4><p>线性探测法使用空位来解决冲突，当发生冲突时在冲突位置遍历数组寻找到一个空位来存储冲突的键。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/26 19:24 * @Description 线性探测 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinearProbingHashSt</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">UnorderedSt</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 当前大小     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 最大容量     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 键集合     */</span>    <span class="token keyword">private</span> Key<span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 值集合     */</span>    <span class="token keyword">private</span> Value<span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LinearProbingHashSt</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">LinearProbingHashSt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        keys <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>        values <span class="token operator">=</span> <span class="token punctuation">(</span>Value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 散列函数     * @param key 键     * @return 哈希值     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x7fffffff</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Value <span class="token function">get</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">putElem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 插入元素，不包含调整数组     * @param key   键     * @param value 值     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putElem</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 找到相同的键，覆盖其值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>        values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 寻找需要删除的键</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 若不存在返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 删除键值对</span>        keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将删除键之后相同哈希值的键值对重新插入</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Key tempKey <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            Value tempValue <span class="token operator">=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>            values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">putElem</span><span class="token punctuation">(</span>tempKey<span class="token punctuation">,</span> tempValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 调整数组大小，使用率α=size/maxSize，当α小于0.5时，探测性能最好，所以最好保证使用率在0.5。     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">>=</span> maxSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前大小大于等于容量的1/2，数组扩容一倍</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> size <span class="token operator">&lt;=</span> maxSize <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前大小小于等于容量的1/8，数字缩小一倍</span>            <span class="token function">resize</span><span class="token punctuation">(</span>maxSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据容量重新调整数组大小     * @param capacity 最大容量     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinearProbingHashSt<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span> linearProbingHashSt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinearProbingHashSt</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                linearProbingHashSt<span class="token punctuation">.</span><span class="token function">putElem</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        keys <span class="token operator">=</span> linearProbingHashSt<span class="token punctuation">.</span>keys<span class="token punctuation">;</span>        values <span class="token operator">=</span> linearProbingHashSt<span class="token punctuation">.</span>values<span class="token punctuation">;</span>        maxSize <span class="token operator">=</span> linearProbingHashSt<span class="token punctuation">.</span>maxSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="查询算法对比"><a href="#查询算法对比" class="headerlink" title="查询算法对比"></a>查询算法对比</h2><table><thead><tr><th>算法</th><th>查找</th><th>插入</th><th>使用</th></tr></thead><tbody><tr><td>顺序查找(无序链表)</td><td>O(n)</td><td>O(n)</td><td>操作大型符号表很慢。</td></tr><tr><td>二分查找(有序数组)</td><td>O(lgn)</td><td>O(n)</td><td>查找很快插入很慢，有序操作，空间占用少。</td></tr><tr><td>二叉树查找(二叉查找树)</td><td>O(n)</td><td>O(n)</td><td>性能没有保障，有序操作，链接需要额外空间。</td></tr><tr><td>2-3树查找(红黑树)</td><td>O(2lgn)</td><td>O(2lgn)</td><td>查找插入很快，有序操作，连接需要额外空间。</td></tr><tr><td>拉链法(链表数组)</td><td>小于O(lgn)</td><td>小于O(lgn)</td><td>查找插入很快，需要额外计算和大量空间。</td></tr><tr><td>线性探测法(并行数组)</td><td>O(clgn)</td><td>O(clgn)</td><td>查找插入很快，需要额外计算和大量空间。</td></tr></tbody></table><p>散列表都是无序的，如果需要优先考虑散列表速度快，如果需要有序性操作则考虑红黑树。考虑存储空间的话散列表占用的存储空间较大，其次红黑树和二叉查找树，再然后顺序查找，最后二分查找。</p><p>java 中 java.util.TreeMap 通过红黑树实现；java.util.HashMap 通过拉链法的散列表实现。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之排序</title>
      <link href="/posts/db4eb545/"/>
      <url>/posts/db4eb545/</url>
      
        <content type="html"><![CDATA[<h2 id="排序模板"><a href="#排序模板" class="headerlink" title="排序模板"></a>排序模板</h2><p>通过 java 的 Comparable 接口的 compareTo() 方法判断两个元素大小关系，使用 less() 和 swap() 来进行比较和交换操作。排序算法的成本模型是比较和交换的次数。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/24 18:40 * @Description 排序模板 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseSort</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 排序     * @param nums 排序的数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 传入的第一个参数是否比第二个参数小     * @param v 第一个参数     * @param w 第二个参数     * @return true or false     */</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">less</span><span class="token punctuation">(</span>T v<span class="token punctuation">,</span> T w<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 交换数组中两个元素     * @param nums 需要交换的数组     * @param i    下标i     * @param j    下标j     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        T temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>从数组中选择一个最小的元素与数组第一个位置的元素交换，再从剩余数组中选择一个最小的元素与数组第二个位置的元素交换，不断重复直至完成排序。</p><p>时间复杂度：需要约n(n-1)/2次的比较和n-1次的交换，因此时间复杂度为O(n²)。时间复杂度与数组初始顺序无关。</p><p>空间复杂度：交换两个元素只需要一个辅助空间，空间复杂度为O(1)。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/24 18:10 * @Description 选择排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectionSort</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">BaseSort</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SelectionSort<span class="token operator">&lt;</span>Integer<span class="token operator">></span> sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectionSort</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        sort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>数组中相邻元素两两比较，遇到右侧元素小于左侧元素则交换，每过一轮循环，就可以让未排序的最大元素上浮至右侧。</p><p>时间复杂度：需要约n(n-1)/2次的比较和n(n-1)/2次的交换，因此时间复杂度为O(n²)。若在一轮循环中没有发生元素交换，则说明数组有序。</p><p>空间复杂度：交换两个元素只需要一个辅助空间，空间复杂度为O(1)。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/24 19:08 * @Description 冒泡排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">BaseSort</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isSorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isSorted<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            isSorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    isSorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BubbleSort<span class="token operator">&lt;</span>Integer<span class="token operator">></span> sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BubbleSort</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        sort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>将当前元素插入到左侧已经排序的数组中，使得插入后的左侧数组仍是井井有条的。</p><p>时间复杂度：需要约n(n-1)/2次的比较和n(n-1)/2次的交换，因此时间复杂度为O(n²)。时间复杂度取决于数组的初始顺序，若数组已经部分有序，则逆序较少，需要交换的次数也就较少，时间复杂度较低，最低为O(n)。</p><p>空间复杂度：交换两个元素只需要一个辅助空间，空间复杂度为O(1)。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/24 20:26 * @Description 插入排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">BaseSort</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BubbleSort<span class="token operator">&lt;</span>Integer<span class="token operator">></span> sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BubbleSort</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        sort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>对于大规模数组，插入排序速度就不是很理想，插入排序由于每次只能将逆序数量减1，因此只适合规模不大的数组排序。希尔排序的出现就是为了解决这种问题，希尔排序每次减少的逆序数量大于插入排序，它通过使用插入排序对间隔h的序列进行排序，然后不断的减少h的值直至另h=1时，整个数组就是有序的。</p><p>时间复杂度：希尔排序的运行时间小于平方级别(大约为n的1点几次方)。</p><p>空间复杂度：交换两个元素只需要一个辅助空间，空间复杂度为O(1)。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/24 22:27 * @Description 希尔排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShellSort</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">BaseSort</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;</span> length <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            h <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">>=</span> h <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> h<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">-</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            h <span class="token operator">=</span> h <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ShellSort<span class="token operator">&lt;</span>Integer<span class="token operator">></span> sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShellSort</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        sort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序通过将一个数组分成两部分，分别对其进行排序然后归并起来，其时间复杂度为O(nlogn)。归并排序常用于大规模数组，在小规模数组上可能不如插入排序快。</p><h3 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h3><p>将两个已排序数组归并称一个。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 排序用复制数组 */</span><span class="token keyword">private</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 归并 * @param nums 数组 * @param lo   开始下标 * @param mid  中点下标 * @param hi   结束下标 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> lo<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> lo<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="自顶向下归并排序"><a href="#自顶向下归并排序" class="headerlink" title="自顶向下归并排序"></a>自顶向下归并排序</h3><p>将大数组对半分求解，即不断的对半分将数组分成两两一组然后通过merge方法排序合并。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 递归排序各部分数组 * @param nums 数组 * @param lo   开始下标 * @param hi   结束下标 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hi <span class="token operator">&lt;=</span> lo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="自底向上归并排序"><a href="#自底向上归并排序" class="headerlink" title="自底向上归并排序"></a>自底向上归并排序</h3><p>将微型数组进行归并，然后成对归并得到的微型数组。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> size <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> size <span class="token operator">+=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> lo <span class="token operator">&lt;</span> length <span class="token operator">-</span> size<span class="token punctuation">;</span> lo <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> lo <span class="token operator">+</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>lo <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序(Quick Sort)和归并排序有点儿类似，只不过归并排序是对半分求解而快速排序是通过一个切分元素将数组分为两个子数组，左子数组小于等于切分元素，右子数组大于等于切分元素，完成这两个子数组排序就完成了整个数组的排序。</p><p>时间复杂度：快速排序最好的情况下是每次都正好将数组对半分，这样递归调用次数才是最少的，其时间复杂度为 O(nlogn)。最坏的情况下切分元素选择的是最小元素，此时时间复杂度为 O(n²)。为了防止数组最开始就是有序的，在进行快速排序时需要随机打乱数组。</p><h3 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">shuffle</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 递归排序各部分数组** @param nums 数组* @param lo   开始下标* @param hi   结束下标*/</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hi <span class="token operator">&lt;=</span> lo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> partition <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> partition <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> partition <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 打乱重组数组，消除对输入的依赖* @param nums 数组洗牌*/</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Comparable<span class="token operator">&lt;</span>T<span class="token operator">>></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    Collections<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="切分元素选择"><a href="#切分元素选择" class="headerlink" title="切分元素选择"></a>切分元素选择</h3><ul><li><p>直接取第一位作为切分元素。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 取数组第一个元素作为切分元素   * @param nums 数组   * @param lo   开始下标   * @param hi   结束下表   * @return 切分元素下标   */</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">,</span> j <span class="token operator">=</span> hi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      T partition <span class="token operator">=</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> partition<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">!=</span> lo<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> j<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>三数取中<br>  切分元素最好的情况就是取数组的中位数，但是计算中位数的代价很高。因此通常随机取3个元素，然后将大小其中的元素作为切分元素。</p></li><li><p>三向切分<br>  对于有大量重复元素的数组，可以将数组切分为三部分，分别对应于小于、等于和大于切分元素。三向切分快速排序对于有大量重复元素的随机数组可以在线性时间内完成排序。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 三向切分递归排序各部分数组   * @param nums 数组   * @param lo   开始下标   * @param hi   结束下标   */</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hi <span class="token operator">&lt;=</span> lo<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">int</span> lt <span class="token operator">=</span> lo<span class="token punctuation">,</span> i <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> gt <span class="token operator">=</span> hi<span class="token punctuation">;</span>      T partition <span class="token operator">=</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> gt<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> cmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lt<span class="token operator">++</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> gt<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              i<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> lt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> gt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>在堆的完全二叉树中，每个结点的值都小于等于它的父结点的值。因为堆是完全二叉树，所以可以通过数组来表示。位置k的结点的父节点位置为 k/2，其两个子结点位置分别为 2k 和 2k+1。数组索引从1开始，方便描述结点位置关系。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/25 12:05 * @Description 堆 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Heap</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 堆主体     */</span>    <span class="token keyword">private</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> heap<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前元素个数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Heap</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        heap <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>maxNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 是否为空     * @return true or false     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 当前栈所包含的元素个数     * @return 元素个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 传入的第一个元素是否比第二个元素小     * @param i 第一个元素下标     * @param j 第二个元素下标     * @return true or false     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">less</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 交换数组中两个元素     * @param i 下标i     * @param j 下标j     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        T temp <span class="token operator">=</span> heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 一个元素插入可能会破坏堆的有序状态，上浮操作将大的元素上浮     * @param k 插入的结点     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 一个元素插入可能会破坏堆的有序状态，下沉操作将小的元素下沉     * @param k 插入的结点     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sink</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">&lt;=</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> num <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">less</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 插入元素     * @param elem 需要插入的元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>T elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        heap<span class="token punctuation">[</span><span class="token operator">++</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> elem<span class="token punctuation">;</span>        <span class="token function">swim</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除最大元素     * @return 返回删除的元素     */</span>    <span class="token keyword">public</span> T <span class="token function">delMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        T max <span class="token operator">=</span> heap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heap<span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token function">sink</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Heap<span class="token operator">&lt;</span>Integer<span class="token operator">></span> sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Heap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sort<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sort<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sort<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sort<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sort<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sort<span class="token punctuation">.</span><span class="token function">delMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>无序数组建立堆最简单的方法就是从左至右遍历数组进行上浮操作。稍微复杂一点但是更高效的方法是从右至左遍历进行下沉操作，叶子节点不需要进行下沉操作，所以只需要遍历一般元素即可，比上浮建立的方法快一倍呢。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/25 13:25 * @Description 堆排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">BaseSort</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构造堆有序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sink</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 最大元素与最后一个元素交换之后进行下沉操作重新变成堆有序</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> num<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sink</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 一个元素插入可能会破坏堆的有序状态，下沉操作将小的元素下沉     * @param k 插入的结点     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sink</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> k <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> num <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">less</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HeapSort<span class="token operator">&lt;</span>Integer<span class="token operator">></span> sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeapSort</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        sort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="排序算法对比"><a href="#排序算法对比" class="headerlink" title="排序算法对比"></a>排序算法对比</h2><table><thead><tr><th>算法</th><th>稳定性</th><th>时间复杂度</th><th>空间复杂度</th><th>备注</th></tr></thead><tbody><tr><td>选择排序</td><td>×</td><td>O(n²)</td><td>O(1)</td><td></td></tr><tr><td>冒泡排序</td><td>√</td><td>O(n²)</td><td>O(1)</td><td></td></tr><tr><td>插入排序</td><td>√</td><td>O(n)~O(n²)</td><td>O(1)</td><td>时间复杂度与输入元素排列情况有关。</td></tr><tr><td>希尔排序</td><td>×</td><td>O(n的一点几次方)</td><td>O(1)</td><td>插入排序改良版，依次减少大于一个逆序组。</td></tr><tr><td>归并排序</td><td>√</td><td>O(nlogn)</td><td>O(n)</td><td>需要额外数组复制原数组元素。</td></tr><tr><td>快速排序</td><td>×</td><td>O(nlogn)~O(n²)</td><td>O(lgn)~O(n)</td><td>空间复杂度与递归深度有关。</td></tr><tr><td>三向快速排序</td><td>×</td><td>O(n)~O(nlogn)</td><td>O(lgn)</td><td>专门用于处理数组中含大量重复元素的情况。</td></tr><tr><td>堆排序</td><td>×</td><td>O(nlogn)</td><td>O(1)</td><td></td></tr></tbody></table><p>通常使用快速排序，其时间复杂度 O(cnlogn) 的常数 c 通常比其他排序小；当出现大量重复元素时使用三向快速排序，因为它的时间复杂度可能达到O(n)。</p><p>JAVA 主要排序方法为 java.util.Arrays.sort()，对于原始数据类型使用三向快速排序，对于引用类型使用归并排序。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之图</title>
      <link href="/posts/f932ba85/"/>
      <url>/posts/f932ba85/</url>
      
        <content type="html"><![CDATA[<p>图$($Graph$)$由顶点$($V, vertex$)$和表示顶点之间关系的边$($E, edge, 弧$)$所组成。$V(G)$和$E(G)$分别表示图G的顶点集和边集，$E(G)$可为空集。</p><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><p>设n为图中顶点数目，e为表示边的数目。</p><table><thead><tr><th>子图</th><th>一个图的顶点集和边集完全包含另一张图的顶点集和边集。</th></tr></thead><tbody><tr><td>无向完全图和有向完全图</td><td>完全图即顶点集中每两个顶点之间都至少有一条边，若有一条边则称为无向完全图，有两条互相指向对方的边则称为有向完全图。有n个顶点的无向完全图，具有$\frac{n(n-1)}{2}$条边，有向完全图的边数是其两倍，为$n(n-1)$。</td></tr><tr><td>稀疏图和稠密图</td><td>边数很少$(e\lt nlog_2n)$的图称为稀疏图，反之称为稠密图。</td></tr><tr><td>邻接点</td><td>无向图中，若两顶点之间有边则称这两个点相邻接。</td></tr><tr><td>度、入度和出度</td><td>无向图一个顶点有几条边，其度就是几，记作TD$($v$)$。有向图分为入度和出度，入度即其他顶点指向该顶点的边数，记作ID$($v$)$；出度即该顶点指向其他顶点的边数，记作OD$($v$)$；有向图的度等于入度加出度。</td></tr><tr><td>路径和路径长度</td><td>路径即一个顶点到另一个顶点经过的顶点的集合。路径长度是一条路径上经过的边的数目。有向图其路径也是有向的。</td></tr><tr><td>回路或环</td><td>第一个顶点和最后一个顶点相同的路径。</td></tr><tr><td>简单路径、简单回路或简单环</td><td>简单路径即序列中顶点不重复出现的路径。除第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路称为简单回路或简单环。</td></tr><tr><td>连通、连通图和连通分量</td><td>若顶点v到顶点v’有路径，则称v和v’是连通的。若一张图任意两个顶点之间都是连通的，则该图是连通图。连通分量即无向图中的极大连通子图。</td></tr><tr><td>强连通图和强连通分量</td><td>在一张有向图中，对于任意两个顶点v和v’，存在v到v’和v’到v都存在路径，则该有向图是强连通图。有向图中的极大强连通子图就是有向图的强连通分量$($有向图不一定要是强连通图$)$。</td></tr><tr><td>连通图的生成树</td><td>一个包含了图中全部顶点的极小连通子图，且仅拥有足以构成一棵树的n-1条边，该连通子图就称为连通图的生成树。</td></tr><tr><td>有向树和生成森林</td><td>有向树即有一个顶点入度为0，其余顶点入度为1的有向图。一个有向图的生成树即由若干棵有向树组成，含有图中全部顶点，但只有足以构成若干棵不相交的有向树的边。</td></tr></tbody></table><h2 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h2><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><ul><li><p>邻接矩阵$($Adjacency Matrix$)$是表示顶点之间相邻关系的矩阵。可以看作是一个矩阵，其行依次代表顶点$v_1, \dots, v_n$，其列也分别代表顶点$v_1, \dots, v_n$。因此可以用一个二维数组来存储边相关信息，一个一维数组存储顶点信息。</p><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>邻接矩阵</td><td>1.便于计算两个顶点之间是否有边；<br>2.便于计算各个顶点之间的度，例如行和就是该顶点的入度，列和就是该顶点的出度。</td><td>1.不利于增删顶点；不便统计边的条数，每次统计需要扫描整个表，时间复杂度为$O(n^2)$；<br>2.空间复杂度为$O(n^2)$；适合表示稠密图。</td></tr></tbody></table></li><li><p>具体代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/23 10:27 * @Description 有向图邻接矩阵 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdjacencyMatrix</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 邻接矩阵主体     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arcs<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 图最大顶点数和当前的边数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> vexMaxNum<span class="token punctuation">,</span> arcNum<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 顶点表     */</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> vexs<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化一个空邻接矩阵     * @param vexMaxNum 图总顶点数     */</span>    <span class="token keyword">public</span> <span class="token function">AdjacencyMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> vexMaxNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vexMaxNum <span class="token operator">=</span> vexMaxNum<span class="token punctuation">;</span>        arcNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        arcs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>vexMaxNum<span class="token punctuation">]</span><span class="token punctuation">[</span>vexMaxNum<span class="token punctuation">]</span><span class="token punctuation">;</span>        vexs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>vexMaxNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回顶点在图中所在位置(下标)     * @param vex 顶点     * @return 下标，-1为空     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">locateVex</span><span class="token punctuation">(</span>Object vex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vexs<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>vex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> vexs<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>vex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据下标获取顶点     *     * @param index 顶点下标     * @return 顶点     */</span>    <span class="token keyword">public</span> Object <span class="token function">getVex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"没有该顶点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> vexs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将顶点加入顶点表     * @param vex 顶点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertVex</span><span class="token punctuation">(</span>Object vex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 满了直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vexMaxNum <span class="token operator">==</span> vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"顶点表满了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据顶点下标删除顶点     * @param index 顶点下标     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteVex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"顶点为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vexs<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除边表中该顶点所在行列</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> finalArcs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arcs<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>arcs<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fi <span class="token operator">=</span> i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arcs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fj <span class="token operator">=</span> j<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arcs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        finalArcs<span class="token punctuation">[</span>fi<span class="token punctuation">]</span><span class="token punctuation">[</span>fj<span class="token punctuation">]</span> <span class="token operator">=</span> arcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        fj<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                fi<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        arcs <span class="token operator">=</span> finalArcs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 插入顶点1和顶点2的边     * @param v1Index 顶点1     * @param v2Index 顶点2     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertArc</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1Index<span class="token punctuation">,</span> <span class="token keyword">int</span> v2Index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 无向图边最多为顶点数*(顶点数-1)/2，有向图边数是无向图边数*2</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arcNum <span class="token operator">==</span> vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"已达顶点所能拥有的最大边数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arcs<span class="token punctuation">[</span>v1Index<span class="token punctuation">]</span><span class="token punctuation">[</span>v2Index<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        arcNum<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除顶点1和顶点2的边     * @param v1Index 顶点1     * @param v2Index 顶点2     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteArc</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1Index<span class="token punctuation">,</span> <span class="token keyword">int</span> v2Index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arcNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"图中连一条边都没有"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arcs<span class="token punctuation">[</span>v1Index<span class="token punctuation">]</span><span class="token punctuation">[</span>v2Index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arcs<span class="token punctuation">[</span>v1Index<span class="token punctuation">]</span><span class="token punctuation">[</span>v2Index<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arcNum<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据顶点下标返回该顶点的第一个邻接顶点下标     * @param index 顶点下标     * @return 邻接顶点下标，-1为空。     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">firstAdjVex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 列和表示出度</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回顶点v1相对于其邻接顶点v2     * @param v1Index 顶点v1     * @param v2Index 顶点v1的一个邻接顶点v2     * @return 下一个邻接顶点下标     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextAdjVex</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1Index<span class="token punctuation">,</span> <span class="token keyword">int</span> v2Index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 列和表示出度</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> v2Index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>v1Index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><ul><li><p>邻接表$($Adjacency List$)$由表头结点表和边表组成：</p><ul><li>表头结点表使用一维数组存储表头结点，而表头结点包含data$($数据域$)$和firstarc$($指向邻接结点$)$。</li><li>边表结点包含adjvex$($邻接点域，与表头结点中顶点邻接的顶点的位置$)$、info$($边相关信息，如权值$)$和nextarc$($与表头结点中顶点邻接的下一个邻接结点$)$。</li></ul><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>邻接表</td><td>1. 便于增删顶点；<br>2.便于统计边的数目，按定点表顺序扫描所有边表即可获得数目，其时间复杂度为$O(n+e)$；<br>3.空间效率高，有向图的边表结点为e个，无向图边表结点为2e个，其空间复杂度为$O(n+e)$，适合表示稀疏图。</td><td>1.不便于判断顶点之间是否有边。<br>2.不便于计算有向图各个顶点的度。在有向图中遍历某个表头结点的边表是该顶点的出度，如果要获得入度则需要遍历全表，可以为邻接表建立逆邻接表获得入度。（逆邻接表就是边表存储该顶点的入度，但是获取出度困难。）</td></tr></tbody></table></li><li><p>具体代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/23 13:31 * @Description 边 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 弧尾    */</span>    VexNode start<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * 弧头    */</span>    VexNode end<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Edge</span><span class="token punctuation">(</span>VexNode start<span class="token punctuation">,</span> VexNode end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/23 13:33 * @Description 表头结点 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VexNode</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 顶点包含数据    */</span>    Object data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * 与该顶点邻接的第一个边    */</span>    ArcNode firstArc<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">VexNode</span><span class="token punctuation">(</span>Object data<span class="token punctuation">,</span> ArcNode firstArc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstArc <span class="token operator">=</span> firstArc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">VexNode</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        firstArc <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/23 13:33 * @Description 边表结点 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArcNode</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 边相关信息，如权值    */</span>    <span class="token keyword">int</span> info<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * 邻接点域，与表头结点中顶点邻接的顶点的位置    */</span>    VexNode adjVex<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * 与表头结点中顶点邻接的下一个边结点    */</span>    ArcNode nextArc<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ArcNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> info<span class="token punctuation">,</span> VexNode adjVex<span class="token punctuation">,</span> ArcNode nextArc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adjVex <span class="token operator">=</span> adjVex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextArc <span class="token operator">=</span> nextArc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ArcNode</span><span class="token punctuation">(</span>VexNode adjVex<span class="token punctuation">,</span> ArcNode nextArc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        info <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adjVex <span class="token operator">=</span> adjVex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextArc <span class="token operator">=</span> nextArc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ArcNode</span><span class="token punctuation">(</span>VexNode adjVex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        info <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adjVex <span class="token operator">=</span> adjVex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextArc <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @Author 喵粮都输光了* @Date 2020/3/23 12:02* @Description 邻接表*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdjacencyList</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 顶点结点表    */</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>VexNode<span class="token operator">></span> vexs<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 图最大顶点数和当前的边数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> vexMaxNum<span class="token punctuation">,</span> arcNum<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * 根据顶点集和边集初始化邻接表    * @param vexs  顶点集    * @param edges 边集    */</span>    <span class="token keyword">public</span> <span class="token function">AdjacencyList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>VexNode<span class="token operator">></span> vexs<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vexs <span class="token operator">==</span> null <span class="token operator">||</span> vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vexMaxNum <span class="token operator">=</span> vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将顶点集的顶点存入顶点结点表</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vexs <span class="token operator">=</span> vexs<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将边信息存入边结点，并与其邻接点相连</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>edges <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>Edge edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span>              VexNode startNode <span class="token operator">=</span> edge<span class="token punctuation">.</span>start<span class="token punctuation">;</span>              ArcNode arcNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArcNode</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>              arcNode<span class="token punctuation">.</span>nextArc <span class="token operator">=</span> startNode<span class="token punctuation">.</span>firstArc<span class="token punctuation">;</span>              startNode<span class="token punctuation">.</span>firstArc <span class="token operator">=</span> arcNode<span class="token punctuation">;</span>              arcNum<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/23 13:46 * @Description 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        VexNode v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VexNode v2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VexNode v3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VexNode v4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>VexNode<span class="token operator">></span> vexs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>        vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">AdjacencyList</span><span class="token punctuation">(</span>vexs<span class="token punctuation">,</span> edges<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h3><ul><li><p>十字链表$($Orthogonal List$)$相当于有向图的邻接表和逆邻接表结合所得到的一种链表。它由顶点结点和边结点组成：</p><ul><li>顶点结点包含data$($数据域$)$、firstin$($指向以该顶点为弧头的顶点，即该顶点的入度表$)$和firstout$($指向以该顶点为弧尾的顶点，即该顶点的出度表$)$。</li><li>边结点包含tailvex$($尾域，弧尾指向的结点$)$、headvex$($头域，弧头指向的结点$)$、hlink$($头链域，以头域所指顶点为弧头的下一个结点，即头域所指结点的入度表$)$、tlink$($尾链域，以尾域所指顶点为弧尾的下一个结点，即尾域所指结点的出度表$)$和info$($边相关信息，如权值$)$。</li></ul></li><li><p>优点：时间复杂度和邻接表一样都是$O(n+e)$，且容易求得顶点的出度和入度。</p></li><li><p>具体代码演示：</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/23 13:31   * @Description 边   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 弧尾       */</span>      VexNode start<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 弧头       */</span>      VexNode end<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">Edge</span><span class="token punctuation">(</span>VexNode start<span class="token punctuation">,</span> VexNode end<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/23 13:59   * @Description 表头结点   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VexNode</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 顶点包含数据       */</span>      Object data<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 指向以该顶点为弧头的边，即该顶点的入度表       */</span>      ArcNode firstIn<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 指向以该顶点为弧尾的边，即该顶点的出度表       */</span>      ArcNode firstOut<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">VexNode</span><span class="token punctuation">(</span>Object data<span class="token punctuation">,</span> ArcNode firstIn<span class="token punctuation">,</span> ArcNode firstOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>firstIn <span class="token operator">=</span> firstIn<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>firstOut <span class="token operator">=</span> firstOut<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">VexNode</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>firstIn <span class="token operator">=</span> null<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>firstOut <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/23 14:00   * @Description 边表结点   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArcNode</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 边相关信息，如权值       */</span>      <span class="token keyword">int</span> info<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 尾域，弧尾指向的结点       */</span>      VexNode tailVex<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 头域，弧头指向的结点       */</span>      VexNode headVex<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 头链域，以头域所指顶点为弧头的下一个结点，即头域所指结点的入度表       */</span>      ArcNode headLink<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 尾链域，以尾域所指顶点为弧尾的下一个结点，即尾域所指结点的出度表       */</span>      ArcNode tailLink<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">ArcNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> info<span class="token punctuation">,</span> VexNode tailVex<span class="token punctuation">,</span> VexNode headVex<span class="token punctuation">,</span> ArcNode headLink<span class="token punctuation">,</span> ArcNode tailLink<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>tailVex <span class="token operator">=</span> tailVex<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>headVex <span class="token operator">=</span> headVex<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>headLink <span class="token operator">=</span> headLink<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>tailLink <span class="token operator">=</span> tailLink<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">ArcNode</span><span class="token punctuation">(</span>VexNode tailVex<span class="token punctuation">,</span> VexNode headVex<span class="token punctuation">,</span> ArcNode headLink<span class="token punctuation">,</span> ArcNode tailLink<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>tailVex <span class="token operator">=</span> tailVex<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>headVex <span class="token operator">=</span> headVex<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>headLink <span class="token operator">=</span> headLink<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>tailLink <span class="token operator">=</span> tailLink<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/23 14:05   * @Description 十字链表   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrthogonalList</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 顶点结点表       */</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>VexNode<span class="token operator">></span> vexs<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 图最大顶点数和当前的边数       */</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> vexMaxNum<span class="token punctuation">,</span> arcNum<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 根据顶点集和边集初始化十字链表       * @param vexs  顶点集       * @param edges 边集       */</span>      <span class="token keyword">public</span> <span class="token function">OrthogonalList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>VexNode<span class="token operator">></span> vexs<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>vexs <span class="token operator">==</span> null <span class="token operator">||</span> vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          vexMaxNum <span class="token operator">=</span> vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 将顶点集的顶点存入顶点结点表</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>vexs <span class="token operator">=</span> vexs<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 将边信息存入边结点，并与其邻接点相连</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>edges <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span>Edge edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// edge.start是弧尾</span>                  VexNode startNode <span class="token operator">=</span> edge<span class="token punctuation">.</span>start<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// edge.end是弧头</span>                  VexNode endNode <span class="token operator">=</span> edge<span class="token punctuation">.</span>end<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 参数分别为尾域、头域、头链域、尾链域，</span>                  ArcNode arcNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArcNode</span><span class="token punctuation">(</span>startNode<span class="token punctuation">,</span> endNode<span class="token punctuation">,</span> endNode<span class="token punctuation">.</span>firstIn<span class="token punctuation">,</span> startNode<span class="token punctuation">.</span>firstOut<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 指向下一个出度结点</span>                  startNode<span class="token punctuation">.</span>firstOut <span class="token operator">=</span> arcNode<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 指向下一个入度结点</span>                  endNode<span class="token punctuation">.</span>firstIn <span class="token operator">=</span> arcNode<span class="token punctuation">;</span>                  arcNum<span class="token operator">++</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 输出       */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>VexNode vexNode <span class="token operator">:</span> vexs<span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>vexNode<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">" -> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              ArcNode arcNode <span class="token operator">=</span> vexNode<span class="token punctuation">.</span>firstOut<span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>arcNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arcNode<span class="token punctuation">.</span>headVex<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">" -> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  arcNode <span class="token operator">=</span> arcNode<span class="token punctuation">.</span>tailLink<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>VexNode vexNode <span class="token operator">:</span> vexs<span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>vexNode<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">" &lt;- "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              ArcNode arcNode <span class="token operator">=</span> vexNode<span class="token punctuation">.</span>firstIn<span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>arcNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arcNode<span class="token punctuation">.</span>tailVex<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">" &lt;- "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  arcNode <span class="token operator">=</span> arcNode<span class="token punctuation">.</span>headLink<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/19 10:37   * @Description 算法测试   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          VexNode v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>VexNode<span class="token operator">></span> vexs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          OrthogonalList s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrthogonalList</span><span class="token punctuation">(</span>vexs<span class="token punctuation">,</span> edges<span class="token punctuation">)</span><span class="token punctuation">;</span>          s<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="邻接多重表"><a href="#邻接多重表" class="headerlink" title="邻接多重表"></a>邻接多重表</h3><ul><li><p>邻接多重表$($Adjacency Multilist$)$是无向图的另一种链式存储结构。在邻接表中同一条边所对应的两个顶点分别在两个不相同的边表中，当有需求寻找一条边的两个顶点时，采用邻接多重表操作图比较方便。邻接多重表和十字链表一样由顶点结点和边结点组成：</p><ul><li>顶点结点包含firstedge$($指向第一条依附该顶点的边$)$和data$($数据域$)$。</li><li>边结点包含mark$($标记域，标记该边是否被搜索过$)$、ivex$($该边依附的顶点i$)$、ilink$($指向依附于顶点i的另一条边$)$、jvex$($该边依附的顶点j$)$、jlink$($指向依附于顶点j的另一条边$)$和info$($边相关信息，如权值$)$。</li></ul></li><li><p>优点：邻接多重表除了每个边结点比邻接表多边结点一个标记域，其所需存储量和邻接表相同。</p></li><li><p>具体代码演示：</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/23 13:31   * @Description 边   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 弧尾       */</span>      VexNode start<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 弧头       */</span>      VexNode end<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">Edge</span><span class="token punctuation">(</span>VexNode start<span class="token punctuation">,</span> VexNode end<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/23 17:24   * @Description 表头结点   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VexNode</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 顶点包含数据       */</span>      Object data<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 指向第一条依附该顶点的边       */</span>      ArcNode firstEdge<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">VexNode</span><span class="token punctuation">(</span>Object data<span class="token punctuation">,</span> ArcNode firstEdge<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>firstEdge <span class="token operator">=</span> firstEdge<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">VexNode</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>firstEdge <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/23 17:24   * @Description 边表结点   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArcNode</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 边相关信息，如权值       */</span>      <span class="token keyword">int</span> info<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 标记域，是否被搜索过       */</span>      <span class="token keyword">boolean</span> isSearched<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 该边依附的顶点i       */</span>      VexNode iVex<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 指向依附于顶点i的另一条边       */</span>      ArcNode iLink<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 该边依附的顶点j       */</span>      VexNode jVex<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 指向依附于顶点j的另一条边       */</span>      ArcNode jLink<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">ArcNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> info<span class="token punctuation">,</span> VexNode iVex<span class="token punctuation">,</span> ArcNode iLink<span class="token punctuation">,</span> VexNode jVex<span class="token punctuation">,</span> ArcNode jLink<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>iVex <span class="token operator">=</span> iVex<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>iLink <span class="token operator">=</span> iLink<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>jVex <span class="token operator">=</span> jVex<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>jLink <span class="token operator">=</span> jLink<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isSearched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">ArcNode</span><span class="token punctuation">(</span>VexNode iVex<span class="token punctuation">,</span> ArcNode iLink<span class="token punctuation">,</span> VexNode jVex<span class="token punctuation">,</span> ArcNode jLink<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>iVex <span class="token operator">=</span> iVex<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>iLink <span class="token operator">=</span> iLink<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>jVex <span class="token operator">=</span> jVex<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>jLink <span class="token operator">=</span> jLink<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isSearched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/23 17:26   * @Description 邻接多重表   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdjacencyMultiList</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 顶点结点表       */</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>VexNode<span class="token operator">></span> vexs<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 图最大顶点数和当前的边数       */</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> vexMaxNum<span class="token punctuation">,</span> arcNum<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 根据顶点集和边集初始化邻接多重表       * @param vexs  顶点集       * @param edges 边集       */</span>      <span class="token keyword">public</span> <span class="token function">AdjacencyMultiList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>VexNode<span class="token operator">></span> vexs<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>vexs <span class="token operator">==</span> null <span class="token operator">||</span> vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          vexMaxNum <span class="token operator">=</span> vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 将顶点集的顶点存入顶点结点表</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>vexs <span class="token operator">=</span> vexs<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 将边信息存入边结点，并与其邻接点相连</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>edges <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span>Edge edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// edge.start是弧尾</span>                  VexNode startNode <span class="token operator">=</span> edge<span class="token punctuation">.</span>start<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// edge.end是弧头</span>                  VexNode endNode <span class="token operator">=</span> edge<span class="token punctuation">.</span>end<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 创建这两个结点的边结点，两个顶点共用一条边</span>                  ArcNode arcNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArcNode</span><span class="token punctuation">(</span>startNode<span class="token punctuation">,</span> startNode<span class="token punctuation">.</span>firstEdge<span class="token punctuation">,</span> endNode<span class="token punctuation">,</span> endNode<span class="token punctuation">.</span>firstEdge<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 弧头的另一个边</span>                  startNode<span class="token punctuation">.</span>firstEdge <span class="token operator">=</span> arcNode<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 弧尾的另一个边</span>                  endNode<span class="token punctuation">.</span>firstEdge <span class="token operator">=</span> arcNode<span class="token punctuation">;</span>                  arcNum<span class="token operator">++</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 输出       */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>VexNode vex <span class="token operator">:</span> vexs<span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>vex<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">" -> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              ArcNode arcNode <span class="token operator">=</span> vex<span class="token punctuation">.</span>firstEdge<span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>arcNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" | "</span> <span class="token operator">+</span> arcNode<span class="token punctuation">.</span>iVex<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> arcNode<span class="token punctuation">.</span>jVex<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">" | -> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 需要输出某个顶点的所有边，需要判断当前边的iVex还是jVex等于需要输出的结点来决定下一个访问iLink还是JLink。</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>vex <span class="token operator">==</span> arcNode<span class="token punctuation">.</span>iVex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      arcNode <span class="token operator">=</span> arcNode<span class="token punctuation">.</span>iLink<span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                      arcNode <span class="token operator">=</span> arcNode<span class="token punctuation">.</span>jLink<span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/19 10:37   * @Description 算法测试   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          VexNode v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>VexNode<span class="token operator">></span> vexs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v3<span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v3<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          AdjacencyMultiList adjacencyMultiList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdjacencyMultiList</span><span class="token punctuation">(</span>vexs<span class="token punctuation">,</span> edges<span class="token punctuation">)</span><span class="token punctuation">;</span>          adjacencyMultiList<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><ul><li><p>深度优先搜索$($Depth First Search, DFS$)$遍历思路$($类似树的先序遍历$)$：从图中某个顶点开始遍历，将遍历过的顶点标上已遍历的标记，随意选择一个邻接顶点遍历它并选择这个顶点的邻接顶点遍历，不断重复，当遍历到某个顶点发现这个顶点没有未标记的邻接顶点时就往回退返回上一个邻接顶点，从上一个邻接顶点选择其他未标记的邻接顶点遍历，以此类推直到图中所有邻接顶点都标记过了遍历就完成了。通过深度优先搜索遍历路径构成的树称为深度优先生成树。</p></li><li><p>时间复杂度：当使用邻接矩阵存储时，每个顶点都要遍历n次寻找邻接顶点，其时间复杂度为$O(n^2)$；当用邻接表存储时，每个顶点只需要查找其相连的边即可，即查找邻接顶点时间复杂度为$O(e)$，所以整体遍历时间复杂度为$O(n+e)$。</p></li><li><p>算法实现：通常使用递归实现，此处实现遍历非连通的邻接表结构的图。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/23 12:02   * @Description 邻接表   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdjacencyList</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 顶点结点表       */</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>VexNode<span class="token operator">></span> vexs<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 图最大顶点数和当前的边数       */</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> vexMaxNum<span class="token punctuation">,</span> arcNum<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 存储顶点是否被遍历过的信息       */</span>      <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> state<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 根据顶点集和边集初始化邻接表       * @param vexs  顶点集       * @param edges 边集       */</span>      <span class="token keyword">public</span> <span class="token function">AdjacencyList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>VexNode<span class="token operator">></span> vexs<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>vexs <span class="token operator">==</span> null <span class="token operator">||</span> vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          vexMaxNum <span class="token operator">=</span> vexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 将顶点集的顶点存入顶点结点表</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>vexs <span class="token operator">=</span> vexs<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 将边信息存入边结点，并与其邻接点相连</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>edges <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span>Edge edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  VexNode startNode <span class="token operator">=</span> edge<span class="token punctuation">.</span>start<span class="token punctuation">;</span>                  ArcNode arcNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArcNode</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>                  arcNode<span class="token punctuation">.</span>nextArc <span class="token operator">=</span> startNode<span class="token punctuation">.</span>firstArc<span class="token punctuation">;</span>                  startNode<span class="token punctuation">.</span>firstArc <span class="token operator">=</span> arcNode<span class="token punctuation">;</span>                  arcNum<span class="token operator">++</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 查找顶点所在位置       * @param vexNode 需要查找的顶点       * @return 顶点下标       */</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVexIndex</span><span class="token punctuation">(</span>VexNode vexNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> vexs<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>vexNode<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 顶点是否被遍历       * @param vexNode 顶点       * @return true or false       */</span>      <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isVisited</span><span class="token punctuation">(</span>VexNode vexNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> state<span class="token punctuation">[</span><span class="token function">getVexIndex</span><span class="token punctuation">(</span>vexNode<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 深度优先遍历       */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfsTraverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>vexMaxNum<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 若图非连通，遍历所有子连通图</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>VexNode vexNode <span class="token operator">:</span> vexs<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isVisited</span><span class="token punctuation">(</span>vexNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">dfs</span><span class="token punctuation">(</span>vexNode<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 深度优先遍历子图       * @param vexNode 需要遍历的结点       */</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>VexNode vexNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 将遍历顶点设置称true</span>          state<span class="token punctuation">[</span><span class="token function">getVexIndex</span><span class="token punctuation">(</span>vexNode<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vexNode<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 寻找下一条边的另一个顶点，判断是否遍历过，若未遍历过则递归遍历，遍历过就寻找下一个邻接点</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>ArcNode arcNode <span class="token operator">=</span> vexNode<span class="token punctuation">.</span>firstArc<span class="token punctuation">;</span> arcNode <span class="token operator">!=</span> null<span class="token punctuation">;</span> arcNode <span class="token operator">=</span> arcNode<span class="token punctuation">.</span>nextArc<span class="token punctuation">)</span> <span class="token punctuation">{</span>              vexNode <span class="token operator">=</span> arcNode<span class="token punctuation">.</span>adjVex<span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isVisited</span><span class="token punctuation">(</span>vexNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">dfs</span><span class="token punctuation">(</span>vexNode<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/24 10:18   * @Description 测试   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          VexNode v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>VexNode<span class="token operator">></span> vexs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          AdjacencyList adjacencyList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdjacencyList</span><span class="token punctuation">(</span>vexs<span class="token punctuation">,</span> edges<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"深度"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          adjacencyList<span class="token punctuation">.</span><span class="token function">dfsTraverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><ul><li><p>广度优先搜索$($Breadth Firsh Search, BFS$)$遍历思路$($类似树的层序遍历$)$：从图中某个顶点开始遍历，将遍历过的顶点标上已遍历的标记，遍历所有该顶点的邻接顶点，然后分别从刚访问过的邻接顶点出发依次访问它们的邻接顶点，直到图中所有邻接顶点都标记过了遍历就完成了。通过广度优先搜索遍历路径构成的树称为广度优先生成树。</p></li><li><p>时间复杂度：时间复杂度和深度优先搜索相同，使用邻接矩阵时时间复杂度为$O(n^2)$，使用连接表时时间复杂度为$O(n+e)$。因此两者的区别仅仅是遍历顺序不同而已。</p></li><li><p>算法实现：通常使用队列实现，此处实现遍历非连通的邻接表结构的图。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 广度优先遍历   */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bfsTraverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>vexMaxNum<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 若图非连通，遍历所有子连通图</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>VexNode vexNode <span class="token operator">:</span> vexs<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isVisited</span><span class="token punctuation">(</span>vexNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">bfs</span><span class="token punctuation">(</span>vexNode<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 广度优先遍历子图   * @param rootNode 需要遍历的结点   */</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>VexNode rootNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Queue<span class="token operator">&lt;</span>VexNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          rootNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          state<span class="token punctuation">[</span><span class="token function">getVexIndex</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>ArcNode arcNode <span class="token operator">=</span> rootNode<span class="token punctuation">.</span>firstArc<span class="token punctuation">;</span> arcNode <span class="token operator">!=</span> null<span class="token punctuation">;</span> arcNode <span class="token operator">=</span> arcNode<span class="token punctuation">.</span>nextArc<span class="token punctuation">)</span> <span class="token punctuation">{</span>              rootNode <span class="token operator">=</span> arcNode<span class="token punctuation">.</span>adjVex<span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isVisited</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/24 10:18   * @Description 测试   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          VexNode v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          VexNode v5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VexNode</span><span class="token punctuation">(</span><span class="token string">"v5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>VexNode<span class="token operator">></span> vexs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>          vexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          AdjacencyList adjacencyList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdjacencyList</span><span class="token punctuation">(</span>vexs<span class="token punctuation">,</span> edges<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"广度"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          adjacencyList<span class="token punctuation">.</span><span class="token function">dfsTraverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="常用图算法"><a href="#常用图算法" class="headerlink" title="常用图算法"></a>常用图算法</h2><ul><li><p>最小生成树：又称为最小代价生成树$($Minimum Cost Spanning Tree$)$，是在一个连通网的所有生成树中，各边的代价之和最小的那棵生成树。其常用算法有 Prim 算法和 Kruskal 算法。</p></li><li><p>最短路径：从一个顶点到另一个顶点之间各边代价之和最小的那条路径。在带权有向网中，第一个顶点称为源点$($Source$)$，最后一个顶点称为终点$($Destination$)$。其常用算法有 Dijkstra 算法和 Floyd 算法。</p></li><li><p>拓扑排序：</p><ul><li>有向无环图$($Directed Acycline Graph, DAG$)$：一个无环的有向图。</li><li>AOV网$($Activity On Vertex Network$)$：用顶点表示活动，用弧表示活动之间的优先关系的有向无环图称为顶点表示活动的网。例如游戏中做某个任务，但是这个任务有多个前置任务，需要先做了前置任务才能进行该任务。</li><li>拓扑排序：将AOV网中所有顶点排成一个线性序列，该序列满足：若AOV网中由顶点$V_i$到顶点$V_j$有一条路径，则在该线性序列中的顶点$V_i$必定在顶点$V_j$之前。排序方法为：删除图中一个无前驱的顶点$($包括和该顶点有关的边$)$并输出顶点，重复直至图中无顶点为止。</li></ul></li><li><p>关键路径：</p><ul><li>AOE网$($Activity On Edge Network$)$：用顶点表示事件，用弧表示活动，权表示活动持续的事件的带权有向无环图称为以边表示活动的网。</li><li>源点和汇点：网中有一个入度为零的点称为源点，也仅有一个出度为零的点称为汇点。</li><li>带权路径长度：一条路径各弧上的权值之和。</li><li>关键路径$($Critical Path$)$：从源点到汇点的带权路径长度最长的路径。</li><li>关键活动：在关键路径上的活动都称为关键活动。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之树</title>
      <link href="/posts/6c17d6bd/"/>
      <url>/posts/6c17d6bd/</url>
      
        <content type="html"><![CDATA[<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><p>树是n个结点的有限集，它可以是空树或非空树。对于非空树T：</p><ul><li>最多一个根结点。</li><li>根结点的每一个孩子都是一颗子树。</li></ul><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><table><thead><tr><th>结点的度</th><th>结点拥有的子树个数。</th></tr></thead><tbody><tr><td>树的度</td><td>树中各结点度的最大值。</td></tr><tr><td>祖先</td><td>从根到该结点所经分支上的所有结点。</td></tr><tr><td>子孙</td><td>以某节点为根的子树中的任一结点都是该结点的子孙。</td></tr><tr><td>层次</td><td>结点的高度（从一开始）。</td></tr><tr><td>堂兄弟</td><td>双亲在同一层的结点互为堂兄弟。</td></tr><tr><td>树的深度</td><td>树的高度（从一开始）。</td></tr><tr><td>有序树和无序树</td><td>无序树即忽略节点的信息，只考虑其拓扑结构的树，也就是说兄弟之间没有顺序关系，而有序树与之相法。</td></tr><tr><td>森林</td><td>树的集合（树的个数可为零）。</td></tr></tbody></table><h3 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h3><ul><li>双亲表示法：用一组连续的存储单元存储树的结点，每个结点都拥有数据域和双亲域（指向该结点的双亲）。很容易求得树的根和结点的双亲，但是求结点的孩子时需要遍历整个结构。</li><li>孩子表示法：<ul><li>第一种方法：每个结点由数据域和多个指针域构成，每个指针域指向一颗子树的根结点，指针域的个数就是该树的度，但是树中不是每个结点的度都等于树的度，因此会造成很多指针域的浪费。一颗n个结点度为k的树必有$n(k-1)+1$个空链域。</li><li>第二种方法：每个结点由数据域、degree域（存储该结点的度）和多个指针域构成，这样不会造成空间的浪费，但是操作起来不是太方便。</li><li>第三种方法：用一组连续的存储单元存储树的结点，每个结点都有数据域和存储该结点孩子的单链表表头，这样很容易获得结点的所有孩子。可以对该结构进行扩展，每个结点都增加一个双亲域，很容易就能获得该结点的孩子和双亲。</li></ul></li><li>孩子兄弟表示法：使用二叉链表做树的存储结构，结点的两个链域分别指向该结点的第一个孩子结点和下一个兄弟结点，也就是说结点由数据域、指向第一个孩子结点的指针域和指向下一个兄弟结点的指针域构成。该结构非常容易寻找孩子结点，如果添加双亲域的话寻找双亲也非常便捷。</li></ul><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><p>二叉树与树类似，区别主要有如下两点：</p><ul><li>二叉树每个结点最多只有两个子树，即结点的度小于等于二。</li><li>二叉树的子树有左右之分，其次序不能颠倒。</li></ul><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ul><li>二叉树第i层上最多有$2^{i-1}$个结点。<blockquote><p>推导：第一层有1个，第二层有2个，第三层有4个，到第n层有$a_n=a_1*q^(n-1)$（等比数列）。</p></blockquote></li><li>深度为k的二叉树最多有$2^k-1$个结点。<blockquote><p>推导：根据等比数列求和公式$S_n=a_1\frac{1-q^n}{1-q}$，其中$q=2, a_1=1$，计算得$S_n=2^n-1$。</p></blockquote></li><li>二叉树叶子结点个数为$n_0$，度为2的结点数为$n_2$，则$n_0=n_2+1$。<blockquote><p>推导：设$n_1$是度为1的结点个数，n为总结点个数，则可得$n=n_0+n_1+n_2$。由于树的总分支条数加一等于树的总结点个数，以及度为1的结点有1条分支，度为2的结点有两条分支，可以得知$n=n_1+2n_2+1$，两式相减可得度1和度2结点个数之间的关系公式。</p></blockquote></li><li>满二叉树即深度为k且含有$2^k-1$个结点的二叉树。</li><li>完全二叉树即深度为k的二叉树，其1至k-1层是满二叉树，而在第k层上，所有叶子结点都连续集中在左侧（也就是说不可以存在只有右结点没有左节点的结点）。</li><li>具有n个结点的完全二叉树的深度为$\lfloor log_2n \rfloor+1$或$\lceil log_2(n+1) \rceil$。<blockquote><p>推导：设深度为k的完全二叉树结点有n个，则n肯定大于等于k行结点的个数以及小于等于满二叉树总结点个数，也就是说$2^{k-1}≤n$和$n≤2^k-1$。对左式的两边加$log_2$计算得$k-1≤log_2n$，由于k是整数，$log_2n$可能是小数，因为是小于等于所以$log_2n$取下限得$\lfloor log_2n \rfloor+1$；对右式进行同样的方法计算得$log_2(n+1)≤k$，k是整数，k大于等于可能是小数的$log_2n$，所以对其取上限得$\lceil log_2(n+1) \rceil$。</p></blockquote></li><li>按层序给一颗有n个结点的完全二叉树的结点编号，则对任一结点i有：</li><li>若$i=1$，则i是二叉树的根节点；若$i&gt;1$，则其双亲结点为$\lfloor \frac{i}{2} \rfloor$。</li><li>若$2i&gt;n$，则i是叶子节点，否则其左孩子结点是$2i$。</li><li>若$2i+1&gt;n$，则i无右孩子，否则右孩子结点是$2i+1$。</li></ul><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><ul><li>顺序存储：对于完全二叉树来说即将所有结点按照层次顺序存储到连续的存储单元中；对于一般二叉树来说需要将其每个结点与完全二叉树上的结点一一对应进行存储，比如根结点有右孩子没有左孩子，则存储时数组下标1需要空出，0存储根节点而2存储右孩子。由此看来，顺序存储仅适合完全二叉树，一般二叉树会造成空间的极大浪费。</li><li>链式存储：二叉树链式存储分为二叉链表和三叉链表。<ul><li>二叉链表：结点包含左孩子和右孩子指针域以及数据域。拥有n个结点的二叉链表中有n+1个空链域。<blockquote><p>推导：二叉链表中每个叶子结点有两个空链域，度为零的结点有一个空链域，则空链域个数为$2n_0+n_1$，通过公式$n=n_0+n_1+n_2$和$n_0=n_2+1$可以得到$2n_0+n_1=n+1$。</p></blockquote></li><li>三叉链表：结点比二叉链表的结点多一个双亲指针域。</li></ul></li></ul><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><p>二叉树的遍历即通过遍历得到二叉树中结点访问的线性序列，实现了非线性结构的线性化。根据访问结点的次序不同可得三种遍历：先序遍历、中序遍历、后序遍历，此外还有层序遍历，时间复杂度均为O(n)。先序遍历和中序遍历或后序遍历和中序遍历可以唯一确定一颗二叉树。</p><ul><li><p>先序遍历：1.访问根节点；2.先序遍历左子树；3.先序遍历右子树。也就是中左右的顺序。</p><ul><li><p>先序遍历递归算法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 先序遍历递归实现 * @param root 根节点 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 访问根节点</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先序遍历左子树</span>        <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先序遍历右子树</span>        <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>先序遍历非递归算法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 先序遍历非递归实现 * @param root 根节点 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrderTraverseStack</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode current <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前结点不为空就处理结点入栈，当前结点为空处理出栈为结点赋值，当前结点和栈都空处理完毕。</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 先序打印根结点并将根结点入栈，当前节点赋值根结点的左结点。</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 左结点处理完毕，弹栈出来的是根节点，因为根节点处理过了此时将根节点的右结点压栈处理。</span>            TreeNode temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            current <span class="token operator">=</span> temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>中序遍历：1.中序遍历左子树；2.访问根节点；3.中序遍历右子树。也就是左中右的顺序。</p><ul><li><p>中序遍历递归算法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 中序遍历递归实现 * @param root 根节点 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 中序遍历左子树</span>        <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 访问根节点</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 中序遍历右子树</span>        <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>中序遍历非递归算法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 中序遍历非递归实现 * @param root 根节点 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrderTraverseStack</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode current <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 压入根节点不打印，当前结点赋值左结点。</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 弹栈出来的是根结点，打印并给当前结点赋值该根结点的右结点。</span>            TreeNode temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            current <span class="token operator">=</span> temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>后序遍历：1.后序遍历左子树；2.后序遍历右子树；3.访问根节点。也就是左右中的顺序。</p><ul><li><p>后序遍历递归算法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 后序遍历递归实现 * @param root 根节点 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrderTraverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 后序遍历左子树</span>        <span class="token function">postOrderTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 后序遍历右子树</span>        <span class="token function">postOrderTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 访问根节点</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>后序遍历非递归算法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 后序遍历非递归实现 * @param root 根节点 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrderTraverseStack</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode current<span class="token punctuation">,</span> previous <span class="token operator">=</span> null<span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        current <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 判断两种情况：         * 1.当前节点的左右结点是否为空，空就打印该结点并弹栈。         * 2.当前结点的左右结点有一个不为空时，判断上一个结点是否为空并且是不是该结点的孩子，如果是打印并弹栈。         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>previous <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>previous <span class="token operator">==</span> current<span class="token punctuation">.</span>left <span class="token operator">||</span> previous <span class="token operator">==</span> current<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            previous <span class="token operator">=</span> current<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果当前结点有孩子结点，先处理左结点再处理右结点。因为栈后入先出，所以先压栈右再压栈左。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>层序遍历：从上往下，从左往右进行遍历。</p><ul><li><p>层序遍历实现：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 层序遍历 * @param root 根节点 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">levelOrderTraverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 排除根节点为空的情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 先进的结点先出，使用队列实现</span>    Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><ul><li><p>n个结点的二叉链表就会有n+1个指针域被浪费，线索二叉树为了将浪费的指针域利用起来，将空指针域用来存储其该结点的直接前驱和直接后继（就是遍历的上一个结点和下一个结点），其中指向结点前驱和后继的指针称为线索。</p></li><li><p>线索二叉树的结点由左孩子（left）、右孩子（right）、数据域、左标记（leftIsThread）和右标记（rightIsThread）组成。以左标记为例，$leftIsThread=\begin{cases}false&amp;left指向结点的左孩子\\true&amp;left指向结点的前驱 \end{cases}$</p></li><li><p>按照不同的遍历顺序进行线索化（即遍历二叉树将其变成线索二叉树的过程）可分为先序线索二叉树、中序线索二叉树和后序线索二叉树。中序线索二叉树具体代码如下：</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/21 16:19   * @Description 线索二叉树   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTree</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/**          * 左孩子          */</span>          <span class="token keyword">private</span> Node left<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**          * 左结点是否线索化，默认不是          */</span>          <span class="token keyword">private</span> <span class="token keyword">boolean</span> leftIsThread<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**          * 数据          */</span>          <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**          * 右结点是否线索化，默认不是          */</span>          <span class="token keyword">private</span> <span class="token keyword">boolean</span> rightIsThread<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**          * 右孩子          */</span>          <span class="token keyword">private</span> Node right<span class="token punctuation">;</span>          <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>              left <span class="token operator">=</span> null<span class="token punctuation">;</span>              leftIsThread <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>              rightIsThread <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              right <span class="token operator">=</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 根节点      */</span>      <span class="token keyword">private</span> Node root<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 上一个遍历到的结点      */</span>      <span class="token keyword">private</span> Node pre<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 总结点数      */</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> length<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">ThreadTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          root <span class="token operator">=</span> null<span class="token punctuation">;</span>          pre <span class="token operator">=</span> null<span class="token punctuation">;</span>          length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 初始化线索二叉树      * @param data 需要存储的数据      */</span>      <span class="token keyword">public</span> <span class="token function">ThreadTree</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 此处传入下标1是为了方便二叉树创建时使用递归</span>          root <span class="token operator">=</span> <span class="token function">createTree</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 中序线索化</span>          <span class="token function">inOrderThread</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>          pre <span class="token operator">=</span> null<span class="token punctuation">;</span>          length <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 创建二叉树      * @param data  数据      * @param index 数组开始下标加一      * @return 根结点      */</span>      <span class="token keyword">private</span> Node <span class="token function">createTree</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// index 默认多了1，所以此处可以等于数组长度</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Node left <span class="token operator">=</span> <span class="token function">createTree</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>          Node right <span class="token operator">=</span> <span class="token function">createTree</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          node<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>          node<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>          <span class="token keyword">return</span> node<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 中序线索二叉树（最左结点前驱是线索，最右结点后继不是线索）      * @param root 需要线索化的二叉树根节点      */</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inOrderThread</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 中序遍历线索化左子树</span>              <span class="token function">inOrderThread</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 左孩子为空设置其前驱。</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  root<span class="token punctuation">.</span>leftIsThread <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  root<span class="token punctuation">.</span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">// 若上一个结点不为空（特殊处理根结点的上一个结点）并且上一个结点的右孩子为空，设置上一个结点的后继为当前结点。</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> pre<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  pre<span class="token punctuation">.</span>rightIsThread <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  pre<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              pre <span class="token operator">=</span> root<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 中序遍历线索化右子树</span>              <span class="token function">inOrderThread</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 中序遍历线索二叉树，按照后继方式遍历。（找最左子结点开始）      * @param root 需要遍历的二叉树根节点      */</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inOrderTraversePost</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 查找最左子结点，最左结点前驱是线索</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token punctuation">.</span>leftIsThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>              root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightIsThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 如果是线索直接找后继</span>                  root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 如果右指针不是线索，找从右子树开始的最左结点</span>                  root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                  <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token punctuation">.</span>leftIsThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 中序后继方式遍历线索化二叉树      */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrderTraversePost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">inOrderTraversePost</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 中序遍历线索二叉树，按照前驱方式遍历。（找到最右结点开始倒序遍历）      * @param root 需要遍历的二叉树根节点      */</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inOrderTraversePre</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 查找最右结点，最右结点后继不是线索</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token punctuation">.</span>rightIsThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>              root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftIsThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 如果是线索直接找前驱</span>                  root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 如果左指针不是线索，找从左子树开始的最右结点</span>                  root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                  <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token punctuation">.</span>rightIsThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 中序前驱方式遍历线索化二叉树      */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrderTraversePre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">inOrderTraversePre</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="森林"><a href="#森林" class="headerlink" title="森林"></a>森林</h2><h3 id="森林与二叉树的转换"><a href="#森林与二叉树的转换" class="headerlink" title="森林与二叉树的转换"></a>森林与二叉树的转换</h3><p>森林是树的集合，通过左结点取第一个孩子结点，右结点取第一个兄弟结点可以将森林转化成二叉树。反过来也可以将二叉树转化成森林。</p><h3 id="树和森林的遍历"><a href="#树和森林的遍历" class="headerlink" title="树和森林的遍历"></a>树和森林的遍历</h3><ul><li>树的遍历：先根遍历树即先访问树的根结点再依次先根遍历根的每颗子树；后根遍历即先依次后跟遍历每颗子树再访问根结点。将树转化成二叉树（和森林转化二叉树方法一样），则对树的先根和后根遍历等同于二叉树的先序和中序遍历。</li><li>森林的遍历：先序遍历即从第一颗树开始依次先序遍历所有树；中序遍历即从第一棵树开始依次后跟遍历所有树。森林的先序和中序遍历等同于将该森林转化成的二叉树的先序和中序遍历。</li></ul><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>哈夫曼（Huffman）树又称为最优二叉树，是一类带权路径长度最短的树。其基本术语如下：</p><ul><li>路径：一个结点到另一个结点之间的分支构成这两个结点之间的路径。</li><li>路径长度：一个结点到另一个结点之间经过的线（边或分支）的条数就是路径长度。</li><li>树的路径长度：从树根到每一个结点的路径长度之和。</li><li>权：赋予某个实体一个量，是对实体的某个或某些属性的数值化描述，分为结点权和边权。</li><li>结点的带权路径长度：从该结点到树根之间的路径长度与结点上权的乘积。</li><li>树的带权路径长度：树中所有叶子结点的带权路径长度。</li><li>哈夫曼树：由带权叶子节点构造的带权路径长度WPL最小的二叉树。</li></ul><h3 id="构造算法"><a href="#构造算法" class="headerlink" title="构造算法"></a>构造算法</h3><ul><li><p>构造过程：用所有带权根节点构成一个森林，从森林中挑选两个权最小的作为新构造的二叉树的两个孩子结点，两个孩子结点的双亲结点为这两个孩子结点权的和。此时从森林中删除这两个孩子结点，并将新构造的二叉树放入森林，重复之前的操作知道森林构成一颗二叉树为止。</p></li><li><p>算法实现：哈夫曼树中只有度为2和0的结点，因此n个叶子结点的哈夫曼树共有2n-1个结点，可以将其存储在大小为2n-1的一维数组中。数组中每个单元存储一个树结点，树结点由weight（权重）、left（左孩子）和right（右孩子）构成。且为了实现方便，下标零一般不存储数据，并将叶子节点集中存储在下标1至n上。哈夫曼树构造具体代码如下：</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/21 22:21   * @Description 哈夫曼树   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuffmanTree</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Node<span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/**          * 权重          */</span>          <span class="token keyword">private</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**          * 左孩子、右孩子          */</span>          <span class="token keyword">private</span> Node left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>          <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Node o<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">&lt;</span> o<span class="token punctuation">.</span>weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">></span> o<span class="token punctuation">.</span>weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token string">"weight:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">+</span> <span class="token string">";   "</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 哈夫曼树根节点       */</span>      <span class="token keyword">private</span> Node root<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">HuffmanTree</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Node<span class="token operator">></span> nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>          root <span class="token operator">=</span> <span class="token function">createTree</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 构造哈夫曼树       * @param nodes 带权结点集合       * @return 哈夫曼树根结点       */</span>      <span class="token keyword">private</span> Node <span class="token function">createTree</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Node<span class="token operator">></span> nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 最后留下构成的二叉树根节点</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>              Node left <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              Node right <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              Node parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>weight <span class="token operator">+</span> right<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>              parent<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>              parent<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>              nodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>              nodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>              nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><p>哈夫曼编码是一种可变长编码方式，常用于数据压缩。将字符出现频率作为该字符的权并构造其哈夫曼树，因此出现频率最高的结点离根结点最近，也就是说其编码位数越短，以此达到压缩数据的目的。哈夫曼编码具体代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/22 0:55 * @Description 哈夫曼编码 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Huffman</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Node<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 数据（字符）         */</span>        <span class="token keyword">private</span> <span class="token keyword">char</span> ch<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 出现频率         */</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> freq<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 左右孩子         */</span>        <span class="token keyword">private</span> Node left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> freq<span class="token punctuation">,</span> Node left<span class="token punctuation">,</span> Node right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ch <span class="token operator">=</span> ch<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>freq <span class="token operator">=</span> freq<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 判断该结点是否是叶子结点         * @return true or false         */</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Node o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>freq <span class="token operator">></span> o<span class="token punctuation">.</span>freq<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>freq <span class="token operator">&lt;</span> o<span class="token punctuation">.</span>freq<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 哈夫曼树根结点     */</span>    <span class="token keyword">private</span> Node root<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 编码表     */</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> String<span class="token operator">></span> encodeTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Huffman</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">createHuffmanTree</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">encodeTable</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> encodeTable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过给定的字符串构建哈夫曼树     * @param s 给定字符串     * @return 哈夫曼树根结点     */</span>    <span class="token keyword">private</span> Node <span class="token function">createHuffmanTree</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 字符串为空直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 统计单词出现频率</span>        HashMap<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> maps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> letter <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>letter<span class="token punctuation">,</span> maps<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>letter<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 单词和其出现频率封装在Node中，并用list储存node</span>        List<span class="token operator">&lt;</span>Node<span class="token operator">></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">:</span> maps<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 构造哈夫曼树</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>            Node left <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node right <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">'\0'</span><span class="token punctuation">,</span> left<span class="token punctuation">.</span>freq <span class="token operator">+</span> right<span class="token punctuation">.</span>freq<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 哈夫曼解码     * @param encodeString 需要解码的字符串     * @return 解码后的字符串     */</span>    <span class="token keyword">public</span> String <span class="token function">decode</span><span class="token punctuation">(</span>String encodeString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder decodeString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历字符串</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> start <span class="token operator">=</span> i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> encodeString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String nowString <span class="token operator">=</span> encodeString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 在编码表中查找子串是否存在</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>encodeTable<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span>nowString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> String<span class="token operator">></span> decode <span class="token operator">:</span> encodeTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>decode<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>nowString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        decodeString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>decode<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> decodeString<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 哈夫曼编码     * @param s 需要编码的字符串     * @return 编码后的字符串     */</span>    <span class="token keyword">public</span> String <span class="token function">encode</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder encodedString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获得编码表</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> letter <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            encodedString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>encodeTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> encodedString<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将字符编码存入编码表     * @param root     哈夫曼树根节点     * @param encoding 字符编码     * @param map      编码表     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">encodeTable</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> String encoding<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 是叶子结点就存储</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">isLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>ch<span class="token punctuation">,</span> encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 递归左右结点</span>        <span class="token function">encodeTable</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> encoding <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">encodeTable</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> encoding <span class="token operator">+</span> <span class="token string">'1'</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之串、数组与广义表</title>
      <link href="/posts/2844cbbf/"/>
      <url>/posts/2844cbbf/</url>
      
        <content type="html"><![CDATA[<h2 id="串"><a href="#串" class="headerlink" title="串"></a>串</h2><ul><li>串（string或字符串）是内容受限的线性表，限定了表中的元素为字符。</li><li>串的两种基本存储结构为顺序存储和链式存储。通常采用顺序存储结构。</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>数组是由类型相同的数据元素构成的有序集合，数组中存储的数据可以是带有结构的同一数据类型的数据。数组一般采用顺序存储结构，其存储方式也可分为按行存储和按列存储。</li><li>多维数组实质上是 n 个线性表的组合，其每一维都是一个线性表，因此多维数组可以看成是线性表的推广。</li><li>特殊矩阵压缩存储，可以将多个值相同的元只分配一个存储空间，对零元不分配空间。常见的有对称矩阵，三角矩阵和对角矩阵：<ul><li>对称矩阵：一维数组array[k]与矩阵$a_{ij}$之间的对应关系：$$k=\begin{cases}\frac{i(i-1)}{2}+j-1&amp;当i≥j，\\ \frac{j(j-1)}{2}+i-1&amp;当i\lt j。 \end{cases}$$对称矩阵只需要存储包含对角线及以上或者以下元素，因此存储空间可以从$n^2$减小到$\frac{n(n+1)}{2}$。假设当作下三角来看，第一行1个元素，第二行2个元素，直到第n行n个元素。可以知道$a_{ij}$就是第1行到第i-1行的元素个数加上第i行的元素个数再减去一（一维数组下标从0开始），即$\frac{i(i-1)}{2}+j-1$。由于对称矩阵是对称的，将刚得出的公式中的i和j互换即可获得一样的下标。</li><li>三角矩阵：<ul><li>下三角矩阵：矩阵下三角(不含对角线)的元素均为某一常数或零。一维数组array[k]与矩阵$a_{ij}$之间的对应关系：$$k=\begin{cases}\frac{i(i-1)}{2}+j-1&amp;当i≥j，\\ \frac{n(n+1)}{2}&amp;当i\lt j。 \end{cases}$$矩阵下三角第一行1个元素，第二行2个元素，直到n行n个元素。元素总和为$\frac{n(n+1)}{2}$。因此当需要计算$a_{ij}$时，首先需要计算1至i-1行有多少个元素在加上第i行的j个元素，还要减一（一维数组下标从0开始）。均为某一常数或零就存储在最后一个位置上。</li><li>上三角矩阵：与下三角矩阵相反。一维数组array[k]与矩阵$a_{ij}$之间的对应关系：$$k=\begin{cases}\frac{(i-1)(2n-i+2)}{2}+(j-i) &amp;当i≤j，\\ \frac{n(n+1)}{2} &amp;当i\gt j。 \end{cases}$$矩阵上三角第一行n个元素，第二行n-1个元素，直到第n行1个元素。由此可知这是一个等差数列，i行的元素个数为$n-i+1$个，再根据公式$S_n=\frac{n(a_1+a_n)}{2}$可得1至i-1行有$\frac{(i-1)(n+n-(i-1)+1)}{2}=\frac{(i-1)(2n-i+2)}{2}$个元素，加上第i行的(j-i+1)个元素（看$a_{11}，j-i为0，还要加上1才能表示有一个元素$），还要减一（一维数组下标从0开始）。均为某一常数或零就存储在最后一个位置上。</li></ul></li><li>对角矩阵：对角矩阵所有的非零元都集中在以主对角线为中心的带状区域中，即除了对角线上和在对角线上、下方若干条对角线上的数据外，其他数据都为零。可以通过以行或列为主，或以对角线顺序将其压缩到一维数组上。</li></ul></li></ul><h2 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h2><ul><li>广义表是另外一种线性表的推广形式，表中的元素可以是称为原子的单个元素，也可以是一个子表，所以线性表可以看成广义表的特例。</li><li>广义表的常用操作有取表头和取表尾。<ul><li>取表头：取出的表头为非空广义表的第一个元素，可以是单原子也可以是子表。</li><li>取表尾：取出的表尾为去表头之外其余元素所构成的表，尾表一定是一个广义表。</li></ul></li><li>广义表通常采用链式存储结构：头尾链表的存储结构和扩展线性链表的存储结构。<ul><li>头尾链表的存储结构：表结点由标志域(1表子表，0表原子)、指示表头的指针域和指示表尾的指针域构成。原子结点由标志域和值域构成。</li><li>扩展线性链表的存储结构：无论表结点还是原子结点均由三个域组成，即标志域、指示表头的指针域(表结点或原子结点)和指示表尾的指针域。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之栈与队列</title>
      <link href="/posts/2442d660/"/>
      <url>/posts/2442d660/</url>
      
        <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈是限定仅在表尾进行插入或删除操作的线性表(表尾为栈顶，表头为栈底)，简单说就是后存入的元素在取的时候反而会先取出，因此也称为后进先出(LIFO)的线性表。栈可分为顺序栈和链栈。</p><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><p>顺序栈的基本操作实现。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/20 16:29 * @Description 顺序栈 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayStack</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 栈主体     */</span>    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> stack<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 已存储的元素个数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化顺序栈     * @param maxLength 最大长度     */</span>    <span class="token keyword">public</span> <span class="token function">ArrayStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>maxLength<span class="token punctuation">]</span><span class="token punctuation">;</span>        length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 顺序栈是否为空     * @return 为空true，不空false     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 清空顺序栈     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 顺序栈中数据元素个数。     * @return 元素个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 压栈     * @param elem 需要存储的元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>Object elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"栈满了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        stack<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> elem<span class="token punctuation">;</span>        length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 弹栈     * @return 删除的元素     */</span>    <span class="token keyword">public</span> Object <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"栈式空的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Object data <span class="token operator">=</span> stack<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        length<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取栈顶元素     * @return 栈顶元素     */</span>    <span class="token keyword">public</span> Object <span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"栈空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stack<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h3><p>链栈的基本操作实现。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/20 16:29 * @Description 链栈 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedStack</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 栈顶     */</span>    <span class="token keyword">private</span> Node top<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 已存储的元素个数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 数据         */</span>        <span class="token keyword">private</span> T data<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 下一个结点         */</span>        <span class="token keyword">private</span> Node next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>T data<span class="token punctuation">,</span> Node next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化链栈     */</span>    <span class="token keyword">public</span> <span class="token function">LinkedStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 链栈是否为空     * @return 为空true，不空false     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 清空链栈     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        top <span class="token operator">=</span> null<span class="token punctuation">;</span>        length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 链栈中数据元素个数。     * @return 元素个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 压栈     * @param elem 需要存储的元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>T elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        top <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>        length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 弹栈     * @return 删除的元素     */</span>    <span class="token keyword">public</span> T <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"栈空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        T data <span class="token operator">=</span> top<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        top <span class="token operator">=</span> top<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        length<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取栈顶元素     * @return 栈顶元素     */</span>    <span class="token keyword">public</span> T <span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"栈空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> top<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><ul><li>队列是限定在表尾(队尾)进行插入，在表头(队头)进行删除的线性表，换句话说就是先进先出(FIFO)的线性表。队列可分为顺序队列(常用循环队列)和链式队列。</li></ul><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>循环队列的基本操作实现，需要注意的有四点：</p><ol><li>队列入队出队首尾指针：(rear + 1) % maxLength 和 (front + 1) % maxLength。</li><li>队长及队列判空判满条件：<ul><li>方法一：为了区分队满和队空，入队时少用一个队列单元，即当rear的下一个为front时表示队满。<ul><li>队满：(rear + 1) % maxLength == front。</li><li>队空：front == rear。</li><li>队长：(rear - front + maxLength) % maxLength。</li></ul></li><li>方法二：通过变量length记录实际在队列中的元素个数。<ul><li>队满：length == maxLength。</li><li>队空：length == 0。</li><li>队长：length。</li></ul></li></ul></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/20 18:30 * @Description 循环队列(牺牲一个队列单元判空判满) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleQueue</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 循环队列主体     */</span>    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> queue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 队头     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 队尾     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rear<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 队列最大长度     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxLength<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化链式队列     */</span>    <span class="token keyword">public</span> <span class="token function">CircleQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength <span class="token operator">=</span> maxLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>maxLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 链式队列是否为空     * @return 为空true，不空false     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 清空链栈     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 链式队列中数据元素个数。     * @return 元素个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> maxLength <span class="token operator">-</span> front<span class="token punctuation">)</span> <span class="token operator">%</span> maxLength<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 入队     * @param elem 需要存储的元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>Object elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxLength <span class="token operator">==</span> front<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"队列满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        queue<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> elem<span class="token punctuation">;</span>        rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxLength<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 出队     * @return 删除的元素     */</span>    <span class="token keyword">public</span> Object <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"队列空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Object data <span class="token operator">=</span> queue<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxLength<span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 队头元素     * @return 队头元素     */</span>    <span class="token keyword">public</span> Object <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"队列空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> queue<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h3><p>链式队列的基本操作实现。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/20 18:30 * @Description 链式队列 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedQueue</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 队头     */</span>    <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> front<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 队尾     */</span>    <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> rear<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 已存储的元素个数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 数据         */</span>        <span class="token keyword">private</span> T data<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 下一个结点         */</span>        <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>T data<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化链式队列     */</span>    <span class="token keyword">public</span> <span class="token function">LinkedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 链式队列是否为空     * @return 为空true，不空false     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 清空链栈     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        front <span class="token operator">=</span> null<span class="token punctuation">;</span>        rear <span class="token operator">=</span> null<span class="token punctuation">;</span>        length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 链式队列中数据元素个数。     * @return 元素个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 入队     * @param elem 需要存储的元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>T elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>T<span class="token operator">></span> oldRear <span class="token operator">=</span> rear<span class="token punctuation">;</span>        rear <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            front <span class="token operator">=</span> rear<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            oldRear<span class="token punctuation">.</span>next <span class="token operator">=</span> rear<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 出队     * @return 删除的元素     */</span>    <span class="token keyword">public</span> T <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"队列空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        T data <span class="token operator">=</span> front<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        front <span class="token operator">=</span> front<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        length<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rear <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 队头元素     * @return 队头元素     */</span>    <span class="token keyword">public</span> T <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"队列空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> front<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="栈和队列的比较"><a href="#栈和队列的比较" class="headerlink" title="栈和队列的比较"></a>栈和队列的比较</h2><table><thead><tr><th></th><th>栈</th><th>队列</th></tr></thead><tbody><tr><td>逻辑结构</td><td>和线性表相同，元素一一对应。</td><td>和线性表相同，元素一一对应。</td></tr><tr><td>顺序存储(存储结构)</td><td>空间预先分配，容易导致空间溢出或闲置。</td><td>常设计为循环队列。空间预先分配，容易导致空间溢出或闲置。</td></tr><tr><td>链式存储(存储结构)</td><td>动态分配，不会造成空间浪费或溢出。</td><td>动态分配，不会造成空间浪费或溢出。</td></tr><tr><td>运算规则</td><td>后进先出，插入删除在表的一端(栈顶)完成。</td><td>先进先出，插入在队尾进行，删除在队头进行。</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之线性表</title>
      <link href="/posts/91054329/"/>
      <url>/posts/91054329/</url>
      
        <content type="html"><![CDATA[<h2 id="线性表特点"><a href="#线性表特点" class="headerlink" title="线性表特点"></a>线性表特点</h2><ul><li>线性表第一个元素无前驱，最后一个元素无后继，其他每个数据元素都有一个前驱和后继。</li><li>对线性表的数据元素可以进行增删改查等操作。</li></ul><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><ul><li><p>顺序表(ArrayList)即线性表的顺序存储表示，通过使用一组地址连续的存储单元依次存储线性表的数据元素。简单说就是逻辑上相邻的数据元素，在物理地址上也是相邻的。</p></li><li><p>顺序表的基本操作实现(使用数组)：</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/19 21:12   * @Description 顺序表，下标从0开始。   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 顺序表主体       */</span>      <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 已存储的元素个数       */</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> length<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 初始化顺序表       * @param maxLength 最大长度       */</span>      <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>          list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>maxLength<span class="token punctuation">]</span><span class="token punctuation">;</span>          length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 清空顺序表       */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clearList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 顺序表是否为空       * @return 为空true，不空false       */</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">listEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 顺序表中数据元素个数。       * @return 元素个数       */</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">listLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> length<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 获取顺序表指定位置元素       * @param index 下标       * @return 指定元素       */</span>      <span class="token keyword">public</span> Object <span class="token function">getElem</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 下标不合法</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 返回顺序表中第一个值与object相同的元素位置，没找到返回-1       * @param elem 需要查找的元素       * @return 返回查找到的第一个与之相同的元素位置，否则返回-1       */</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">locateElem</span><span class="token punctuation">(</span>Object elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> i<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 在所给index位置之前插入新的元素。index位置之后元素后移       * @param elem  需要插入的元素       * @param index 需要插入的位置       */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listInsert</span><span class="token punctuation">(</span>Object elem<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 下标不合法或数组满了</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> list<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"下标不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> list<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"数组满了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length<span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> elem<span class="token punctuation">;</span>          length<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 删除所给index位置的元素，index位置之后元素前移       * @param index 需要删除的位置       * @return 返回删除的元素       */</span>      <span class="token keyword">public</span> Object <span class="token function">listDelete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 下标不合法或数组为空</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"下标不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          Object removeElem <span class="token operator">=</span> list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          length<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> removeElem<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 遍历顺序表       * @return 返回遍历结果       */</span>      <span class="token keyword">public</span> String <span class="token function">traverseList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token string">"[]"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          stringBuilder<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表(LinkedList)即线性表的链式存储表示，用一组任意的存储单元存储线性表的数据元素，由于物理地址可能非连续，因此需要存储一个指示其直接后继的信息。也就是说逻辑上相邻的数据元素，在物理地址上可能相邻也可能不相邻。(<a href="https://visualgo.net/zh/list" target="_blank" rel="noopener">链表示例动画</a>)</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><ul><li><p>单链表如下图所示只能从头访问至尾。<img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/singlyLinkedList.png"></p></li><li><p>单链表的基本操作实现：</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2020/3/19 21:12   * @Description 单链表。   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SinglyLinkedList</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 头结点       */</span>      <span class="token keyword">private</span> Node head<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 单链表长度       */</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> length<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/**           * 数据           */</span>          <span class="token keyword">private</span> T data<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**           * 下一个结点           */</span>          <span class="token keyword">private</span> Node next<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**           * 初始化一个结点           * @param data 存储的数据           * @param next 下一个结点          */</span>          <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>T data<span class="token punctuation">,</span> Node next<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/**           * 尾结点，未传入下一个结点，则初始化下一个结点为空           * @param data 存储的数据           */</span>          <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 初始化单链表       */</span>      <span class="token keyword">public</span> <span class="token function">SinglyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          head <span class="token operator">=</span> null<span class="token punctuation">;</span>          length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 在表头插入数据元素       * @param elem 数据元素       */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listInsertHead</span><span class="token punctuation">(</span>T elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>          head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>          length<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 在表尾插入数据元素       * @param elem 数据元素       */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listInsertTail</span><span class="token punctuation">(</span>T elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">listInsert</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 在指定位置插入数据元素       * @param elem  数据元素       * @param index 需要插入的位置       */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listInsert</span><span class="token punctuation">(</span>T elem<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 下标不合法</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"下标不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">listInsertHead</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          Node preNode <span class="token operator">=</span> head<span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              preNode <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>          length<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 删除头结点元素       * @return 返回删除的元素       */</span>      <span class="token keyword">public</span> T <span class="token function">listDeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"数组为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          T removeElem <span class="token operator">=</span> head<span class="token punctuation">.</span>data<span class="token punctuation">;</span>          head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>          length<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> removeElem<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 删除尾结点元素       * @return 返回删除的元素       */</span>      <span class="token keyword">public</span> T <span class="token function">listDeleteTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">listDelete</span><span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 删除指定结点元素       * @param index 需要删除的元素位置       * @return 返回删除的元素       */</span>      <span class="token keyword">public</span> T <span class="token function">listDelete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 下标不合法或数组为空</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"下标不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">listDeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          Node preNode <span class="token operator">=</span> head<span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              preNode <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          T removeElem <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>data<span class="token punctuation">;</span>          preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>          <span class="token keyword">return</span> removeElem<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 返回链表中第一个值与elem相同的元素位置，没找到返回-1       * @param elem 需要查找的元素       * @return 返回查找到的第一个与之相同的元素位置，否则返回-1       */</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">locateElem</span><span class="token punctuation">(</span>T elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          Node temp <span class="token operator">=</span> head<span class="token punctuation">;</span>          <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 必须用equals，类型不同</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> index<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>              index<span class="token operator">++</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> index<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 遍历链表       * @return 返回遍历结果       */</span>      <span class="token keyword">public</span> String <span class="token function">traverseList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token string">"[]"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          Node temp <span class="token operator">=</span> head<span class="token punctuation">;</span>          StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>              stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          stringBuilder<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><ul><li><p>循环链表的最后一个结点指向头结点。与单链表基本一致，唯一差别仅在判断当前指针是否指向表尾结点的终止条件不同。循环链表示意图如下。<img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/circularLinkedList.png"></p></li><li><p>循环链表的基本操作实现：直接通过如下方式修改单链表。</p><p>  添加尾结点。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 尾结点   */</span>  <span class="token keyword">private</span> Node tail<span class="token punctuation">;</span></code></pre><p>  为尾结点初始化。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 初始化循环链表   */</span>  <span class="token keyword">public</span> <span class="token function">CircularLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      head <span class="token operator">=</span> null<span class="token punctuation">;</span>      tail <span class="token operator">=</span> null<span class="token punctuation">;</span>      length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>  修改插入删除方法。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 在表头插入数据元素   * @param elem 数据元素   */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listInsertHead</span><span class="token punctuation">(</span>T elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>      head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          tail <span class="token operator">=</span> head<span class="token punctuation">;</span>          tail<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      length<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 在指定位置插入数据元素   * @param elem  数据元素   * @param index 需要插入的位置   */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listInsert</span><span class="token punctuation">(</span>T elem<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 下标不合法</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"下标不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">listInsertHead</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Node preNode <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          preNode <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          tail <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>          tail<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      length<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 删除头结点元素   * @return 返回删除的元素   */</span>  <span class="token keyword">public</span> T <span class="token function">listDeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"数组为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      T removeElem <span class="token operator">=</span> head<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      tail<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>      length<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> removeElem<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 删除指定结点元素   * @param index 需要删除的元素位置   * @return 返回删除的元素   */</span>  <span class="token keyword">public</span> T <span class="token function">listDelete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 下标不合法或数组为空</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"下标不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">listDeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Node preNode <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          preNode <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      T removeElem <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          tail <span class="token operator">=</span> preNode<span class="token punctuation">;</span>          tail<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> removeElem<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>  修改locateElem和traverseList方法的判断是否到链尾的方法为如下。</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">!=</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 方法</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><ul><li><p>双向链表的结点比单链表和循环链表的结点多一个指向其直接前驱的信息，双向链表也可以有双向循环链表的实现方式，其示意图如下。<img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/doublyLinkedList.png"></p></li><li><p>双向循环链表的基本操作实现：直接通过如下方式修改双链表(可以去掉尾结点，留着没有意义)。</p><p>  删除尾结点并修改class Node增加前驱信息保存。</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 数据       */</span>      <span class="token keyword">private</span> T data<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 下一个结点       */</span>      <span class="token keyword">private</span> Node next<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 上一个结点       */</span>      <span class="token keyword">private</span> Node pre<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 初始化一个结点       * @param data 存储的数据       * @param next 下一个结点       */</span>      <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>T data<span class="token punctuation">,</span> Node pre<span class="token punctuation">,</span> Node next<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>pre <span class="token operator">=</span> pre<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>  修改插入删除方法。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 在表头插入数据元素   * @param elem 数据元素   */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listInsertHead</span><span class="token punctuation">(</span>T elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> head<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>          head<span class="token punctuation">.</span>pre <span class="token operator">=</span> head<span class="token punctuation">;</span>          head<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> head<span class="token punctuation">.</span>pre<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>          head<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>          head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      length<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 在指定位置插入数据元素   * @param elem  数据元素   * @param index 需要插入的位置   */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listInsert</span><span class="token punctuation">(</span>T elem<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 下标不合法</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"下标不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">listInsertHead</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Node preNode <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          preNode <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> preNode<span class="token punctuation">,</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>      preNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          preNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      length<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 删除头结点元素   * @return 返回删除的元素   */</span>  <span class="token keyword">public</span> T <span class="token function">listDeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"数组为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      T removeElem <span class="token operator">=</span> head<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      head<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> head<span class="token punctuation">.</span>pre<span class="token punctuation">;</span>      head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      length<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> removeElem<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 删除指定结点元素   * @param index 需要删除的元素位置   * @return 返回删除的元素   */</span>  <span class="token keyword">public</span> T <span class="token function">listDelete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 下标不合法或数组为空</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"下标不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">listDeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Node preNode <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          preNode <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      T removeElem <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      preNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> preNode<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>          head<span class="token punctuation">.</span>pre <span class="token operator">=</span> preNode<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> removeElem<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="顺序表与链表的比较"><a href="#顺序表与链表的比较" class="headerlink" title="顺序表与链表的比较"></a>顺序表与链表的比较</h2><p>存储密度：指的是数据元素本身所占用的存储量和整个结点结构所占用的存储量之比。存储密度越大，存储空间的利用率越高。</p><table><thead><tr><th></th><th>顺序表</th><th>链表</th></tr></thead><tbody><tr><td>存储空间(空间)</td><td>预先分配，容易导致空间溢出或闲置。</td><td>动态分配，不会造成空间浪费或溢出。</td></tr><tr><td>存储密度(空间)</td><td>不用存储结点间的逻辑关系，存储密度等于1。</td><td>需要存储结点间逻辑关系，存储密度小于1。</td></tr><tr><td>存取元素(时间)</td><td>随机存取，复杂度O(1)。</td><td>顺序存取，复杂度O(n)。</td></tr><tr><td>插入删除(时间)</td><td>平均需移动一半元素，复杂度O(n)。</td><td>不需要移动元素，复杂度O(1)。</td></tr><tr><td>使用情况</td><td>1.表长变化不大，事先能知道大概大小。<br>2.多查少增删。</td><td>1.表长变化大。<br>2.多增删少查。</td></tr></tbody></table><h2 id="各链表的时间复杂度比较"><a href="#各链表的时间复杂度比较" class="headerlink" title="各链表的时间复杂度比较"></a>各链表的时间复杂度比较</h2><table><thead><tr><th></th><th>查找头结点</th><th>查找尾结点</th><th>查找结点p的前驱</th></tr></thead><tbody><tr><td>带头结点的单链表</td><td>直接获取，复杂度O(1)。</td><td>需要遍历表，复杂度为O(n)。</td><td>无法获得前驱。</td></tr><tr><td>带头结点的循环单链表(无尾指针)</td><td>O(1)</td><td>O(n)</td><td>需要遍历表，复杂度为O(n)。</td></tr><tr><td>带头结点的循环单链表(无头指针)</td><td>O(1)</td><td>通过尾指针直接获取，复杂度为O(1)。</td><td>O(n)</td></tr><tr><td>带头结点的双向循环链表</td><td>O(1)</td><td>直接获取头结点的前驱就是尾结点，复杂度为O(1)。</td><td>直接通过p结点的前驱获取，复杂度为O(1)。</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构简介</title>
      <link href="/posts/b8928e0e/"/>
      <url>/posts/b8928e0e/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念及术语"><a href="#基本概念及术语" class="headerlink" title="基本概念及术语"></a>基本概念及术语</h2><ul><li>数据：能输入到计算机中并能被计算机处理的符号。例如文本字符串、数学实数、图形图像和声音等通过特殊编码后获得的数据。</li><li>数据元素：是数据的基本单位，通常作为整体考虑。例如学生记录$($包含姓名、年龄、学号等$)$。</li><li>数据项：是组成数据元素的最小单位。例如姓名、年龄、学号等，也就是说数据元素是由数据项构成的。</li><li>数据对象：可以看作是一个包含了相同性质的数据元素的集合。例如学生表，包含了相同性质的数据元素学生记录。</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>数据结构就是数据元素之间存在关系的集合，数据结构包含逻辑结构和存储结构。</p><ul><li>逻辑结构：逻辑上存在关系，与数据存储无关的结构。如果数据元素之间存在一对一关系称为线性结构，否则称为非线性结构$($集合结构、树形结构和图状结构$)$。几种常用的逻辑结构层次图如下：<img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/logicalStructure.png"></li><li>存储结构：数据在计算机中存储表示的方式，又称为物理结构。顺序存储结构和链式存储结构是两种常用的基本存储结构。<ul><li>顺序存储结构：所有元素依次存放在一片连续的存储空间中。</li><li>链式存储结构：无需占用一整块存储空间，但是作为代价为了表示结点之间的关系，需要让每个结点都拥有指向其他结点的指针字段。也就是说链式存储结构中结点拥有数据和其他结点的存储地址。</li></ul></li></ul><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><ul><li>内循环：执行最频繁的指令决定了程序执行的总时间，把这些指令称为程序的内循环。</li><li>成本模型：使用成本模型来评估算法，例如数组的访问次数就是一种成本模型。</li><li>常见的增长数量级函数：<table><thead><tr><th>描述</th><th>函数</th></tr></thead><tbody><tr><td>常数级别</td><td>1</td></tr><tr><td>对数级别</td><td>logN</td></tr><tr><td>线性级别</td><td>N</td></tr><tr><td>线性对数级别</td><td>NlogN</td></tr><tr><td>平方级别</td><td>$N^2$</td></tr><tr><td>立方级别</td><td>$N^3$</td></tr><tr><td>指数级别</td><td>$2^N$</td></tr></tbody></table></li><li>倍率定理：若$T(N)\sim aN^blgN$，那么$\frac{T(2N)}{N}\sim 2^b$。</li><li>大常数：在求近似时，如果低级项的常数系数很大，那么近似的结果是错误的。</li><li>均摊分析：通过记录所有操作的总成本除以操作总数来将成本均摊。例如由数组实现的栈，当进行压栈操作时操作所访问数组的次数为常数次，但是如果栈满还要压栈时需要对数组扩容，为了将数据后移此时需要访问次数为数组大小次，均摊后访问数组的平均次数为常数$($也就是将写入数组时访问的次数与扩容时访问数组的次数平摊$)$。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之复合模式</title>
      <link href="/posts/198c6c0a/"/>
      <url>/posts/198c6c0a/</url>
      
        <content type="html"><![CDATA[<h2 id="复合模式"><a href="#复合模式" class="headerlink" title="复合模式"></a>复合模式</h2><p>复合模式在一个解决方案中结合两个或多个模式，以解决一般或重复发生的问题。</p><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/mutiplePatterUML.png"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>设计一个鸭子模拟器，具体鸭子实现各自的叫声接口。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 叫声接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Quackable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 橡皮鸭</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RubberDuck</span> <span class="token keyword">implements</span> <span class="token class-name">Quackable</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 红头鸭</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedheadDuck</span> <span class="token keyword">implements</span> <span class="token class-name">Quackable</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>现在需要添加一个鹅类，鹅会咯咯叫，将鹅包装成鸭子类使用同一个接口进行叫声调用。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 鹅</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goose</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 鹅叫声适配器，适配器模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GooseAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Quackable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>现在需要一个叫声计数器，在不改变鸭子的代码的情况下统计鸭子叫声的次数。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 叫声计数器，装饰器模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuackCounter</span> <span class="token keyword">implements</span> <span class="token class-name">Quackable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Quackable duck<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 叫声次数，要记录所有传入对象的叫声次数，使用静态     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> numberOfQuacks<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">QuackCounter</span><span class="token punctuation">(</span>Quackable duck<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>duck <span class="token operator">=</span> duck<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        duck<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numberOfQuacks<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得叫声次数     * @return 叫声次数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getQuacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberOfQuacks<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>因为所有鸭子的叫声都需要统计，为了防止拥有叫声的鸭子对象创建时没有进行装饰，因此将鸭子对象的创建以及叫声的统计包装起来。通过一个工厂生产装饰过的鸭子，该工厂还要能够生产不同类型的鸭子(不包括鹅，此处相当于是鸭子产品家族，当然也可以创建鹅抽象工厂接口并建立鹅家族)。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/18 11:42 * @Description 鸭子抽象工厂接口 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseDuckFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建红头鸭     * @return 红头鸭对象     */</span>    <span class="token keyword">abstract</span> Quackable <span class="token function">createRedheadDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建橡皮鸭     * @return 橡皮鸭对象     */</span>    <span class="token keyword">abstract</span> Quackable <span class="token function">createRubberDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 未装饰的鸭子抽象工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DuckFactory</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDuckFactory</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 装饰叫声统计功能的鸭子抽象工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountingDuckFactory</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDuckFactory</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="组合模式和迭代器模式"><a href="#组合模式和迭代器模式" class="headerlink" title="组合模式和迭代器模式"></a>组合模式和迭代器模式</h3><p>分别管理不同的鸭子非常的繁琐，因此需要将所有鸭子视为一个集合，通过少数命令让整个集合的鸭子听令行动。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/18 12:11 * @Description 所有拥有叫声的对象群(对象集合) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flock</span> <span class="token keyword">implements</span> <span class="token class-name">Quackable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 会叫对象集合     */</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>Quackable<span class="token operator">></span> quackers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 向集合中添加会叫的对象     * @param quacker 会叫的对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Quackable quacker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        quackers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>quacker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 此处使用了内置的迭代器。超级循环封装使用了集合和数组的迭代器。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Quackable quacker <span class="token operator">:</span> quackers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            quacker<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 模拟鸭子 * @param duckFactory 鸭子工厂 */</span><span class="token keyword">void</span> <span class="token function">simulate</span><span class="token punctuation">(</span>BaseDuckFactory duckFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Quackable redheadDuck <span class="token operator">=</span> duckFactory<span class="token punctuation">.</span><span class="token function">createRedheadDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Quackable rubberDuck <span class="token operator">=</span> duckFactory<span class="token punctuation">.</span><span class="token function">createRubberDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Quackable gooseDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuackCounter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GooseAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Goose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Flock flockOfDucks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    flockOfDucks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>redheadDuck<span class="token punctuation">)</span><span class="token punctuation">;</span>    flockOfDucks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rubberDuck<span class="token punctuation">)</span><span class="token punctuation">;</span>    flockOfDucks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gooseDuck<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">simulate</span><span class="token punctuation">(</span>flockOfDucks<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"叫声次数: "</span> <span class="token operator">+</span> QuackCounter<span class="token punctuation">.</span><span class="token function">getQuacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>现在需要追踪个别的鸭子实时的观察其呱呱叫的行为。订阅需要观察的鸭子，当鸭子调用了叫声功能就通知订阅者。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/18 12:27 * @Description 叫声观察主题 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QuackObservable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 注册为观察者     * @param observer 需要注册的对象     */</span>    <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通知所有观察者方法     */</span>    <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/18 13:28 * @Description 观察者接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 更新     * @param duck 需要更新的对象     */</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>QuackObservable duck<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 叫声接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Quackable</span> <span class="token keyword">extends</span> <span class="token class-name">QuackObservable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/18 13:38 * @Description QuackObservable 的一个具体实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Observable</span> <span class="token keyword">implements</span> <span class="token class-name">QuackObservable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>Observer<span class="token operator">></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> QuackObservable duck<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Observable</span><span class="token punctuation">(</span>QuackObservable duck<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>duck <span class="token operator">=</span> duck<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Observer observer <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>duck<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 鹅被观察</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GooseAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Quackable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Observable observable<span class="token punctuation">;</span>    <span class="token keyword">private</span> Goose goose<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GooseAdapter</span><span class="token punctuation">(</span>Goose goose<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>goose <span class="token operator">=</span> goose<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        goose<span class="token punctuation">.</span><span class="token function">honk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observable<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        observable<span class="token punctuation">.</span><span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"伪装成鸭的鹅"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 红头鸭被观察</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedheadDuck</span> <span class="token keyword">implements</span> <span class="token class-name">Quackable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 橡皮鸭被观察</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RubberDuck</span> <span class="token keyword">implements</span> <span class="token class-name">Quackable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/18 11:17 * @Description 叫声计数器，装饰器模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuackCounter</span> <span class="token keyword">implements</span> <span class="token class-name">Quackable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Quackable duck<span class="token punctuation">;</span>    <span class="token keyword">private</span> Observable observable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 叫声次数，要记录所有传入对象的叫声次数，使用静态     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> numberOfQuacks<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">QuackCounter</span><span class="token punctuation">(</span>Quackable duck<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>duck <span class="token operator">=</span> duck<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        duck<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numberOfQuacks<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得叫声次数     * @return 叫声次数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getQuacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberOfQuacks<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observable<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        observable<span class="token punctuation">.</span><span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> duck<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/18 12:11 * @Description 所有拥有叫声的对象群(对象集合) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flock</span> <span class="token keyword">implements</span> <span class="token class-name">Quackable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 会叫对象集合     */</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>Quackable<span class="token operator">></span> quackers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 向集合中添加会叫的对象     * @param quacker 会叫的对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Quackable quacker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        quackers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>quacker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 此处使用了内置的迭代器。超级循环封装使用了集合和数组的迭代器。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Quackable quacker <span class="token operator">:</span> quackers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            quacker<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>QuackObservable quacker <span class="token operator">:</span> quackers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            quacker<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>QuackObservable quacker <span class="token operator">:</span> quackers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            quacker<span class="token punctuation">.</span><span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/18 13:48 * @Description 观察者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Quackologist</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>QuackObservable duck<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在呱呱叫的对象: "</span> <span class="token operator">+</span> duck<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">simulate</span><span class="token punctuation">(</span>BaseDuckFactory duckFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Quackable redheadDuck <span class="token operator">=</span> duckFactory<span class="token punctuation">.</span><span class="token function">createRedheadDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Quackable rubberDuck <span class="token operator">=</span> duckFactory<span class="token punctuation">.</span><span class="token function">createRubberDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Quackable gooseDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuackCounter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GooseAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Goose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Flock flockOfDucks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    flockOfDucks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>redheadDuck<span class="token punctuation">)</span><span class="token punctuation">;</span>    flockOfDucks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rubberDuck<span class="token punctuation">)</span><span class="token punctuation">;</span>    flockOfDucks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gooseDuck<span class="token punctuation">)</span><span class="token punctuation">;</span>    Quackologist quackologist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Quackologist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    flockOfDucks<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>quackologist<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">simulate</span><span class="token punctuation">(</span>flockOfDucks<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"叫声次数: "</span> <span class="token operator">+</span> QuackCounter<span class="token punctuation">.</span><span class="token function">getQuacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="MVC-模式"><a href="#MVC-模式" class="headerlink" title="MVC 模式"></a>MVC 模式</h2><p>MVC即“模型-视图-控制器”(Model-View-Controller)是由数个模式结合起来而形成的新模式，三者关系如下:</p><ol><li>视图: 用来呈现模型。视图通常直接从模型中取得它需要显示的状态与数据。</li><li>控制器: 取得用户的输入并解读其对模型的意思。</li><li>模型: 模型持有所有的数据、状态和程序逻辑。模型没有注意到视图和控制器，虽然它提供了操纵和检索状态的接口，并发送状态改变通知给观察者。</li></ol><p>应用到的设计模式: 策略模式、观察者模式和组合模式。(此处将视图想象为 GUI 组件比较容易理解)</p><ol><li>策略模式: 视图可以视为一个显示信息的窗口，上面有很多模块，每个模块可能对应一个控制器。当按下某一个模块上的某个按钮时，便请求该模块对应的控制器调用相应的方法或模型处理。视图可以组合各种控制器。</li><li>观察者模式: 模型实现了观察者模式，当模型状态改变时，相关对象将持续更新。也就是说当模型数据更新时，一个模型所使用到的多个视图(或是控制器)都会自动更新。</li><li>组合模式: 显示包括了窗口、按钮、文本标签等。每个显示组件不是组合节点(窗口)，就是叶节点(按钮)。当控制器返回用户请求结果信息时，只需通知最顶层窗口即可。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之代理模式</title>
      <link href="/posts/907a70d0/"/>
      <url>/posts/907a70d0/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>代理模式为另一个对象提供一个替身或占位符以控制对这个对象的访问。</p><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/proxyGeneralUML.png"></p><blockquote><p>Proxy 持有 RealSubject 的引用。客户和 RealSubject 的交互都必须通过 Proxy。因为 Proxy 和 RealSubject 实现相同的接口，所以任何用到 RealSubject 的地方都可以用 Proxy 取代。Proxy 也控制了对 RealSubject 的访问。</p></blockquote><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="远程代理"><a href="#远程代理" class="headerlink" title="远程代理"></a>远程代理</h3><p>远程代理控制访问远程对象。远程代理可以作为另一个 JVM 上对象的本地代表。调用代理的方法，会被代理利用网络转发到远程执行，并且结果会通过网络返回给代理，再由代理将结果转给客户。Java 中常用 RMI 进行远程方法调用。RMI 生成 stub 充当代理，其运行流程为<code>客户对象 → stub → skeleton → 服务对象</code>，然后从服务对象依次返回到客户对象。</p><blockquote><p>远程方法调用(Remote Method Invocation，RMI)是 RPC 的一种实现。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/17 15:49 * @Description 商店接口，相当于 Subject */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Store</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 列出商店书籍     * @return 书籍     * @throws RemoteException rmi异常     */</span>    String <span class="token function">bookList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/17 15:50 * @Description 商店实现类(实际工作的类)，相当于 RealSubject */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StoreImpl</span> <span class="token keyword">extends</span> <span class="token class-name">UnicastRemoteObject</span> <span class="token keyword">implements</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StoreImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// UnicastRemoteObject 提供了一些远程功能</span>        <span class="token comment" spellcheck="true">// 超类 UnicastRemoteObject 调用I/O，网络可能产生 RemoteException 异常，子类需要将其抛出</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">bookList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"《西游记》、《三国演义》"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/17 15:55 * @Description 将 StoreImpl 服务注册入 rmi 的 registry */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceTestDrive</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Store store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StoreImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过 Naming 的 rebind方 法将对象注册入 rmi 的 registry 中。</span>            Naming<span class="token punctuation">.</span><span class="token function">rebind</span><span class="token punctuation">(</span><span class="token string">"store"</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/17 15:57 * @Description 客户端测试，相当于客户对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 通过 Naming 的 lookup 方法在 rmi 的 registry 中查找注册在其中的对象并返回。</span>            Store store <span class="token operator">=</span> <span class="token punctuation">(</span>Store<span class="token punctuation">)</span> Naming<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"rmi://127.0.0.1/store"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 调用该对象的方法，rmi会请求真实的StoreImpl并将结果打包返回。</span>            String books <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">bookList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行时，需要命令行进入 java 的 class 文件生成目录下运行 rmiregistry，打开注册服务。否则 rebind 方法会失败，然后将需要调用的对象注册入 registry 中再运行客户端。</p><h3 id="保护代理"><a href="#保护代理" class="headerlink" title="保护代理"></a>保护代理</h3><p>保护代理基于权限控制对资源的访问。利用 Java 动态代理创建保护代理。设计一个 person，拥有姓名、性别和评分。创建两代理：</p><ol><li>类拥有者能设置自己的姓名、性别等，但不能给自己打分。</li><li>非类拥有者能进行打分，但是不能设置别人的其他属性。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/17 17:05 * @Description person 接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonBean</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获得姓名     * @return 姓名     */</span>    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获得性别     * @return 性别     */</span>    String <span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获得评分     * @return 评分     */</span>    <span class="token keyword">int</span> <span class="token function">getHotOrNotRating</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置姓名     * @param name 姓名     */</span>    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置性别     * @param gender 性别     */</span>    <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span>String gender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置评分     * @param rating 评分     */</span>    <span class="token keyword">void</span> <span class="token function">setHotOrNotRating</span><span class="token punctuation">(</span><span class="token keyword">int</span> rating<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/17 17:09 * @Description person 接口实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonBeanImpl</span> <span class="token keyword">implements</span> <span class="token class-name">PersonBean</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 姓名     */</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 性别     */</span>    <span class="token keyword">private</span> String gender<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 评分     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rating<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 评价人数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ratingCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHotOrNotRating</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ratingCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> rating <span class="token operator">/</span> ratingCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span>String gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHotOrNotRating</span><span class="token punctuation">(</span><span class="token keyword">int</span> rating<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rating <span class="token operator">+=</span> rating<span class="token punctuation">;</span>        ratingCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/17 17:20 * @Description 拥有者代理，自己不能设置自己的评分 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OwnerInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> PersonBean personBean<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String SET_RATING <span class="token operator">=</span> <span class="token string">"setHotOrNotRating"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OwnerInvocationHandler</span><span class="token punctuation">(</span>PersonBean personBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>personBean <span class="token operator">=</span> personBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SET_RATING<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是自己评价自己不允许</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 否则都允许</span>            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>personBean<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/17 17:20 * @Description 非拥有者代理，只能打分不能修改其他的 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NonOwnerInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> PersonBean personBean<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String SET <span class="token operator">=</span> <span class="token string">"set"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String SET_RATING <span class="token operator">=</span> <span class="token string">"setHotOrNotRating"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NonOwnerInvocationHandler</span><span class="token punctuation">(</span>PersonBean personBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>personBean <span class="token operator">=</span> personBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>SET<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>SET_RATING<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果是打分允许</span>                <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>personBean<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 其他修改不允许</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>personBean<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/17 17:04 * @Description 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PersonBean personBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonBeanImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PersonBean owner <span class="token operator">=</span> <span class="token function">getOwnerProxy</span><span class="token punctuation">(</span>personBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        PersonBean nonOwner <span class="token operator">=</span> <span class="token function">getNonOwnerProxy</span><span class="token punctuation">(</span>personBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        owner<span class="token punctuation">.</span><span class="token function">setHotOrNotRating</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nonOwner<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取拥有者代理     * @param personBean 代理对象     * @return 拥有者代理     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PersonBean <span class="token function">getOwnerProxy</span><span class="token punctuation">(</span>PersonBean personBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>PersonBean<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>            personBean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            personBean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">OwnerInvocationHandler</span><span class="token punctuation">(</span>personBean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取非拥有者代理     * @param personBean 代理对象     * @return 非拥有者代理     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PersonBean <span class="token function">getNonOwnerProxy</span><span class="token punctuation">(</span>PersonBean personBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>PersonBean<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>            personBean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            personBean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">NonOwnerInvocationHandler</span><span class="token punctuation">(</span>personBean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="虚拟代理"><a href="#虚拟代理" class="headerlink" title="虚拟代理"></a>虚拟代理</h3><ol><li>虚拟代理控制访问创建开销大的资源。</li><li>虚拟代理作为创建开销大的对象的代表。虚拟代理经常直到我们真正需要一个对象的时候才创建它。当对象在创建前和创建中时，由虚拟代理来边沿对象的替身。对象创建后，代理就会将请求直接委托给对象。</li><li>使用场景：需求 GUI 加载图片，图片未被加载时候显示文字图片加载中，图片加载完成时替换文字图片加载中为实际的图片。此时可以设计一个代理类，传入图片加载类，首先为程序显示文字图片加载中，然后创建线程调用图片加载方法(防止程序等待图片加载返回被挂起)，等图片加载方法返回了图片时，将显示的文字图片加载中替换成真正的图片即可。</li></ol><h3 id="其他变种代理"><a href="#其他变种代理" class="headerlink" title="其他变种代理"></a>其他变种代理</h3><ol><li>防火墙代理(Firewall Proxy)：控制网络资源的访问，保护主题免于“坏客户”的侵害。常用于公司的防火墙系统。</li><li>智能引用代理(Smart Reference Proxy)：当主题被引用时，进行额外的动作，例如计算一个对象被引用的次数。</li><li>缓存代理(Caching Proxy)：为开销大的运算结果提供暂时存储，它也允许多个客户共享结果，以减少计算或网络延迟。常用于 Web 服务器代理，以及内容管理与出版系统。</li><li>同步代理(Synchronization Proxy)：在多线程的情况下为主题提供安全的访问。常用于为分散式环境内的潜在对象集合提供同步访问控制，例如 JavaSpaces。</li><li>复杂隐藏代理(Complexity Hiding Proxy)：用来隐藏一个类的复杂集合的复杂度，并进行访问控制。也被称为外观代理。</li><li>写入时复制代理(Copy-On-Write Proxy)：用来控制对象的复制，方法是延迟对象的复制，直到客户真的需要为止。这是虚拟代理的变体。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之状态模式</title>
      <link href="/posts/61e067b6/"/>
      <url>/posts/61e067b6/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>状态模式允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/stateGeneralUML.png"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>设计一个状态机具有如下功能。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/statePattern_stateMachine.png"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/16 10:24 * @Description 糖果机(状态机) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GumballMachine</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 售空状态     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> SOLD_OUT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 未投入钱状态，有库存     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> NO_QUARTER <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 已投入钱状态     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> HAS_QUARTER <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 出售状态     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> SOLD <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前状态，默认售空     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> state <span class="token operator">=</span> SOLD_OUT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 糖果库存     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GumballMachine</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 糖果库存大于0，设置为未投入钱状态</span>            state <span class="token operator">=</span> NO_QUARTER<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 投钱。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> HAS_QUARTER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投钱失败，已存在投入的钱。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> NO_QUARTER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            state <span class="token operator">=</span> HAS_QUARTER<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投钱成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> SOLD_OUT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投钱失败，没有库存了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> SOLD<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投钱失败，正在出售请稍等。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 退钱。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> HAS_QUARTER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            state <span class="token operator">=</span> NO_QUARTER<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退钱成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> NO_QUARTER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退钱失败，未投入钱。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> SOLD_OUT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退钱失败，未投入钱。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> SOLD<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退钱失败，正在出售请稍等。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 转动曲柄购买糖果。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> HAS_QUARTER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            state <span class="token operator">=</span> SOLD<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转动曲柄成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> NO_QUARTER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转动曲柄失败，未投入钱。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> SOLD_OUT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转动曲柄失败，没有库存了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> SOLD<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转动曲柄失败，正在出售请稍等。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 发放糖果。     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> SOLD<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发放糖果成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                state <span class="token operator">=</span> SOLD_OUT<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"糖果售空了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                state <span class="token operator">=</span> NO_QUARTER<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> NO_QUARTER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发放糖果失败，请先投钱。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> SOLD_OUT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发放糖果失败。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> HAS_QUARTER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发放糖果失败。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"目前糖果库存"</span> <span class="token operator">+</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/16 10:55 * @Description 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GumballMachine gumballMachine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GumballMachine</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>当需要增加新状态时，上面的程序需要修改所有包含状态的方法并且新增状态，极难维护。所以对变化的状态进行封装，使一个状态对应一个类，再使用组合的方法再当前状态中组合所需状态即可。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/stateUML.png"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/16 11:24 * @Description 状态接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 投钱。     */</span>    <span class="token keyword">void</span> <span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 退钱。     */</span>    <span class="token keyword">void</span> <span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 转动曲柄购买糖果。     */</span>    <span class="token keyword">void</span> <span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发放糖果。     */</span>    <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/16 11:27 * @Description 已投入钱状态 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HasQuarterState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> GumballMachine gumballMachine<span class="token punctuation">;</span>    <span class="token keyword">private</span> Random randomWinner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HasQuarterState</span><span class="token punctuation">(</span>GumballMachine gumballMachine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gumballMachine <span class="token operator">=</span> gumballMachine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投钱失败，已存在投入的钱。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getNoQuarterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退钱成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> winner <span class="token operator">=</span> randomWinner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>winner <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            gumballMachine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getWinnerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            gumballMachine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getSoldState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转动曲柄成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发放糖果失败。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/16 11:27 * @Description 未投入钱状态 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoQuarterState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> GumballMachine gumballMachine<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NoQuarterState</span><span class="token punctuation">(</span>GumballMachine gumballMachine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gumballMachine <span class="token operator">=</span> gumballMachine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getHasQuarterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投钱成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退钱失败，未投入钱。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转动曲柄失败，未投入钱。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发放糖果失败，请先投钱。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/16 11:27 * @Description 售空状态 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoldOutState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> GumballMachine gumballMachine<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SoldOutState</span><span class="token punctuation">(</span>GumballMachine gumballMachine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gumballMachine <span class="token operator">=</span> gumballMachine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投钱失败，没有库存了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退钱失败，未投入钱。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转动曲柄失败，没有库存了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发放糖果失败。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/16 11:27 * @Description 出售状态 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoldState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> GumballMachine gumballMachine<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SoldState</span><span class="token punctuation">(</span>GumballMachine gumballMachine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gumballMachine <span class="token operator">=</span> gumballMachine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投钱失败，正在出售请稍等。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退钱失败，正在出售请稍等。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转动曲柄失败，正在出售请稍等。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">releaseBall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            gumballMachine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getNoQuarterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            gumballMachine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getSoldOutState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"糖果售空了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/16 13:25 * @Description 中奖状态 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WinnerState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> GumballMachine gumballMachine<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WinnerState</span><span class="token punctuation">(</span>GumballMachine gumballMachine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gumballMachine <span class="token operator">=</span> gumballMachine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投钱失败，正在出售请稍等。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退钱失败，正在出售请稍等。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转动曲柄失败，正在出售请稍等。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜中奖，你将多获得一颗糖。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">releaseBall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            gumballMachine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getSoldOutState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            gumballMachine<span class="token punctuation">.</span><span class="token function">releaseBall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                gumballMachine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getNoQuarterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                gumballMachine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getSoldOutState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"糖果售空了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/16 11:48 * @Description 糖果机(状态机) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GumballMachine</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 售空状态     */</span>    <span class="token keyword">private</span> State soldOutState<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 出售状态     */</span>    <span class="token keyword">private</span> State soldState<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 未投入钱状态     */</span>    <span class="token keyword">private</span> State noQuarterState<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 已投入钱状态     */</span>    <span class="token keyword">private</span> State hasQuarterState<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 中奖状态     */</span>    <span class="token keyword">private</span> State winnerState<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前状态，默认售空     */</span>    <span class="token keyword">private</span> State state<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 糖果库存     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GumballMachine</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        soldOutState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoldOutState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soldState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoldState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        noQuarterState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoQuarterState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hasQuarterState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HasQuarterState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        winnerState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WinnerState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        state <span class="token operator">=</span> soldOutState<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            state <span class="token operator">=</span> noQuarterState<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 投钱。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 退钱。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 转动曲柄购买糖果。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        state<span class="token punctuation">.</span><span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 发放糖果。     */</span>    <span class="token keyword">void</span> <span class="token function">releaseBall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发放糖果成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 填充糖果库存。     */</span>    <span class="token keyword">void</span> <span class="token function">refill</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>        state <span class="token operator">=</span> noQuarterState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> State <span class="token function">getSoldOutState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> soldOutState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> State <span class="token function">getSoldState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> soldState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> State <span class="token function">getNoQuarterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> noQuarterState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> State <span class="token function">getHasQuarterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hasQuarterState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> State <span class="token function">getWinnerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> winnerState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>State state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> State <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"目前糖果库存"</span> <span class="token operator">+</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/16 10:55 * @Description 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GumballMachine gumballMachine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GumballMachine</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之迭代器模式与组合模式</title>
      <link href="/posts/f8e48b7d/"/>
      <url>/posts/f8e48b7d/</url>
      
        <content type="html"><![CDATA[<h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><h3 id="迭代器定义"><a href="#迭代器定义" class="headerlink" title="迭代器定义"></a>迭代器定义</h3><p>迭代器模式提供一种方法顺序访问一个聚合(集合)对象中的各个元素，而又不暴露其内部的表示。</p><p>当不同类型的集合在遍历时需要使用不同的循环进行遍历，迭代器模式便是抽取遍历的部分进行封装，因此只需一个循环即可多态的处理任何集合项。</p><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/iteratorGeneralUML.png"></p><h3 id="迭代器设计原则"><a href="#迭代器设计原则" class="headerlink" title="迭代器设计原则"></a>迭代器设计原则</h3><p>一个类应该只有一个引起变化的原因，即单一责任。</p><h3 id="迭代器案例"><a href="#迭代器案例" class="headerlink" title="迭代器案例"></a>迭代器案例</h3><p>设计两个菜单项，一个返回数组一个返回 ArrayList，此时需要两个循环进行遍历，通过 iterator 进行封装使用一个循环遍历两个不同集合。</p><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/iteratorUML.png"></p><blockquote><p>此处使用 Java 自带的 iterator(也可以自己设计一个 iterator 接口包含 hasNext() 和 next() 方法即可)。<br>ArrayList 实现过 iterator，而数组需要手动实现。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/15 14:45 * @Description 菜单项 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MenuItem</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 菜名     */</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 是否是素菜     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> vegetarian<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 菜价     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MenuItem</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> vegetarian<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vegetarian <span class="token operator">=</span> vegetarian<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isVegetarian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> vegetarian<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/15 15:20 * @Description 创建菜单迭代器接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Menu</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建菜单迭代器     * @return 菜单迭代器     */</span>    Iterator<span class="token operator">&lt;</span>MenuItem<span class="token operator">></span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/15 14:48 * @Description 早餐菜单，ArrayList方式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BreakfastMenu</span> <span class="token keyword">implements</span> <span class="token class-name">Menu</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>MenuItem<span class="token operator">></span> menuItems<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BreakfastMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        menuItems <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"鸡蛋"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"牛奶"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"皮蛋瘦肉粥"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 增加菜单项     * @param name       菜名     * @param vegetarian 是否素菜     * @param price      价格     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItem</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> vegetarian<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MenuItem menuItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> vegetarian<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>        menuItems<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>menuItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>MenuItem<span class="token operator">></span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> menuItems<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/15 14:49 * @Description 晚餐菜单，数组方式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DinnerMenu</span> <span class="token keyword">implements</span> <span class="token class-name">Menu</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 菜单最大存储菜单项     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ITEMS <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 已存储菜单项     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numberOfItems <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> MenuItem<span class="token punctuation">[</span><span class="token punctuation">]</span> menuItems<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DinnerMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        menuItems <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">[</span>MAX_ITEMS<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"小炒肉"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"大鸡腿"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"青菜"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 增加菜单项     * @param name       菜名     * @param vegetarian 是否素菜     * @param price      价格     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItem</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> vegetarian<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numberOfItems <span class="token operator">>=</span> MAX_ITEMS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"菜单满了，不能再添加菜单项了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            MenuItem menuItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> vegetarian<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>            menuItems<span class="token punctuation">[</span>numberOfItems<span class="token punctuation">]</span> <span class="token operator">=</span> menuItem<span class="token punctuation">;</span>            numberOfItems<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>MenuItem<span class="token operator">></span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DinnerMenuIterator</span><span class="token punctuation">(</span>menuItems<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/15 15:29 * @Description 晚餐菜单迭代器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DinnerMenuIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>MenuItem<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> MenuItem<span class="token punctuation">[</span><span class="token punctuation">]</span> menuItems<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DinnerMenuIterator</span><span class="token punctuation">(</span>MenuItem<span class="token punctuation">[</span><span class="token punctuation">]</span> menuItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>menuItems <span class="token operator">=</span> menuItems<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> position <span class="token operator">&lt;</span> menuItems<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> menuItems<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> MenuItem <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> menuItems<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"不支持删除操作。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/15 15:14 * @Description 女招待，用于打印菜单 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Waitress</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>Iterator<span class="token operator">&lt;</span>MenuItem<span class="token operator">>></span> menus<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Waitress</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Iterator<span class="token operator">&lt;</span>MenuItem<span class="token operator">>></span> menus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>menus <span class="token operator">=</span> menus<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 打印菜单     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Iterator<span class="token operator">&lt;</span>Iterator<span class="token operator">&lt;</span>MenuItem<span class="token operator">>></span> menuIterator <span class="token operator">=</span> menus<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>menuIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Iterator<span class="token operator">&lt;</span>MenuItem<span class="token operator">></span> menu <span class="token operator">=</span> menuIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printMenu</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据传入的iterator打印菜单     * @param menuIterator 菜单iterator     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printMenu</span><span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>MenuItem<span class="token operator">></span> menuIterator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>menuIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            MenuItem menuItem <span class="token operator">=</span> menuIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>menuItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> menuItem<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/15 15:07 * @Description 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BreakfastMenu breakfastMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BreakfastMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DinnerMenu dinnerMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DinnerMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Iterator<span class="token operator">&lt;</span>MenuItem<span class="token operator">>></span> menus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        menus<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>breakfastMenu<span class="token punctuation">.</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        menus<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dinnerMenu<span class="token punctuation">.</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Waitress waitress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Waitress</span><span class="token punctuation">(</span>menus<span class="token punctuation">)</span><span class="token punctuation">;</span>        waitress<span class="token punctuation">.</span><span class="token function">printMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><h3 id="组合模式定义"><a href="#组合模式定义" class="headerlink" title="组合模式定义"></a>组合模式定义</h3><p>组合模式允许你将对象组合成树形结构来表现“整体/部分”层次结构。组合能让客户以一致的方式处理个别对象以及对象组合。说白了组合模式就是对树形结构的一种遍历。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/compositeGeneralUML.png"></p><h3 id="组合模式案例"><a href="#组合模式案例" class="headerlink" title="组合模式案例"></a>组合模式案例</h3><p>此时需要为晚餐菜单增加子菜单甜点，也就是说打印方法还需要打印菜单中的菜单。可用通过组合模式的方法，将菜单和菜单项视作同一个整体进行遍历。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/compositeUML.png"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/15 16:40 * @Description 菜单组件提供了菜单项和菜单所需的操作。 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseMenuComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 新增菜单组件     * @param menuComponent 菜单组件     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>BaseMenuComponent menuComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除菜单组件     * @param menuComponent 菜单组件     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>BaseMenuComponent menuComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取菜单组件     * @param i 下标     * @return 菜单组件     */</span>    <span class="token keyword">public</span> BaseMenuComponent <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取菜单或菜名字     * @return 菜名或菜单名     */</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取菜单或菜介绍     * @return 菜介绍或者菜单介绍     */</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取菜价     * @return 菜价     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 菜是否是素菜     * @return true or false     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isVegetarian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 打印菜单或者菜     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建迭代器     * @return 迭代器     */</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>BaseMenuComponent<span class="token operator">></span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回list     * @return list     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>BaseMenuComponent<span class="token operator">></span> <span class="token function">getMenuComponentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/15 17:23 * @Description 菜单迭代器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompositeIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>BaseMenuComponent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Stack<span class="token operator">&lt;</span>Iterator<span class="token operator">&lt;</span>BaseMenuComponent<span class="token operator">>></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CompositeIterator</span><span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>BaseMenuComponent<span class="token operator">></span> iterator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Iterator<span class="token operator">&lt;</span>BaseMenuComponent<span class="token operator">></span> iterator <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> BaseMenuComponent <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Iterator<span class="token operator">&lt;</span>BaseMenuComponent<span class="token operator">></span> iterator <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BaseMenuComponent component <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token keyword">instanceof</span> <span class="token class-name">Menu</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span><span class="token function">getMenuComponentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> component<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/15 16:56 * @Description 菜单(组合) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Menu</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMenuComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>BaseMenuComponent<span class="token operator">></span> menuComponents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String description<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Menu</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String description<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>BaseMenuComponent menuComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        menuComponents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>menuComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>BaseMenuComponent menuComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        menuComponents<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>menuComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> BaseMenuComponent <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> menuComponents<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------\n"</span> <span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 还需要打印该子菜单中的菜或者是子子菜单。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BaseMenuComponent menuComponent <span class="token operator">:</span> menuComponents<span class="token punctuation">)</span> <span class="token punctuation">{</span>            menuComponent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>BaseMenuComponent<span class="token operator">></span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompositeIterator</span><span class="token punctuation">(</span>menuComponents<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>BaseMenuComponent<span class="token operator">></span> <span class="token function">getMenuComponentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> menuComponents<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/15 14:45 * @Description 菜单项(叶子) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MenuItem</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMenuComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 菜名     */</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 是否是素菜     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> vegetarian<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 菜价     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 菜介绍     */</span>    <span class="token keyword">private</span> String description<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MenuItem</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> vegetarian<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">,</span> String description<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vegetarian <span class="token operator">=</span> vegetarian<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isVegetarian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> vegetarian<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 是素菜吗？"</span> <span class="token operator">+</span> <span class="token function">isVegetarian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>BaseMenuComponent<span class="token operator">></span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 菜单项是叶子不需要再遍历了</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NullIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/15 15:54 * @Description 空迭代器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>BaseMenuComponent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"不支持删除操作。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/15 15:14 * @Description 女招待，用于打印菜单 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Waitress</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> BaseMenuComponent allMenus<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Waitress</span><span class="token punctuation">(</span>BaseMenuComponent allMenus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>allMenus <span class="token operator">=</span> allMenus<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 打印所有菜单项     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        allMenus<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 输出所有素菜菜单项     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printVegetarianMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Iterator<span class="token operator">&lt;</span>BaseMenuComponent<span class="token operator">></span> iterator <span class="token operator">=</span> allMenus<span class="token punctuation">.</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            BaseMenuComponent menuComponent <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>menuComponent<span class="token punctuation">.</span><span class="token function">isVegetarian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    menuComponent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedOperationException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 异常处理</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/15 15:07 * @Description 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BaseMenuComponent allMenus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">"总菜单"</span><span class="token punctuation">,</span> <span class="token string">"总菜单介绍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BaseMenuComponent breakfastMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">"早餐"</span><span class="token punctuation">,</span> <span class="token string">"早餐介绍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BaseMenuComponent dinnerMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">"晚餐"</span><span class="token punctuation">,</span> <span class="token string">"晚餐介绍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BaseMenuComponent dessertMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">"晚餐后甜点"</span><span class="token punctuation">,</span> <span class="token string">"晚餐后甜点介绍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        breakfastMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">"鸡蛋"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"鸡蛋早餐"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        breakfastMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">"牛奶"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"牛奶早餐"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dinnerMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">"小炒肉"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"小炒肉晚餐"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dinnerMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">"大鸡腿"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"大鸡腿晚餐"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dessertMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">"大西瓜"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"西瓜甜点"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dinnerMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dessertMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>        allMenus<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>breakfastMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>        allMenus<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dinnerMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>        Waitress waitress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Waitress</span><span class="token punctuation">(</span>allMenus<span class="token punctuation">)</span><span class="token punctuation">;</span>        waitress<span class="token punctuation">.</span><span class="token function">printMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        waitress<span class="token punctuation">.</span><span class="token function">printVegetarianMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之模板方法模式</title>
      <link href="/posts/6948162f/"/>
      <url>/posts/6948162f/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>模板方法模式在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/templateMethodGeneralUML.png"></p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>别调用我们，我们会调用你，即好莱坞原则。也就是说高层组件控制何时以及如何使用底层组件，底层组件可以参与计算但不能直接调用高层组件(不绝对)，防止低层组件依赖高层组件，高层组件又依赖底层组件的情况发生。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><ol><li>设计一个咖啡类，其中有一个方法可以进行咖啡的冲泡(1.煮沸水；2.冲泡咖啡；3.倒入杯子；4.加糖和牛奶)；</li><li>设计一个茶类，其中有一个方法可以进行茶的冲泡(1.煮沸水；2.浸泡茶叶；3.倒入杯子；4.加柠檬)。</li><li>这两个类都有相同的步骤1和3，对步骤2和4进行更高层抽象可以笼统为步骤2冲泡和步骤4加调料，再在抽象类中增加对饮料制作步骤的控制方法就是模板方法的原形了。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/14 14:11 * @Description 咖啡因饮料 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseCaffeineBeverage</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 进行饮料冲泡，固定步骤防止被子类覆盖     */</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">prepareRecipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 煮沸水，固定方法防止被子类覆盖     */</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"煮沸水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 冲泡     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 倒入杯子，固定方法防止被子类覆盖     */</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"倒入杯子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 增加佐料     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/14 14:16 * @Description 咖啡类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token keyword">extends</span> <span class="token class-name">BaseCaffeineBeverage</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"冲泡咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加糖和牛奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/14 14:16 * @Description 茶叶类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tea</span> <span class="token keyword">extends</span> <span class="token class-name">BaseCaffeineBeverage</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"浸泡茶叶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加柠檬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/14 14:16 * @Description 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Coffee coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coffee<span class="token punctuation">.</span><span class="token function">prepareRecipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Tea tea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tea<span class="token punctuation">.</span><span class="token function">prepareRecipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h3><p>饮料中的调料需要根据客户的需求选择添加或不添加，此时可以使用<strong>钩子</strong>，钩子是一种被声明在抽象类中的方法，但只有空的或者默认的实现。钩子的存在可以让子类有能力对算法的不同点进行挂钩，是否需要挂钩则由子类自行决定。</p><ol><li><p>修改 BaseCaffeineBeverage 类，因为添加调料方法是可选的，将其更改为钩子。  </p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2020/3/14 14:11  * @Description 咖啡因饮料  */</span> <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseCaffeineBeverage</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 进行饮料冲泡，固定步骤防止被子类覆盖      */</span>     <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">prepareRecipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">customerWantsCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 煮沸水，固定方法防止被子类覆盖      */</span>     <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"煮沸水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 冲泡      */</span>     <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * 倒入杯子，固定方法防止被子类覆盖      */</span>     <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"倒入杯子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 增加佐料      */</span>     <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * 客户是否需要添加调料，默认添加      * @return true      */</span>     <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">customerWantsCondiments</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> answer<span class="token punctuation">)</span> <span class="token punctuation">{</span>         answer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> answer<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>以咖啡类为例，修改方法。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2020/3/14 14:16  * @Description 咖啡类  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token keyword">extends</span> <span class="token class-name">BaseCaffeineBeverage</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"冲泡咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加糖和牛奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 根据客户对调料的需求覆写该方法，则可以不覆盖默认客户需要调料。      * @return true or false      */</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">customerWantsCondiments</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> answer<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> answer<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之适配器模式与外观模式</title>
      <link href="/posts/aa979c82/"/>
      <url>/posts/aa979c82/</url>
      
        <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="适配器模式定义"><a href="#适配器模式定义" class="headerlink" title="适配器模式定义"></a>适配器模式定义</h3><p>适配器模式将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。</p><p>当需要使用一个现有的类而其接口并不符合你的需求时，就使用适配器。</p><h3 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h3><p>对象适配器模式通过组合的方式实现适配器模式，比类适配器模式更灵活。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/objectAdapterGeneralUML.png"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/13 14:55 * @Description 鸭子接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 鸭子呱呱叫     */</span>    <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/13 14:57 * @Description 绿头鸭 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MallardDuck</span> <span class="token keyword">implements</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"呱呱叫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/13 14:55 * @Description 火鸡接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Turkey</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 火鸡咯咯叫     */</span>    <span class="token keyword">void</span> <span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/13 14:58 * @Description 野生火鸡 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WildTurkey</span> <span class="token keyword">implements</span> <span class="token class-name">Turkey</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"咯咯叫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/13 15:00 * @Description 火鸡适配器，火鸡→鸭子 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TurkeyAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Turkey turkey<span class="token punctuation">;</span>    <span class="token function">TurkeyAdapter</span><span class="token punctuation">(</span>Turkey turkey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>turkey <span class="token operator">=</span> turkey<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        turkey<span class="token punctuation">.</span><span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/13 14:59 * @Description 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 鸭子</span>        Duck duck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MallardDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        duck<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 火鸡</span>        Turkey turkey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WildTurkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        turkey<span class="token punctuation">.</span><span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将需要转换的火鸡变成鸭子</span>        Duck turkeyAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurkeyAdapter</span><span class="token punctuation">(</span>turkey<span class="token punctuation">)</span><span class="token punctuation">;</span>        turkeyAdapter<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h3><p>类适配器模式通过继承的方式实现适配器模式。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/classAdapterGeneralUML.png"></p><blockquote><p>由于 Java 不支持多继承此处使用 Python。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Duck</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"呱呱叫"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Turkey</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"咯咯叫"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TurkeyAdapter</span><span class="token punctuation">(</span>Duck<span class="token punctuation">,</span> Turkey<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">quack</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>gobble<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    duck <span class="token operator">=</span> Duck<span class="token punctuation">(</span><span class="token punctuation">)</span>    duck<span class="token punctuation">.</span>quack<span class="token punctuation">(</span><span class="token punctuation">)</span>    turkey <span class="token operator">=</span> Turkey<span class="token punctuation">(</span><span class="token punctuation">)</span>    turkey<span class="token punctuation">.</span>gobble<span class="token punctuation">(</span><span class="token punctuation">)</span>    turkeyAdapter <span class="token operator">=</span> TurkeyAdapter<span class="token punctuation">(</span><span class="token punctuation">)</span>    turkeyAdapter<span class="token punctuation">.</span>quack<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h3 id="外观模式定义"><a href="#外观模式定义" class="headerlink" title="外观模式定义"></a>外观模式定义</h3><p>外观模式提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。</p><p>当需要简化并统一一个很大的接口或者一群复杂的接口时，就使用外观模式。</p><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/facadeGeneralUML.png"></p><h3 id="外观模式设计原则"><a href="#外观模式设计原则" class="headerlink" title="外观模式设计原则"></a>外观模式设计原则</h3><p>只和你的密友谈话，即最少知识原则。也就是说在对象的方法内调用属于以下范围的方法:</p><ol><li>该对象本身。</li><li>被当作方法的参数而传递进来的对象。</li><li>此方法所创建或实例化的任何对象。</li><li>对象的任何组件，也就是构造方法传入的参数或对象。</li><li>最好不要使用对象的方法的方法所返回的值。当然不需要完全遵守，因为实现最少知识原则虽然减少了对象之间的依赖方便维护，但是导致系统复杂度和开发时间的增加并降低了运行时的性能。</li></ol><h3 id="外观模式案例"><a href="#外观模式案例" class="headerlink" title="外观模式案例"></a>外观模式案例</h3><p>当有一批操作经常需要一起进行时，也就是说我想完成一个操作，而这个操作需要调用类 A 的 a 方法，类 B 的 b 和 c 方法等等。这时候可以创建一个外观(类)，在构造参数中传入每一个使用到的组件并把它们赋值给相应的实例变量，然后创建方法，在方法中执行之前所需执行的一系列操作。这样就使用上了外观模式，外观模式将客户从复杂的子系统中解耦。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之命令模式</title>
      <link href="/posts/933830c7/"/>
      <url>/posts/933830c7/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>命令模式将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。常用于队列请求(命令对象排队进行处理)和日志请求(所有操作记录于日志中，系统死机时可以按照日志恢复)。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/commandGeneralUML.png"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>设计一个遥控器，当按下遥控器上的按钮时，就会执行一个命令，例如打开风扇或关闭电灯，遥控器无需知道如何执行命令，只需要知道按下按钮即可完成命令。其实说白了就是将原来控制器直接调用具体方法变成了控制器调用命令对象，命令对象调用具体方法，</p><p>有一个特别大的好处，就是控制器调用命令对象可以对一系列的方法进行操控，而不是像原来一个一个去 new 调用。而且还可以批量执行命令和撤销命令。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/12 17:13 * @Description 命令接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 命令执行     */</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 撤销上一条执行的命令     */</span>    <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/12 18:52 * @Description 灯光命令 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Light light<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 此处为记录当前灯光亮度，灯光转换时候，这个值就是上次的亮度     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> luminance<span class="token punctuation">;</span>    <span class="token function">LightCommand</span><span class="token punctuation">(</span>Light light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>luminance <span class="token operator">==</span> Light<span class="token punctuation">.</span>OFF<span class="token punctuation">)</span> <span class="token punctuation">{</span>            light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>luminance <span class="token operator">==</span> Light<span class="token punctuation">.</span>WEEK<span class="token punctuation">)</span> <span class="token punctuation">{</span>            light<span class="token punctuation">.</span><span class="token function">week</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>luminance <span class="token operator">==</span> Light<span class="token punctuation">.</span>STRONG<span class="token punctuation">)</span> <span class="token punctuation">{</span>            light<span class="token punctuation">.</span><span class="token function">strong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Light <span class="token function">getLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLuminance</span><span class="token punctuation">(</span><span class="token keyword">int</span> luminance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>luminance <span class="token operator">=</span> luminance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/12 17:16 * @Description 灯实体 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 强光     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STRONG <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 弱光     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WEEK <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 关闭     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> OFF <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 灯光亮度     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> luminance<span class="token punctuation">;</span>    <span class="token function">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        luminance <span class="token operator">=</span> OFF<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">strong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        luminance <span class="token operator">=</span> STRONG<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开启了强光灯"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">week</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        luminance <span class="token operator">=</span> WEEK<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开启了弱光灯"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        luminance <span class="token operator">=</span> OFF<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"灯关了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getLuminance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> luminance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/12 17:31 * @Description 开启弱光灯命令 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOnWeekCommand</span> <span class="token keyword">extends</span> <span class="token class-name">LightCommand</span> <span class="token punctuation">{</span>    <span class="token function">LightOnWeekCommand</span><span class="token punctuation">(</span>Light light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置执行 week 操作前的灯光亮度</span>        <span class="token function">setLuminance</span><span class="token punctuation">(</span><span class="token function">getLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLuminance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">week</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/12 17:31 * @Description 开启强光灯命令 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOnStrongCommand</span> <span class="token keyword">extends</span> <span class="token class-name">LightCommand</span> <span class="token punctuation">{</span>    <span class="token function">LightOnStrongCommand</span><span class="token punctuation">(</span>Light light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setLuminance</span><span class="token punctuation">(</span><span class="token function">getLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLuminance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">strong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/12 17:15 * @Description 关灯命令 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOffCommand</span> <span class="token keyword">extends</span> <span class="token class-name">LightCommand</span> <span class="token punctuation">{</span>    <span class="token function">LightOffCommand</span><span class="token punctuation">(</span>Light light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setLuminance</span><span class="token punctuation">(</span><span class="token function">getLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLuminance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/12 17:32 * @Description 控制器实体，相当于invoker */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteControl</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 控制器按钮多个     */</span>    <span class="token keyword">private</span> Command<span class="token punctuation">[</span><span class="token punctuation">]</span> button<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 记录上一个执行的命令     */</span>    <span class="token keyword">private</span> Command undoCommand<span class="token punctuation">;</span>    <span class="token function">RemoteControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将具体按钮与需要执行的命令绑定     * @param location 按钮位置     * @param command  命令     */</span>    <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token keyword">int</span> location<span class="token punctuation">,</span> Command command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        button<span class="token punctuation">[</span>location<span class="token punctuation">]</span> <span class="token operator">=</span> command<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 按下按钮执行命令     */</span>    <span class="token keyword">void</span> <span class="token function">buttonWasPressed</span><span class="token punctuation">(</span><span class="token keyword">int</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span>        button<span class="token punctuation">[</span>location<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        undoCommand <span class="token operator">=</span> button<span class="token punctuation">[</span>location<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 撤销按钮     */</span>    <span class="token keyword">void</span> <span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>undoCommand <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            undoCommand<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/12 17:13 * @Description 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 控制器</span>        RemoteControl remoteControl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 需要操控的对象</span>        Light light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 命令需要有执行的对象</span>        Command lightOnWeekCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOnWeekCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>        Command lightOnStrongCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOnStrongCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>        Command lightOffCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 控制器按钮绑定需要执行的命令</span>        remoteControl<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lightOnWeekCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> lightOnStrongCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> lightOffCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 操作控制器，开启弱光。</span>        remoteControl<span class="token punctuation">.</span><span class="token function">buttonWasPressed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 撤销弱光即关灯。</span>        remoteControl<span class="token punctuation">.</span><span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">buttonWasPressed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">buttonWasPressed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/12 19:06 * @Description 宏命令 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MacroCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Command<span class="token punctuation">[</span><span class="token punctuation">]</span> commands<span class="token punctuation">;</span>    <span class="token function">MacroCommand</span><span class="token punctuation">(</span>Command<span class="token punctuation">[</span><span class="token punctuation">]</span> commands<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>commands <span class="token operator">=</span> commands<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Command command <span class="token operator">:</span> commands<span class="token punctuation">)</span> <span class="token punctuation">{</span>            command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Command command <span class="token operator">:</span> commands<span class="token punctuation">)</span> <span class="token punctuation">{</span>            command<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/12 17:13 * @Description 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RemoteControl remoteControl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Door door <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Door</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Light light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Command doorCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoorCommand</span><span class="token punctuation">(</span>door<span class="token punctuation">)</span><span class="token punctuation">;</span>        Command lightOnStrongCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOnStrongCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>        Command<span class="token punctuation">[</span><span class="token punctuation">]</span> commands <span class="token operator">=</span> <span class="token punctuation">{</span>doorCommand<span class="token punctuation">,</span> lightOnStrongCommand<span class="token punctuation">}</span><span class="token punctuation">;</span>        MacroCommand macroCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MacroCommand</span><span class="token punctuation">(</span>commands<span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> macroCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">buttonWasPressed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单件模式</title>
      <link href="/posts/9b1fa808/"/>
      <url>/posts/9b1fa808/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>单件模式确保一个类只有一个实例，并提供一个全局访问点。有些对象其实只需要一个而不是多个，例如线程池、缓存、注册表、全局设置等。因此当需要确保程序中的某个类只有一个实例时，就可以采用单件模式。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="延迟实例化-懒汉模式"><a href="#延迟实例化-懒汉模式" class="headerlink" title="延迟实例化(懒汉模式)"></a>延迟实例化(懒汉模式)</h3><p>该方案是线程不安全的，因为在多线程情况下可能会创建多个不同的实例。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/12 12:27 * @Description 单件模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * getInstance 静态方法中使用了该变量因此需要在变量上加 static，确保唯一性。     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton uniqueInstance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 禁止new创建     */</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * static 是因为无法通过 new 创建实例则无法调用实例的方法。通过 static 关键字可以直接使用类名调用方法。     * @return Singleton     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="synchronized-方法"><a href="#synchronized-方法" class="headerlink" title="synchronized 方法"></a>synchronized 方法</h3><p>为<code>getInstance()</code>增加关键字<code>synchronized</code>可以解决线程安全问题，但是这样会造成性能非常低的问题，如果<code>getInstance()</code>的性能对应用程序不是很关键这个方法足够使用了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="急切实例化-饿汉模式"><a href="#急切实例化-饿汉模式" class="headerlink" title="急切实例化(饿汉模式)"></a>急切实例化(饿汉模式)</h3><p>使用急切实例化的方法，而不是使用延迟实例化的做法。如果程序在创建和运行时方面的负担不太繁重，这样会让 JVM 在加载这个类时马上创建出此唯一的单件实例，就不存在线程安全问题。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/12 12:27 * @Description 急切实例化的单件模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="双重检查加锁"><a href="#双重检查加锁" class="headerlink" title="双重检查加锁"></a>双重检查加锁</h3><p>用双重检查加锁的方法在<code>getInstance()</code>中减少使用同步。这样做会先检查实例是否创建了，未创建才进行同步，这样保证只有第一次调用方法实例化时才会同步。提升了性能的同时保证了线程安全。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/12 12:27 * @Description 双重检查加锁的单件模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * volatile 关键词是必须的，它禁止了 JVM 的指令重排，保证获取的变量都是最新的。     * uniqueInstance = new Singleton();这段代码分为三步执行：     * 1. 为 uniqueInstance 分配内存空间；     * 2. 初始化 uniqueInstance；     * 3. 将 uniqueInstance 指向分配的内存地址。     * JVM 具有指令重排特性，可能导致执行顺序变为 1→3→2，在单线程下不会出现问题，但是多线程会导致一个线程获得还没有初始化的实例。     */</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton uniqueInstance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 此处判断两次是为了防止当多个线程通过了第一次判断之后，其中一个线程加锁进行了实例化之后解锁，     * 另一个线程加锁进来又一次实例化之后解锁，导致实例化对象不同的情况。因此在锁内还需要判断一次。     * @return Singleton     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="内部类实现"><a href="#内部类实现" class="headerlink" title="内部类实现"></a>内部类实现</h3><p>当 Singleton 类被加载时，静态内部类 SingletonHolder 没有被加载进内存。只有当调用 getInstance() 方法从而触发 SingletonHolder.INSTANCE 时 SingletonHolder 才会被加载，此时初始化 INSTANCE 实例，并且 JVM 能确保 INSTANCE 只被实例化一次。这种方式不仅具有延迟初始化的好处，而且由 JVM 提供了对线程安全的支持。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/12 12:29 * @Description 内部类实现方式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取实例。     * @return Singleton     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂模式</title>
      <link href="/posts/bf53f1b3/"/>
      <url>/posts/bf53f1b3/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol><li>工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到了子类。<br> <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/factoryMethodGeneralUML.png"></li><li>抽象工厂模式提供了一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。<br> <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/abstractFactoryGeneralUML.png"></li></ol><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ol><li>要依赖抽象，不要依赖具体类，即依赖倒置原则。</li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>设计一个比萨商店系统，出售各种类型的比萨(比萨商店类，比萨抽象类，具体比萨子类)。</p><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>简单工厂将实例化具体类的代码进行了封装，实现了解耦操作。缺点也很明显，不利于扩展，需要创建对象数量众多时，工厂会比较臃肿。且每次修改都需要对源代码进行修改，违反了关闭修改的设计原则。</p><p>案例实现过程：</p><ol><li>当通过比萨商店出售比萨时，需要按照所需比萨类型去实例化具体的比萨子类。当比萨商店新增不同的比萨时，需要修改商店的实例化部分代码，也就是说需要不断的修改源代码。</li><li>将实例化部分代码提取出来设计成一个简单工厂，专门用该工厂实例化不同类型的比萨。此时，新增比萨则无需变动比萨商店类，只需修改简单工厂即可。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/simpleFactoryUML.png"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/11 19:21 * @Description 披萨简单工厂 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimplePizzaFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 芝士比萨     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String CHEESE <span class="token operator">=</span> <span class="token string">"cheese"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 素食比萨     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String VEGGIE <span class="token operator">=</span> <span class="token string">"veggie"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建具体类型比萨     * @param type 比萨类型     * @return 具体类型比萨     */</span>    BasePizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BasePizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>CHEESE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>VEGGIE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VeggiePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/11 19:18 * @Description 披萨商店 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> SimplePizzaFactory factory<span class="token punctuation">;</span>    <span class="token function">PizzaStore</span><span class="token punctuation">(</span>SimplePizzaFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 比萨订单     * @param type 比萨类型     * @return 具体类型比萨     */</span>    BasePizza <span class="token function">orderPizza</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BasePizza pizza<span class="token punctuation">;</span>        pizza <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createPizza</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/11 19:14 * @Description 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimplePizzaFactory simplePizzaFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimplePizzaFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PizzaStore pizzaStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">(</span>simplePizzaFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        BasePizza cheesePizza <span class="token operator">=</span> pizzaStore<span class="token punctuation">.</span><span class="token function">orderPizza</span><span class="token punctuation">(</span>SimplePizzaFactory<span class="token punctuation">.</span>CHEESE<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cheesePizza<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BasePizza veggiePizza <span class="token operator">=</span> pizzaStore<span class="token punctuation">.</span><span class="token function">orderPizza</span><span class="token punctuation">(</span>SimplePizzaFactory<span class="token punctuation">.</span>VEGGIE<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>veggiePizza<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>工厂方法拥有简单工厂的优点，并且便于扩展(新增不同的子类即可)，适用于实现具体工厂。在编写新的具体产品类时，还要提供与之相对的具体工厂类，类的个数成对增长，在一定程度上增加了系统的复杂度。</p><p>案例实现过程：</p><ol><li>此时如果要新增比萨商店，例如中国比萨商店、日本比萨商店，可以通过增加各地区简单工厂来实现。但是通过简单工厂的方式实现无法变更正在创建的产品，也就是说当需要增加新产品时就需要更改工厂类，违反了对修改关闭的原则。</li><li>将简单工厂实现为继承 PizzaStore 的具体子类，PizzaStore 中新增 create 的抽象方法。使用工厂方式模式一定程度可以克服以上问题。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/factoryMethodUML.png"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/11 19:18 * @Description 披萨商店 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BasePizzaStore</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 芝士比萨     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String CHEESE <span class="token operator">=</span> <span class="token string">"cheese"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 素食比萨     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String VEGGIE <span class="token operator">=</span> <span class="token string">"veggie"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 比萨订单     * @param type 比萨类型     * @return 具体类型比萨     */</span>    BasePizza <span class="token function">orderPizza</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BasePizza pizza<span class="token punctuation">;</span>        pizza <span class="token operator">=</span> <span class="token function">createPizza</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 实例化具体的比萨     * @param type 比萨类型     * @return 具体类型比萨     */</span>    <span class="token keyword">abstract</span> BasePizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/11 20:20 * @Description 中国比萨商店子类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChinaPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">BasePizzaStore</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    BasePizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BasePizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>CHEESE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>VEGGIE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaVeggiePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    * @Author 喵粮都输光了    * @Date 2020/3/11 19:14    * @Description 测试    */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BasePizzaStore chinaPizzaStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BasePizza chinaPizza <span class="token operator">=</span> chinaPizzaStore<span class="token punctuation">.</span><span class="token function">orderPizza</span><span class="token punctuation">(</span>BasePizzaStore<span class="token punctuation">.</span>CHEESE<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>chinaPizza<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BasePizzaStore japanPizzaStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JapanPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BasePizza japanPizza <span class="token operator">=</span> japanPizzaStore<span class="token punctuation">.</span><span class="token function">orderPizza</span><span class="token punctuation">(</span>BasePizzaStore<span class="token punctuation">.</span>VEGGIE<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>japanPizza<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>如果需要创建一系列同分类的产品时，使用抽象工厂是一个很好的选择，可以将相关产品都聚合起来。需要注意的是如果要新增一个产品需要对接口进行修改！所以常用于事先规划好且不会进行变更的产品。具体工厂实现经常使用工厂方式进行搭配。</p><p>案例实现过程：</p><ol><li>每个地区生产的比萨制作方法不同，原料也不尽相同，这时就需要一个原料工厂了。以面团为例，面团假设有厚面团和薄面团，通过使用工厂方式模式就需要建立一个父类面团，子类厚面团和薄面团。原料不可能只有面团，有无数个都需要如此建立父类子类，这是非常劳累的事情，而且他们都属于一个类别，通过工厂方式模式无法将这些原料归类在一起。</li><li>使用抽象工厂模式，设计一个原料工厂接口用于创建所有所需原料，然后按地区划分创建原料工厂实现类，直接实例化具体的原料，例如厚面团。这样做的好处是可以聚集所有同类别的代码，相当于分类一样。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/abstractFactoryUML.png"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/11 19:23 * @Description 中国素食比萨子类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChinaVeggiePizza</span> <span class="token keyword">extends</span> <span class="token class-name">BasePizza</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> PizzaIngredientFactory ingredientFactory<span class="token punctuation">;</span>    <span class="token function">ChinaVeggiePizza</span><span class="token punctuation">(</span>PizzaIngredientFactory ingredientFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ingredientFactory <span class="token operator">=</span> ingredientFactory<span class="token punctuation">;</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"中国素食比萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setDough</span><span class="token punctuation">(</span>ingredientFactory<span class="token punctuation">.</span><span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/11 20:20 * @Description 中国比萨商店子类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChinaPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">BasePizzaStore</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    BasePizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BasePizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>        PizzaIngredientFactory ingredientFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaIngredientFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>CHEESE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaCheesePizza</span><span class="token punctuation">(</span>ingredientFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>VEGGIE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaVeggiePizza</span><span class="token punctuation">(</span>ingredientFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    * @Author 喵粮都输光了    * @Date 2020/3/11 19:14    * @Description 测试    */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BasePizzaStore chinaPizzaStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BasePizza chinaPizza <span class="token operator">=</span> chinaPizzaStore<span class="token punctuation">.</span><span class="token function">orderPizza</span><span class="token punctuation">(</span>BasePizzaStore<span class="token punctuation">.</span>CHEESE<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>chinaPizza<span class="token punctuation">.</span><span class="token function">getDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> chinaPizza<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BasePizzaStore japanPizzaStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JapanPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BasePizza japanPizza <span class="token operator">=</span> japanPizzaStore<span class="token punctuation">.</span><span class="token function">orderPizza</span><span class="token punctuation">(</span>BasePizzaStore<span class="token punctuation">.</span>VEGGIE<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>japanPizza<span class="token punctuation">.</span><span class="token function">getDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> japanPizza<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之装饰者模式</title>
      <link href="/posts/2ba79d9e/"/>
      <url>/posts/2ba79d9e/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>装饰者模式动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</p><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/decoratorGeneralUML.png"></p><p>特性:</p><ol><li>装饰者和被装饰对象有相同的超类型。</li><li>可以用一个或多个装饰者包装一个对象。</li><li>在任何需要被包装的场合，可以用装饰过的对象代替它。</li><li>装饰者可以在所委托被装饰者的行为前后增加自己的行为达到特定目的。</li><li>对象可以在任何时候不限量被装饰(比如运行时)。</li></ol><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ol><li>类应该对扩展开放，对修改关闭。</li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>案例实现过程：</p><ol><li>设计一个饮品订单系统，抽象一个饮品类，让所有的饮品都继承该超类。</li><li>当需要为饮品增加调料，按照原型设计思路需要设计一个类名为饮品+调料的新类，这样会导致类数量爆炸式增长。可以在饮品抽象类中增加所有出现的调料变量(boolean)，通过 hasX 和 setX 的方式获取和设置调料。</li><li>当出现新的调料就要不断修改抽象类，这样没有封装变化的部分，此时可以通过运行时以调料来装饰饮品的方式封装变化部分。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/11 12:20 * @Description 饮品抽象类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseBeverage</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 饮品描述     */</span>    String description <span class="token operator">=</span> <span class="token string">"未知饮品"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取饮品描述     * @return 饮品描述     */</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 饮品价格     * @return 饮品价格     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/11 14:18 * @Description 调料装饰者抽象类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseCondimentDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBeverage</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 重新实现获取描述的方法     * @return 描述     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/11 14:00 * @Description 深焙咖啡饮品实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DarkRoast</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBeverage</span> <span class="token punctuation">{</span>    <span class="token function">DarkRoast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        description <span class="token operator">=</span> <span class="token string">"深焙咖啡"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0.99</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/11 14:26 * @Description 奶泡调料装饰器实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Whip</span> <span class="token keyword">extends</span> <span class="token class-name">BaseCondimentDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> BaseBeverage beverage<span class="token punctuation">;</span>    <span class="token function">Whip</span><span class="token punctuation">(</span>BaseBeverage beverage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beverage <span class="token operator">=</span> beverage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beverage<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"+奶泡"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beverage<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/11 14:28 * @Description 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BaseBeverage beverage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DarkRoast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beverage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Whip</span><span class="token punctuation">(</span>beverage2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"描述: "</span> <span class="token operator">+</span> beverage<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"价格: "</span> <span class="token operator">+</span> beverage<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之观察者模式</title>
      <link href="/posts/168b5985/"/>
      <url>/posts/168b5985/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>观察者模式定义了对象之间的一(subject)对多(observer)依赖，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。类似关注 up 主，up 主更新视频时就会推送视频给关注该 up 主的用户。</p><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/observerGeneralUML.png"></p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ol><li>为了交互对象之间的松耦合设计而努力(松耦合: 当两个对象之间松耦合，它们依然可以交互，但是不太清楚彼此的细节)。</li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>设计一个气象站发布栏，要求气象站数据更新时，推送最新的数据至订阅了该气象站的用户手中，用户可以自定义数据的显示样式。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/10 14:00 * @Description 主题接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 注册观察者     * @param observer 观察者接口     */</span>    <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 删除观察者     * @param observer 观察者接口     */</span>    <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 状态更新，通知观察者     */</span>    <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/10 14:00 * @Description 观察者接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通知观察者状态更新的接口     * @param args 更新数据     */</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/10 14:05 * @Description 信息显示样式接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DisplayElement</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 数据展示样式     */</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/10 14:12 * @Description 主题具体实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherData</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>Observer<span class="token operator">></span> observers<span class="token punctuation">;</span>    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 存储观察者</span>        observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> observers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> observers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Observer observer <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通知观察者。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">measurementsChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设气象数据并通知观察者。     * @param args 更新数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMeasurements</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>args <span class="token operator">=</span> args<span class="token punctuation">;</span>        <span class="token function">measurementsChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/10 14:21 * @Description 信息显示样式具体实现: 目前状况样式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentConditionsDisplay</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">,</span> DisplayElement <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前状态: \n温度: "</span> <span class="token operator">+</span> temperature <span class="token operator">+</span> <span class="token string">"\n湿度: "</span> <span class="token operator">+</span> humidity <span class="token operator">+</span> <span class="token string">"\n气压: "</span> <span class="token operator">+</span> pressure <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2020/3/10 14:28 * @Description 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        WeatherData weatherData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CurrentConditionsDisplay currentConditionsDisplay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurrentConditionsDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>currentConditionsDisplay<span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">setMeasurements</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">10f</span><span class="token punctuation">,</span> <span class="token number">20f</span><span class="token punctuation">,</span> <span class="token number">30f</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">setMeasurements</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">40f</span><span class="token punctuation">,</span> <span class="token number">50f</span><span class="token punctuation">,</span> <span class="token number">60f</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">removeObserver</span><span class="token punctuation">(</span>currentConditionsDisplay<span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">setMeasurements</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">70f</span><span class="token punctuation">,</span> <span class="token number">80f</span><span class="token punctuation">,</span> <span class="token number">90f</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Java-内置观察者模式支持"><a href="#Java-内置观察者模式支持" class="headerlink" title="Java 内置观察者模式支持"></a>Java 内置观察者模式支持</h2><p>通过使用 Java 内置的 Observable 和 Observer 实现观察者模式。</p><ul><li>Observer(接口): 包含 update 方法(需要传入 Observable 对象)。</li><li>Observable(类): 包含注册、删除、通知方法。</li></ul><blockquote><p>Observable 是一个类不是接口，限制了复用潜力(无法多继承)，违反了针对接口编程的原则。而且 Observable 是乱序通知观察者的，每次的次序是不相同的。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论与数理统计</title>
      <link href="/posts/28d5cef4/"/>
      <url>/posts/28d5cef4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/probabilityAndStatistics.png"></p><h2 id="概率论的基本概念"><a href="#概率论的基本概念" class="headerlink" title="概率论的基本概念"></a>概率论的基本概念</h2><h3 id="随机试验"><a href="#随机试验" class="headerlink" title="随机试验"></a>随机试验</h3><p>随机试验: $\begin{cases} 在相同条件下可重复。\\结果不止一个。\\无法预测。 \end{cases}$</p><h3 id="样本空间、随机事件"><a href="#样本空间、随机事件" class="headerlink" title="样本空间、随机事件"></a>样本空间、随机事件</h3><ol><li>样本空间: 所有基本事件的集合。</li><li>样本点: 样本空间的元素。</li><li>$A\subset B$: 事件B包含事件A。</li><li>$A\bigcup B=\{x|x∈A 或 x∈B\}$: 事件A与事件B的和事件(也可以记为$A+B$)，即A，B中至少一个发生，事件$A\bigcup B$发生。</li><li>$A\bigcap B=\{x|x∈A 且 x∈B\}$: 事件A与事件B的积事件(也可以记为$AB$)，即仅当A，B同时发生时，事件$A\bigcup B$发生。</li><li>$A-B=\{x|x∈A 且 x∈B\}$: 事件A与事件B的差事件，即当且仅当A发生、B不发生时，事件$A-B$发生。</li><li>$A\bigcap B=\emptyset$: 事件A与B是互不相容的(或互斥的)，即事件A与事件B不能同时发生。</li><li>$A\bigcup B=S$且$A\bigcap B=\emptyset$，事件A与事件B互为逆事件(或事件A与事件B互为对立事件)，即事件A、B中必有一个发生，且仅有一个发生(A的对立事件记为$\hat{A}$，$\hat{A}=S-A$，S为总事件)。</li></ol><h3 id="频率与概率"><a href="#频率与概率" class="headerlink" title="频率与概率"></a>频率与概率</h3><ol><li>频率: 描述了事件发生的频繁程度，即大量实验统计。</li><li>概率: 在一次试验中发生的可能性大小的数。频率的稳定值即统计概率。</li><li>公理化: $\begin{cases} 非负性，概率不为负\\规范性，P(S)=1\\可列可加性 \end{cases}$。</li><li>概率性质: $\begin{cases} p(\emptyset)=0。\\P(A_1+A_2+\dots+A_n)=P(A_1)+P(A_2)+\dots+P(A_n)。\\若A\subset B，则P(B-A)=P(B)-P(A)，P(B)≥P(A)。\\对于任一事件A，P(A)≤1。\\对于任一事件A，P(\hat{A})=1-P(A)。\\P(A\bigcup B)=P(A)+P(B)-P(AB)=P(A)+P(B-AB)。  \end{cases}$</li></ol><h3 id="古典概型"><a href="#古典概型" class="headerlink" title="古典概型"></a>古典概型</h3><ol><li>古典概型: $\begin{cases} 样本点个数有限。\\每个基本事件发生的概率相同。 \end{cases}$，也可称为等可能概型。</li><li>$P(A)=\frac{有利样本点}{样本总数}$，例如$\frac{骰子偶数点数3}{总骰子数6}$。</li><li>不重复排列: $\begin{cases}P_n^m=n(n-1)(n-2)\dots(n-m+1)=\frac{n!}{(n-m)!}\\P_n^n=n(n-1)×\dots×3×2×1=n! \end{cases}$。<br>重复排列: $\begin{cases}C_n^m=\frac{P_n^m}{m!}=\frac{n!}{m!(n-m)!}\\C_n^m=C_n^{n-m}\\C_n^0=C_n^n=1 \end{cases}$。</li><li>几何概型: $p(A)=\frac{\mu(G)}{\mu(S)}$，$\mu$表几何区域内的一种度量(如线段中即长度)，与古典概型性质唯一不同的在于几何概型拥有完全可加性，古典概型是有限可加性。</li></ol><h3 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h3><ol><li>条件概率: S样本空间，A，B两个事件，其中$P(B)&gt;0$，称$P(A|B)=\frac{P(AB)}{P(B)}$为在事件A发生的条件下事件B发生的条件概率。</li><li>乘法公式: $P(ABC)=P(A)P(B|A)P(C|AB)$，即先发生了A，然后在A发生的条件下发生了B，最后在AB发生的条件下发生了C。n项的话依次类推。</li><li>全概率公式: $A_1,A_2\dots A_n$是E的完备事件组(互不相容，并是S)，$P(A_i)&gt;0$，$P(B)=\sum_{i=1}^nP(A_i)P(B|A_i)$。知原因推结果。</li><li>贝叶斯公式: $A_1,A_2\dots A_n$是E的完备事件组，B是任一事件，$P(A_i)&gt;0$，$P(B)&gt;0$，$P(A_k|B)=\frac{P(A_k)P(B|A_k)}{\sum_{i=1}{n}P(A_i)P(B|A_i}=\frac{P(A_kB)}{P(B)}$。知结果推原因。</li></ol><h3 id="独立性"><a href="#独立性" class="headerlink" title="独立性"></a>独立性</h3><ol><li>若$P(A)&gt;0$，$P(B)&gt;0$，$P(A|B)=P(A)$或$P(AB)=P(A)P(B)$，即A的概率不受B发生与否的影响称为独立性。</li><li>若事件A与B相互独立，则A与$\hat{B}$，$\hat{A}$与B，$\hat{A}$与$\hat{B}$都相互独立。</li><li>A，B，C三个事件，若满足等式: $\begin{cases} P(AB)=P(A)P(B)\\P(AC)=P(A)P(C)\\P(BC)=P(B)P(C)\\P(ABC)=P(A)P(B)P(C) \end{cases}$，则事件A，B，C相互独立。</li></ol><h2 id="随机变量及其分布"><a href="#随机变量及其分布" class="headerlink" title="随机变量及其分布"></a>随机变量及其分布</h2><h3 id="随机变量"><a href="#随机变量" class="headerlink" title="随机变量"></a>随机变量</h3><ol><li>在样本空间$S={e}$中，$X=X(e)$每一个样本都对应一个实值单值函数，则称$X=X(e)$为随机变量。</li><li>离散型: 有限个或无限可列个。</li><li>连续型(非离散型): 取值一个或多个区间。</li></ol><h3 id="离散型随机变量及其分布律"><a href="#离散型随机变量及其分布律" class="headerlink" title="离散型随机变量及其分布律"></a>离散型随机变量及其分布律</h3><ol><li>离散型随机变量X所有可能取的值为$x_k(k=1,2,\dots)$，X取各个可能值的概率，即事件$\{X=x_k\}$的概率为$P\{X=x_k\}=p_k$。且$p_k≥0$，$\sum_{k=1}^\infty p_k=1$。</li><li>伯努利试验: 试验只有A和$\hat{A}$两种可能。</li><li>n重伯努利试验: 将伯努利试验重复n次，试验之间彼此独立。</li><li>$(0-1)$分布: 随机变量X只能取0与1两个值，其分布律为$P\{X=k\}=p^k(1-p)^{1-k}, k=0,1(0&lt;p&lt;1)$。</li><li>几何分布: 设$P(A)=p$，第k次首次发生，即前$k-1$次未发生，则$P\{X=k\}=(1-p)^{k-1}p，k=1,2,3,\dots$，记为$X\sim G(p)$。</li><li>二项分布: 即n重伯努利试验，记为$X\sim B(n, p)$。$P(A)=p$，n次试验发生了k次，则$P\{X=k\}=C_n^kp^k(1-p)^{n-k}，k=0,1,\dots,n$。当$n=1$时，二项分布化为$(0-1)$分布。二项分布最可能值: $\begin{cases} (n+1)p不为整数，[(n+1)p]达到最大值。\\(n+1)p是整数，(n+1)p和(n+1)p-1都是最大值。 \end{cases}$</li><li>泊松分布: $P\{X=k\}=\frac{\lambda^ke^{-\lambda}}{k!}，k=0,1,\dots$，其中$\lambda&gt;0$，记为$X\sim P(\lambda)$或$X\sim \pi(\lambda)$。</li><li>超几何分布: 不放回抽样试验，N个元素，$N_1$属于第一类，$N_2$属于第二类，取n个，X: n个中属于第一类的个数，$P\{X=k\}=\frac{C_{N_1}^kC_{N_2}^{n-k}}{C_N^n}$，$k=0,1,\dots,min{n,N_1}$。</li><li>不放回抽样实验，当N很大，n相对于N很小时，可以当作放回抽样试验。$P=\frac{M}{N}$改变小，即$\frac{n}{N}$小(N总数，M样本数)，则$P=\{X=k\}=\frac{C_M^kC_{N-M}^{n-k}}{C_N^n}\approx C_n^kP^k(1-p)^{n-k}$。</li></ol><h3 id="随机变量的分布函数"><a href="#随机变量的分布函数" class="headerlink" title="随机变量的分布函数"></a>随机变量的分布函数</h3><ol><li>$F(x)=P\{X≤x\}(-\infty＜x＜\infty)$，称为X的分布函数(对于离散型，连续型都成立)。</li><li>$F(x)$是一个不减函数(或增或保持不变)；$0≤F(x)≤1$,即$F(-\infty)=\lim \limits_{x \to -\infty} F(x)=0$，$F(\infty)=\lim \limits_{x \to \infty} F(x)=1$。</li><li>$F(x)$对于离散型是右连续的(即$F(x+0)=F(x)$)，$F(X)$对于连续型是连续的。</li></ol><h3 id="连续型随机变量及其概率密度"><a href="#连续型随机变量及其概率密度" class="headerlink" title="连续型随机变量及其概率密度"></a>连续型随机变量及其概率密度</h3><ol><li>非负可积$f(x)$，$f(x)≥0$,$a≤b$，则$P\{a&lt;x≤b\}=\int_a^bf(x){\rm d}x$，记为$X\sim f(x)$。连续型随机变量不注重端点值，且$f(x)≥0$，$\int_{-\infty}^\infty f(x){\rm d}x=1$。</li><li>对于任意$x_1≤x_2$，$P\{x_1&lt;X≤x_2\}=F(x_2)-F(x_1)=\int_{x_1}^{x_2}f(x){\rm d}x$。</li><li>若$f(x)$在点x处连续，则$F\prime(x)=f(x)$。</li><li>连续变量取个别值的概率为零。</li><li>均匀分布: $f(x)=\begin{cases} \frac{1}{b-a}，&amp;a&lt;x&lt;b，\\0，&amp;其他，\end{cases}$，记为$X\sim U(a, b)$。</li><li>指数分布: $f(x)=\begin{cases} \lambda e^{-\lambda x}，&amp;x&gt;0，\\0，&amp;x≤0，\end{cases}$，其中$\lambda &gt;0$，记为$X\sim Exp(\lambda)$。</li><li>正态分布(高斯分布): $f(x)=\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$，$-\infty&lt;x&lt;\infty$，记为$X\sim N(\mu, \sigma^2)$。当$x=\mu$时取得最大值。曲线关于$x=\mu$对称，对于任意$h&gt;0$都有$P\{\mu-h&lt;X≤\mu\}=P\{\mu&lt;X≤\mu+h\}$。$\sigma$固定，$\mu$变化，图像左右移动；$\mu$固定，$\sigma$变化，$\begin{cases} \sigma变小，最高点上移，图像变陡。\\\sigma变大，最高点下移，图像变缓。 \end{cases}$</li><li>标准正态分布$\phi_o(x)$: 当$\mu=0$，$\sigma=1$时，$\phi_o(x)=\frac{1}{\sqrt{2\pi}}e^{-\frac{x^2}{2}}$。$\Phi_o(-x)=1-\Phi_o(x)$，$\phi_o(x)=\phi_o(-x)$。$\phi(x)=\frac{1}{\sigma}\phi_o(\frac{x-\mu}{\sigma})$。若$X\sim N(\mu, \sigma^2)$，则$Z=\frac{X-\mu}{\sigma}\sim N(0, 1)$。</li></ol><h3 id="随机变量的函数的分布"><a href="#随机变量的函数的分布" class="headerlink" title="随机变量的函数的分布"></a>随机变量的函数的分布</h3><ol><li>离散型: X代入函数，p不变。若X代入函数之后有相同值则合并(p相加)。</li><li>连续型: 设X的$f_X(x)$，$y=g(x)$，$Y=g(X)$，则求解步骤为:<ul><li>得出$F_Y(x)$，$F_Y(x)=P\{Y≤x\}$，将其化成$F_X(x)$，$F_X(x)=P\{X≤x\}$。</li><li>对$F_Y(x)=F_X(x)$求导得$f_Y(x)=f_X(x)$，根据$f_X(x)$写出$f_Y(x)$的分段函数。</li></ul></li></ol><h2 id="多维随机变量及其分布"><a href="#多维随机变量及其分布" class="headerlink" title="多维随机变量及其分布"></a>多维随机变量及其分布</h2><h3 id="二维随机变量"><a href="#二维随机变量" class="headerlink" title="二维随机变量"></a>二维随机变量</h3><ol><li>联合分布函数: $F(x, y)$=$P\{(X≤x)\bigcap(Y≤y)\}$=$P\{X≤x, Y≤y\}$。</li><li>$F(x, y)$是不减h函数，y固定时，$x_1＜x_2$，$F(x_1, y)≤F(x_2, y)$。</li><li>$0≤F(x, y)≤1$，当y固定时$F(-\infty, y)=0$，$当x固定时F(x, -\infty)=0$，$F(-\infty, -\infty)=0$，$F(\infty, \infty)=1$。</li><li>对于任意$(x_1, y_1)$，$(x_2, y_2)$，$x_1&lt;x_2$，$y_1&lt;y_2$，则$F(x_2, y_2)-F(x_2, y_1)+F(x_1, y_1)-F(x_1, y_2)≥0$。</li></ol><h3 id="边缘分布"><a href="#边缘分布" class="headerlink" title="边缘分布"></a>边缘分布</h3><ol><li>离散型边缘分布: 简单说就是确定$x_i$，将$x_i$所在的%y_j%概率相加，即为该$x_i$的边缘分布。</li><li>连续型边缘分布: $F(x, y)$=$P\{X≤x, Y≤y\}$=$\int_{-\infty}^x \int_{-\infty}^y f(s, t){\rm d}s{\rm d}t$，其中$F(x, y)$是联合分布，$f(x, y)$是联合密度。G是XY平面上的一个区域，$P\{(X, Y)∈G\}$=${\int \int}_G f(x, y){\rm d}x{\rm d}y$。</li><li>联合分布可唯一确认边缘分布；边缘分布不能确定联合分布；当X，Y独立时，边缘分布才能确定联合分布。</li><li>边缘密度函数: 已知$f(x, y)$，求$f_X(x)=\int_{-\infty}^{+\infty} f(x, y){\rm d}y$，$f_Y(x)=\int_{-\infty}^{+\infty} f(x, y){\rm d}x$，且$f(x, y)$=$f_X(x)f_Y(y)$。</li><li>二维正态分布的边缘分布也是正态。</li><li>两边缘分布是正态的，二维并非一定是二维正态的。</li></ol><h3 id="条件分布"><a href="#条件分布" class="headerlink" title="条件分布"></a>条件分布</h3><ol><li>条件分布: $P\{X=x_i|Y=y_j\}$=$\frac{P\{X=x_i, Y=y_j\}}{P\{Y=y_j\}}$=$\frac{P_{ij}}{P_j}$。</li><li>离散型的条件分布即$\frac{某点概率}{边缘分布概率}$。</li><li>连续型的条件分布: $(X, Y)$，$f(x, y)$，$f_X(x)$，$f_Y(y)$，若$f_Y(y)&gt;0$，在$Y=y$的条件下，$F(x|y)=\int_{-\infty}^x \frac{f(x, y)}{f_Y(y)}{\rm d}y$。</li></ol><h3 id="相互独立的随机变量"><a href="#相互独立的随机变量" class="headerlink" title="相互独立的随机变量"></a>相互独立的随机变量</h3><ol><li>二维离散型的独立性: $P_{ij}=x_iy_j$。</li><li>二维连续型的独立性: $f(x, y)=f_X(x)f_Y(y)$。</li><li>变量独立，则变量构造的函数也独立。</li></ol><h3 id="两个随机变量的函数的分布"><a href="#两个随机变量的函数的分布" class="headerlink" title="两个随机变量的函数的分布"></a>两个随机变量的函数的分布</h3><ol><li>二维离散型的函数分布: X和Y代入函数，求XY相乘所有的可能，p不变，若有重复的则合并(p相加)。</li><li>二维连续型的函数分布: $(X, Y)$，$f(x, y)$，$Z=g(X, Y)$，$F(\xi)=P\{Z≤\xi\}=P\{g(X, Y)≤\xi\}={\int\int}_{D_\xi} f(x, y){\rm d}x{\rm d}y$，求出$f_Z(\xi)$。</li><li>卷积公式: $f_X*f_Y=f_{X+Y}(z)=\int_{-\infty}^{\infty}f_X(z-y)f_Y(y){\rm d}y=\int_{-\infty}^{\infty}f_X(x)f_Y(z-x){\rm d}x$。</li><li>$Z=\frac{Y}{X}$: $f_{\frac{Y}{X}}(z)=\int_{-\infty}^{\infty}|x|f_X(x)f_Y(xz){\rm d}x$。</li><li>$Z=XY$: $f_{XY}(z)=\int_{-\infty}^{\infty}\frac{1}{|x|}f_X(x)f_Y(\frac{z}{x}){\rm d}x$。</li><li>$M=max\{X, Y\}$: $F_{max}(z)=F_X(z)F_Y(z)$。</li><li>$N=min\{X, Y\}$: $F_{min}(z)=1-[1-F_X(z)][1-F_Y(z)]$。</li></ol><h2 id="随机变量的数字特征"><a href="#随机变量的数字特征" class="headerlink" title="随机变量的数字特征"></a>随机变量的数字特征</h2><h3 id="数学期望"><a href="#数学期望" class="headerlink" title="数学期望"></a>数学期望</h3><ol><li>离散型的期望: 若分布律为$P\{X=x_k\}=P_k$，$EX=\sum_{k=1}^\infty x_kP_k$($EX$或$E(X)$数学期望)，离散型的期望即值乘以概率值相加。</li><li>连续型的期望: 若概率密度为$\int_{-\infty}^{\infty} xf(x){\rm d}x$，$EX=\int_{-\infty}^{\infty} xf(x){\rm d}x$。</li><li>离散型函数的期望: $Y=g(X)$，则$EY=\sum_{k=1}^\infty g(x_k)P_k$。</li><li>连续型函数的期望: $Y=g(X)$，则$EY=\int_{-\infty}^{\infty} g(x)f(x){\rm d}x$。</li><li>二维离散型函数的期望: $Z=g(X, Y)$，则$EZ=\sum_i\sum_j g(x_i, y_j)P_{ij}$。</li><li>二维连续型函数的期望: $Z=g(X, Y)$，则$EZ=\int_{-\infty}^\infty\int_{-\infty}^\infty g(x, y)f(x, y){\rm d}x{\rm d}y$。</li><li>期望的性质: $\begin{cases} EC=C\\E(X+C)=EX+C\\E(CX)=CEX\\E(kX+b)=kEX+b\\E(X±Y)=EX±EY\\若X，Y独立，E(XY)=EX EY \end{cases}$</li><li>条件期望: 一个变量取某值，另一个变量的期望。$\begin{cases} E(X|Y=y_j)=\sum x_iP(X=x_i|Y=y_j)&amp;离散型\\E(X|Y=y)=\int_{-\infty}^\infty xf(x|y){\rm d}x&amp;连续型 \end{cases}$。</li></ol><h3 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h3><ol><li>方差: 即随机变量与期望偏离的程度，记为$DX=E(X-EX)^2=EX^2-(EX)^2$，量纲$\sqrt{DX}$。</li><li>离散型方差: $DX=\sum_k (x_k-EX)^2P_k$。</li><li>连续型方差: $DX=\int_{-\infty}^\infty (x-EX)^2f(x){\rm d}x$。</li><li>方差的性质: $\begin{cases} DC=0\\D(X+C)=DX\\D(CX)=C^2DX\\D(kX+b)=k^2DX\\若X，Y独立，D(X±Y)=DX+DY\\DX=0\Leftrightarrow P(X=EX)=1 \end{cases}$</li><li>若$X^\ast=\frac{X-EX}{\sqrt{DX}}$，则$EX^\ast=0$，$DX^\ast=1$。</li><li>$(0-1)$分布的期望与方差: $EX=p$，$DX=p(1-p)$。</li><li>二项分布的期望与方差: $EX=np$，$DX=np(1-p)$。</li><li>几何分布的期望与方差: $EX=\frac{1}{p}$，$DX=\frac{1-p}{p^2}$。</li><li>泊松分布的期望与方差: $EX=\lambda$，$DX=\lambda$。</li><li>均匀分布的期望与方差: $EX=\frac{a+b}{2}$，$DX=\frac{(b-a)^2}{12}$。</li><li>指数分布的期望与方差: $EX=\frac{1}{\lambda}$，$DX=\frac{1}{\lambda^2}$。</li><li>正态分布的期望与方差: $EX=\mu$，$DX=\sigma^2$。</li></ol><h3 id="协方差及相关系数"><a href="#协方差及相关系数" class="headerlink" title="协方差及相关系数"></a>协方差及相关系数</h3><ol><li>协方差: $Cov(X, Y)=E[(X-EX)(Y-EY)]=E(XY)-EXEY$。</li><li>$D(X±Y)=DX+DY±2Cov(X, Y)$。</li><li>协方差相关性质: $\begin{cases} Cov(X, Y)=Cov(Y, X)\\Cov(aX, bY)=abCov(X, Y)\\Cov(X_1+X_2, Y)=Cov(X_1, Y)+Cov(X_2, Y)\\Cov(C, X)=0\\若X，Y独立，Cov(X, Y)=0 \end{cases}$。</li><li>标准化: 若$X^\ast=\frac{X-EX}{\sqrt{DX}}$，$Y^\ast=\frac{Y-EY}{\sqrt{DY}}$，则$Cov(X^\ast, Y^\ast)=\rho=\frac{Cov(X, Y)}{\sqrt{DX}\sqrt{DY}}$。</li><li>相关系数: $\begin{cases} |\rho|≤1\\ [E(XY)]^2≤EX^2EY^2\\|\rho|=1\Leftrightarrow P\{Y=a+bX\}=1，即XY成线性关系 \end{cases}$</li><li>$\rho=1$则X，Y完全正相关；$\rho=-1$则X，Y完全负相关；$|\rho|$接近0则X，Y线性关系不弱；$\rho=0$则X，Y不存在线性关系。</li><li>X，Y独立则X，Y不相关；X，Y不相关则X，Y不一定独立。独立与不相关是等价的。</li></ol><h3 id="矩、协方差矩阵"><a href="#矩、协方差矩阵" class="headerlink" title="矩、协方差矩阵"></a>矩、协方差矩阵</h3><ol><li>原点矩: $EX^k$，以原点为中心；中心距: $E(X-EX)^k$，以期望为中心。</li><li>离散型原点矩: $\sum x_i^kP_i$。</li><li>离散型中心距: $\int_{-\infty}{\infty}x^kf(x){\rm d}x$。</li><li>连续型原点矩: $\sum (x_i-EX)^kP_i$。</li><li>连续型中心距: $\int_{-\infty}{\infty}(x-EX)^kf(x){\rm d}x$。</li></ol><h2 id="大数定律及中心极限定理"><a href="#大数定律及中心极限定理" class="headerlink" title="大数定律及中心极限定理"></a>大数定律及中心极限定理</h2><h3 id="大数定律"><a href="#大数定律" class="headerlink" title="大数定律"></a>大数定律</h3><ol><li>切比雪夫大数定理: $X_1,\dots,X_n$不相关的变量，$EX_i$和$DX_i$都存在，方差有界，即$DX_i≤M$，对$\forall \epsilon&gt;0$时，有$\lim \limits_{n \to \infty} P\{|\frac{1}{n}\sum_{i=1}^nX_i-\frac{1}{n}\sum_{i=1}^nEX_i|&lt;\epsilon\}=1$。</li><li>伯努利大数定理: 假设n重伯努利试验，事件A发生了m次，P是其发生概率，$\frac{m_n}{n}$即为其频率，当$n \to \infty$时，即$\lim \limits_{n \to \infty}P\{|\frac{m_n}{n}-P|&lt;\epsilon\}=1$，其概率依概率收敛于它的概率。也有$\lim \limits_{n \to +\infty}P\{|\frac{m_n}{n}-P|≥\epsilon\}=0$。</li><li>辛钦大数定理: $X_1,\dots,X_n$独立同分布，且$EX_i=M$，$DX_i=\sigma^2$，有$\forall \epsilon&gt;0$，则$\lim \limits_{n \to \infty} P\{|\frac{1}{n}\sum_{i=1}^nX_i-\mu|&lt;\epsilon\}=1$。</li></ol><h3 id="中心极限定理"><a href="#中心极限定理" class="headerlink" title="中心极限定理"></a>中心极限定理</h3><ol><li>$X_1,\dots,X_n$独立同分布，$EX_i=\mu$，$DX_i=\sigma^2$，$0&lt;\sigma^2&lt;+\infty$，$\lim \limits_{n \to \infty}F_n(x)$=$\lim \limits_{n \to \infty}P\{\frac{\sum_{k=1}^nX_k-n\mu}{\sqrt{n}\sigma}≤x\}$=$\int_{-\infty}^x\frac{1}{\sqrt{2\pi}}e^{-\frac{t^2}{2}}{\rm d}t$=$\Phi(x)$。当n充分大时，$\frac{\sum x_i-n\mu}{\sqrt{n}\sigma}\sim N(0, 1)$，$\sum_{i=1}^nX_i\sim N(n\mu, n\sigma^2)$。</li><li>$Y_n$，n，p二项分布近似正态分布，$\Phi_o(x)=\lim \limits_{n \to \infty}P\{\frac{Y_n-np}{\sqrt{np(1-p)}}≤x\}$，其中$Y_n=\sum_{i=1}^nX_i$，$X_i=\begin{cases} 1&amp;发生\\0&amp;未发生 \end{cases}$，$EX_i=P$，$DX_i=p(1-P)$。</li></ol><h2 id="样本及抽样分布"><a href="#样本及抽样分布" class="headerlink" title="样本及抽样分布"></a>样本及抽样分布</h2><h3 id="随机样本"><a href="#随机样本" class="headerlink" title="随机样本"></a>随机样本</h3><p>$X:(0-1)分布$: $P(X_1=x_1,\dots,X_n=x_n)$=$P(X_1=x_1)\dots P(X_n=x_n)$=$P^{x_1}(1-p)^{1-x_1}\dots P^{x_n}(1-p)^{1-x_n}$=$P^{x_1+\dots+x_n}(1-p)^{n-(x_1+\dots +x_n)}$。</p><h3 id="抽样分布"><a href="#抽样分布" class="headerlink" title="抽样分布"></a>抽样分布</h3><ol><li>统计量: 不含任何未知参数的样本构造的函数。</li><li>样本平均值: $\hat{X}=\frac{1}{n}\sum_{i=1}^nX_i$。</li><li>未修正样本方差: $S_o^2=\frac{1}{n}\sum_{i=1}^n(X_i-\hat{X})^2$。$S^2=\frac{n}{n-1}S_o^2$。</li><li>样本方差: $S^2=\frac{1}{n-1}\sum_{i=1}^n(X_i-\hat{X})^2$。</li><li>样本标准方差: $S=\sqrt{S^2}$。</li><li>样本k阶(原点)矩: $A_k=\frac{1}{n}\sum_{i=1}^nX_i^k,(k=1,2,\dots)$。$A_1=\hat{X}$。</li><li>样本k阶中心距: $B_k=\frac{1}{n}\sum_{i=1}^n(X_i-\hat{X})^k,(k=2,3,\dots)$。$B_2=S_o^2$。$S^2=\frac{n}{n-1}B_2$。</li><li>协方差: $S_{1,2}=\frac{1}{n}(X_i-\hat{X})(Y_i-Y)$。</li><li>两样本之间的相关系数: $R=\frac{S_{1,2}}{S_1S_2}$。</li><li>总体X的均值为$EX=\mu$，方差为$DX=\sigma^2$，样本($X_1,X_2,\dots,X_n$)来自总体X，则$E\hat{X}=\mu$，$D\hat{X}=\frac{1}{n}\sigma^2$，$ES^2=\sigma^2$。</li><li>卡方分布:<ul><li>$X_1,\dots,X_n$独立且是来自$N(0, 1)$的样本，则$\chi^2=\sum_{i=1}^nx_i^2\sim \chi^2(n)$。</li><li>$EX=n$，$DX=2n$。</li><li>由中心极限定理得$X\sim \chi^2(n)$，$Y\sim \chi^2(m)$，X, Y独立，则$X+Y\sim \chi^2(m+n)$。</li><li>$X_i\sim \chi^2(m_i)$，独立，$\sum_{i=1}^nX_i\sim \chi^2(\sum_{i=1}^nm_i)$。</li><li>上$\alpha$分位数: $P(\chi^2&gt;\chi^2_alpha(n))=\alpha$。$\chi^2$相当于变量，$\chi^2_alpha(n)$相当于一个点，$\alpha$相当于面积。</li><li>$\chi^2(2)$是$\lambda=\frac{1}{2}$的指数分布。</li><li>$\chi^2(n)$是单峰曲线，在$n-2$时取得最大值。</li><li>当$n=2$时曲线不对称，当n增大图像越接近对称，且在n很大时，可用正态分布近似。</li></ul></li><li>t分布:<ul><li>若$X\sim N(0, 1)$，$Y\sim \chi^2(n)$，X, Y独立，则$t(n)\sim\frac{X}{\sqrt{\frac{Y}{n}}}$。</li><li>上$\alpha$分位数: $P(T&gt;t_\alpha(n))=\alpha$。</li><li>$t_{1-\alpha}(n)$=$-t_\alpha(n)$。</li><li>n越小，其图像与正态分布差距越大($n≥30$，与正态分布区别很小)。</li></ul></li><li>F分布:<ul><li>$X\sim \chi^2(n_1)$，$Y\sim \chi^2(n_2)$，X, Y独立，$F(n_1, n_2)\sim \frac{\frac{X}{n_1}}{\frac{Y}{n_2}}$。</li><li>$\frac{1}{F}\sim F(n_2, n_1)$。</li><li>上$\alpha$分位数: $P(F&gt;F_\alpha(n_1, n_2)=\alpha$。</li><li>$F_{1-\alpha}(n_1, n_2)=\frac{1}{F_\alpha(n_2, n_1)}$。</li></ul></li><li>正态总体下的抽样分布:<ul><li>$X\sim N(\mu, \sigma^2)$，$\{X_1,\dots,X_n\}$样本，则$E\hat{X}=\mu$，$D\hat{X}=\frac{\sigma^2}{n}$，$\frac{\hat{X}-\mu}{\sigma}\sqrt{n}\sim N(0, 1)$，即$E(S^2)=\sigma^2$。</li><li>$\hat{X}\sim N(\mu, \frac{\sigma^2}{n})$。</li><li>$\frac{(n-1)S^2}{\sigma^2}\sim \chi^2(n-1)$，$\hat{X}$与$S^2$独立。</li><li>$\frac{1}{\sigma^2}\sum_{i=1}^n(X_i-\mu)^2\sim \chi^2(n)$。</li><li>$\frac{\hat{X}-\mu}{S}\sqrt{n}\sim t(n-1)$。</li><li>两个正态总体: $X\sim N(\mu_1, \sigma_1^2)$，$Y\sim N(\mu_2, \sigma_2^2)$，样本$\{X_1,\dots,X_{n_1}\}$，$\{Y_1,\dots,Y_{n_2}\}$，$\begin{cases} \frac{(\hat{X}-\hat{Y})-(\mu_1-\mu_2)}{\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}}\sim N(0, 1)\\\frac{\frac{S_1^2}{\sigma_1^2}}{\frac{S_2^2}{\sigma_2^2}}\sim F(n_1-1, n_2-1)\\ \sigma_1^2=\sigma_2^2=\sigma 时，T=\frac{(\hat{X}-\hat{Y})-(\mu_1-\mu_2)}{\sqrt{\frac{(n_1-1)S_1^2+(n_2-1)S_2^2}{n_1+n_2-2}}\sqrt{\frac{1}{n_1}+\frac{1}{n_2}}}\sim t(n_1+n_2-2) \end{cases}$</li></ul></li></ol><h2 id="参数估计"><a href="#参数估计" class="headerlink" title="参数估计"></a>参数估计</h2><h3 id="点估计"><a href="#点估计" class="headerlink" title="点估计"></a>点估计</h3><ol><li>点估计: 通过一个样本估计总体未知参数。</li><li>矩估计法: 以样本矩的连续函数作为相应的总体矩的连续函数的估计量。$A_n=\frac{1}{n}\sum X_i^2$。</li><li>极大似然估计法:<ul><li>1.写出总体的概率函数或密度函数。</li><li>2.写出似然函数$L(\lambda)=\prod_{i=1}^2\frac{\lambda^{x_i}}{x_i!}e^{-\lambda}$(此处以泊松分布为例，似然函数即将样本观测值代入1.式并连乘)。</li><li>3.需使似然函数取最大值，两边取$ln$。</li><li>4.对$\lambda$求导(此处$\lambda$根据概率函数或者密度函数改变)。</li></ul></li></ol><h3 id="估计量的评选标准"><a href="#估计量的评选标准" class="headerlink" title="估计量的评选标准"></a>估计量的评选标准</h3><ol><li>无偏性:<ul><li>估计的参数的估计值的期望是其真实的值，即$E\hat{\theta}=\theta$。</li><li>总体$X$，$EX=\mu$，$DX=\sigma^2$，$(X_1,\dots,X_n)$，总体与任何分布无关，则$\begin{cases}\hat{X}是\mu的无偏估计，E\hat{X}=\mu。\\样本方差S^2是\sigma^2的无偏估计，ES^2=\sigma^2。\\未修正样本方差S_o^2是\sigma^2的有偏估计。\\n \to \infty，渐进无偏估计。\\ \hat{\theta}是\theta的无偏估计，g(\hat{\theta})不一定是g(\theta)的无偏估计。\\DS=\sigma^2-(ES)^2，ES=\sqrt{\sigma^2-DS}≤\sigma(一般不等于)。 \end{cases}$</li></ul></li><li>有效性: $D(\hat{\theta}_1)≤D(\hat{\theta}_2)$，方差越小越有效。</li><li>相合性(一致性): $\lim \limits_{n \to +\infty}P(|\hat{\theta}-\theta|&lt;\epsilon)=1$。</li></ol><h3 id="区间估计"><a href="#区间估计" class="headerlink" title="区间估计"></a>区间估计</h3><ol><li>置信区间: $[\hat{\theta_1},\hat{\theta_2}]$能套住$\theta$的概率，即以区间估计的区域套住$\theta$的概率。</li><li>枢轴变量: 即通过先确定两个数来确定未知数。<ul><li>$I=I(T, \theta)$，其中$T$已知，$\theta$未知，枢轴变量I的分布F已知且与$\theta$无关。</li><li>给定$1-\alpha$，确定F分布的上$$分位数，上$$分位数，即$P\{V_{1-\frac{\alpha}{2}}≤I(T, \theta)≤V_{\frac{\alpha}{2}}\}=1-\alpha$。</li></ul></li></ol><h3 id="正态总体均值与方差的区间估计"><a href="#正态总体均值与方差的区间估计" class="headerlink" title="正态总体均值与方差的区间估计"></a>正态总体均值与方差的区间估计</h3><ol><li>若给定置信水平$1-\alpha$，$X_1,\dots,X_n$为$N(\mu, \sigma^2)$的样本，已知$\hat{X}$，$S^2$。<ul><li>$\sigma^2$已知，枢轴变量$\frac{\hat{X}-\mu}{\frac{\sigma}{\sqrt{n}}}$，$1-\alpha$的置信区间$(\hat{X}±\frac{\sigma}{\sqrt{n}}z_{\frac{\alpha}{2}})$。</li><li>$\sigma^2$未知，枢轴变量$\frac{\hat{X}-\mu}{\frac{\sigma}{\sqrt{n}}}\sim t(n-1)$，$1-\alpha$的置信区间$(\hat{X}±\frac{S}{\sqrt{n}}t_{\frac{\alpha}{2}}(n-1))$。</li></ul></li><li>单个总体$N(\mu, \sigma^2)$情况表<table><thead><tr><th>估计表</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>$\mu$</td><td>$\sigma^2$已知</td><td>$\frac{\hat{X}-\mu}{\sigma}\sqrt{n}\sim N(0, 1)$</td><td>$[\hat{X}-\frac{\sigma}{\sqrt{n}}\mu_{\frac{\alpha}{2}}, \hat{X}+\frac{\sigma}{\sqrt{n}}\mu_{\frac{\alpha}{2}}]$</td></tr><tr><td>$\mu$</td><td>$\sigma^2$未知</td><td>$\frac{\hat{X}-\mu}{S}\sqrt{n}\sim t(n-1)$</td><td>$[\hat{X}-\frac{S}{\sqrt{n}}t_{\frac{\alpha}{2}}(n-1), \hat{X}+\frac{S}{\sqrt{n}}t_{\frac{\alpha}{2}}(n-1)]$</td></tr><tr><td>$\sigma^2$</td><td>$\mu$已知</td><td>$\frac{1}{\sigma^2}\sum_{i=1}^n(X_i-\mu)^2\sim \chi^2(n)$</td><td>$[\frac{\sum(X_i-\mu)^2}{\chi^2_{\frac{\alpha}{2}}(n)}, \frac{\sum(X_i-\mu)^2}{\chi^2_{1-\frac{\alpha}{2}}(n)}]$</td></tr><tr><td>$\sigma^2$</td><td>$\mu$未知</td><td>$\frac{(n-1)S^2}{\sigma^2}\sim \chi^2(n-1)$</td><td>$[\frac{(n-1)S^2}{\chi^2_{\frac{\alpha}{2}}(n-1)}, \frac{(n-1)S^2}{\chi^2_{1-\frac{\alpha}{2}}(n-1)}]$</td></tr></tbody></table></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学</title>
      <link href="/posts/93e4730e/"/>
      <url>/posts/93e4730e/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/higherMathematics.png"></p><h2 id="函数与极限"><a href="#函数与极限" class="headerlink" title="函数与极限"></a>函数与极限</h2><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><ol><li>$D_f$是定义域(domain)，$R_f$是值域(range)。$x∈X$，对应的 y 是唯一的。（$R_f\subset Y, R_f≠Y$）</li><li>满射：$R_f=Y$。</li><li>单射：$x_1≠x_2, f(x_1)≠f(x_2)$，即x和f(x)唯一对应。</li><li>一一映射：满足单射和满射。</li><li>逆映射：设$f:X→Y$且满足单射，每个$y∈R_f$，有唯一的$x∈X, f(x)=y, g:R_f→X$，则$D_{f^{-1}}=R_f, R_{f^{-1}}=X$。</li><li>复合映射：$g:X→Y_1, f:Y_2→Z$，且$Y_1 \subset Y_2, x∈X$，则$f[g(x)]∈Z$。</li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol><li>函数特性：有界性、单调性、奇偶性和周期性。</li><li>反函数：若$f:D→f(D)$，且满足单射，则$f^{-1}:f(D)→D$。$f$与$f^{-1}$关于$y=x$对称，所以$f$单调增(减)时，$f^{-1}$也单调增(减)。</li><li>复合函数：$y=f(t), t=g(x)$，则$y=f(g(x))$，其中$t=g(x)$的值域必须落在$y=f(t)$的定义域内。</li><li>初等函数：由常数和基本初等函数（幂、指数、对数、三角和反三角函数）经过有限次的四则运算和函数复合所构成的函数。</li></ol><h3 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h3><ol><li>数列极限定义：$\forall \epsilon &gt;0$，$\exists 正整数N$，当$n&gt;N$时，$|x_n-a|&lt;\epsilon$，其中a就是极限，记作$\lim \limits_{n \to \infty} x_n=a$或$x_n \to a(n \to \infty)$。也就是说N是数列中的某一项，$n&gt;N$表示该项后面的所有项，$|x_n-a|&lt;\epsilon$表示该项后面的所有项都落在$\epsilon$那么大的小区域中。</li><li>自变量趋于有限值时函数的极限定义：$\forall \epsilon &gt;0$，$\exists \delta&gt;0$，当$0&lt;|x-x_0|&lt; \delta$时，有$|f(x)-A|&lt;\epsilon$，记作$\lim \limits_{x \to x_0} f(x)=A$或$f(x) \to A(x \to x_0)$。也就是说当x趋于$x_0$时，函数f(x)趋于A，f(x)在$x_0$的去心领域内有定义（注在$x_0$处可以没有定义）。</li><li>自变量趋于无穷大时函数的极限定义：$\forall \epsilon &gt;0$，$\exists X&gt;0$，当$|x|&gt; X$时，有$|f(x)-A|&lt;\epsilon$，记作$\lim \limits_{x \to \infty} f(x)=A$或$f(x) \to A(x \to \infty)$。</li><li>单侧极限：<ul><li>左极限：$\lim \limits_{x \to x_o^-} f(x)=A$，从左边逼近；</li><li>右极限：$\lim \limits_{x \to x_o^+} f(x)=A$，从右边逼近；</li><li>f(x)极限存在。$\Leftrightarrow$左右极限均存在且相等。</li></ul></li><li>极限性质<table><thead><tr><th>类型</th><th>性质</th></tr></thead><tbody><tr><td>数列</td><td>1.极限唯一；<br>2.有界性；<br>3.保号性；<br>4.若数列$\{x_n\}$收敛于a，那么它的任一子数列也收敛，且极限也是a。</td></tr><tr><td>函数</td><td>1.极限唯一；<br>2.局部有界性；<br>3.局部保号性；<br>4.海涅定理：若$\lim \limits_{x \to x_o} f(x)=A$，且$\{x_n\} \to x_0$，则$\lim \limits_{n \to \infty} f(x_n)=\lim \limits_{x \to x_o} f(x)=A$。</td></tr></tbody></table></li></ol><h3 id="无穷小和无穷大"><a href="#无穷小和无穷大" class="headerlink" title="无穷小和无穷大"></a>无穷小和无穷大</h3><ol><li>无穷小定义：$x \to x_0(x \to \infty)$，$f(x)$的极限是0。（0是可以作为无穷小的唯一常数。）</li><li>无穷大定义：$x \to x_0(x \to \infty)$，$f(x)$的极限是$\infty$。</li><li>$f(x)$是无穷小，则$\frac{1}{f(x)}$是无穷大；$f(x)$是无穷大，则$\frac{1}{f(x)}$是无穷小。</li></ol><h3 id="极限运算法则"><a href="#极限运算法则" class="headerlink" title="极限运算法则"></a>极限运算法则</h3><ol><li>有限个无穷小的和(差)是无穷小。</li><li>有界函数与无穷小的乘积是无穷小。</li><li>常数与无穷小的乘积是无穷小。</li><li>有限个无穷小的乘积是无穷小。</li><li>若$\phi(x)≥\psi(x)$，则$\lim \phi(x)≥\lim \psi(x)$。</li><li>$\lim \limits_{x \to \infty} \frac{a_0x^m+a_1x^{m-1}+\cdots+a_m}{b_0x^n+b_1x^{n-1}+\cdots+b_n} = \begin{cases} 0,&amp;当n&gt;m,\\\frac{a_0}{b_0},&amp;当n=m,\\\infty,&amp;当n&lt;m. \end{cases}$</li></ol><h3 id="极限存在准则，两个重要极限"><a href="#极限存在准则，两个重要极限" class="headerlink" title="极限存在准则，两个重要极限"></a>极限存在准则，两个重要极限</h3><ol><li>夹逼准则：$g(x)≤f(x)≤h(x)$，若$\lim g(x)=A$,$\lim h(x)=A$，则$\lim f(x)=A$。</li><li>$\lim \limits_{x \to 0} \frac{sinx}{x}=A$。</li><li>单调有界数列必有极限。</li><li>$\lim \limits_{x \to \infty} (1+\frac{1}{x})^x=e$或$\lim \limits_{x \to 0} (1+x)^\frac{1}{x}=e$。即$(1+0)^\infty$的样子。</li><li>柯西极限存在准则：$\{x_n\}$收敛$\Leftrightarrow$$\forall \epsilon, \exists N, m&gt;N, n&gt;N$时，则$|x_n-x_m|&lt;\epsilon$。即任取某一项N，在该项之后任取两项m和n，他们之间的距离很小。</li></ol><h3 id="无穷小的比较"><a href="#无穷小的比较" class="headerlink" title="无穷小的比较"></a>无穷小的比较</h3><p>无穷小的比较即比较趋向于0的速度快慢。</p><ol><li>$\lim \frac{\beta}{\alpha}=0$，则$\beta$是比$\alpha$高阶的无穷小，记作$\beta=o(\alpha)$。<br> $\lim \frac{\beta}{\alpha}=\infty$，则$\beta$是比$\alpha$低阶的无穷小。<br> $\lim \frac{\beta}{\alpha}=c≠0$，则$\beta$与$\alpha$是同阶无穷小。<br> $\lim \frac{\beta}{\alpha^k}=c≠0$，则$\beta$是关于$\alpha$的k阶无穷小<br> $\lim \frac{\beta}{\alpha}=1$，则$\beta$与$\alpha$是等价无穷小，记作$\alpha\sim\beta$。</li><li>$\beta$与$\alpha$等价。$\Leftrightarrow$$\beta=\alpha+o(\alpha)$。</li><li>$\alpha\sim\widetilde{\alpha}$，$\beta\sim\widetilde{\beta}$，且$\lim \frac{\widetilde{\beta}}{\widetilde{\alpha}}$存在，则$\lim \frac{\beta}{\alpha}=\lim \frac{\widetilde{\beta}}{\widetilde{\alpha}}$</li><li>当$x \to 0$时，求两个无穷小比(做乘除运算)的极限时，分子及分母可用等价无穷小来替换。常用等价替换：<table><thead><tr><th>$sinx\sim x$</th><th>$tanx\sim x$</th></tr></thead><tbody><tr><td>$arcsinx\sim x$</td><td>$arctanx\sim x$</td></tr><tr><td>$ln(1+x)\sim x$</td><td>$e^x-1\sim x$</td></tr><tr><td>$a^x\sim 1+xlna$</td><td>$1-cosx\sim \frac{1}{2}x^2$</td></tr><tr><td>$(1+x)^\frac{1}{n}-1\sim \frac{1}{n}x$</td><td>$(1+x)^\alpha\sim 1+\alpha x$</td></tr></tbody></table></li></ol><h3 id="函数的连续性与间断点"><a href="#函数的连续性与间断点" class="headerlink" title="函数的连续性与间断点"></a>函数的连续性与间断点</h3><ol><li>$\lim \limits_{\Delta x \to 0} \Delta y=\lim \limits_{\Delta x \to 0} [f(x_0+\Delta x)-f(x_0)]=0$。</li><li>$\lim \limits_{x \to x_0} f(x)=f(x_0)$。即连续性的条件为$\begin{cases} 1.在x_0处有极限。\\2.在x_0处有定义。\\3.极限等于函数值。 \end{cases}$</li><li>连续。$\Leftrightarrow$左、右连续。<br> 左连续：$\lim \limits_{x \to x_0^-} f(x)=f(x_0)$。<br> 右连续：$\lim \limits_{x \to x_0^+} f(x)=f(x_0)$。</li><li>间断即不满足连续的条件。间断点类型：<br> 第一类间断点(左右极限都存在)：可去间断点、跳跃间断点。<br> 第二类间断点(左右极限至少一个不存在)：无穷间断点、震荡间断点。</li></ol><h3 id="连续函数的运算与初等函数的连续性"><a href="#连续函数的运算与初等函数的连续性" class="headerlink" title="连续函数的运算与初等函数的连续性"></a>连续函数的运算与初等函数的连续性</h3><ol><li>函数$f(x)$和$g(x)$在点$x_0$连续，则它们的和(差)、积(商)都在点$x_0$处连续。</li><li>如果函数$y=f(x)$在区间$I_x$上单调递增(或单调递减)且连续，那么它的反函数$x=f^{-1}(y)$也在对应的区间$I_y$上单调递(或单调递减)增且连续。</li><li>$y=f[g(x)]$由$u=g(x)$与$y=f(u)$复合而成，若$\lim \limits_{x \to x_0} g(x)=u_0$，而$y=f(u)$在$u=u_0$连续，则$\lim \limits_{x \to x_0} f[g(x)]=\lim \limits_{u \to u_0} f(u)=f(u_0)$。即$\lim \limits_{x \to x_0} f[g(x)]=f[\lim \limits_{x \to x_0} g(x)]$。</li><li>$y=f[g(x)]$由$u=g(x)$与$y=f(u)$复合而成，若$u=g(x)$在$x=x_0$连续，且$g(x_0)=u_0$，而$y=f(u)$在$u=u_0$连续，则$y=f[g(x)]$在$x=x_0$也连续。</li><li>基本初等函数在其定义域内都是连续的；一切初等函数在其定义区间内都是连续的。</li></ol><h3 id="闭区间上连续函数的性质"><a href="#闭区间上连续函数的性质" class="headerlink" title="闭区间上连续函数的性质"></a>闭区间上连续函数的性质</h3><ol><li>在闭区间上连续的函数在该区间上有界且一定能取得它的最大值和最小值。</li><li>零点定理：函数$f(x)$在闭区间$[a, b]$上连续，且$f(a)$与$f(b)$异号（即$f(a)*f(b)&lt;0$），则在开区间$(a, b)$内至少有一点$\xi$，使得$f(\xi)=0$。</li><li>介值定理：函数$f(x)$在闭区间$[a, b]$上连续，且在该区间的端点取不同的函数值$f(a)=A$及$f(b)=B$，则对于A与B之间的任意一个数C，在开区间$(a, b)$内至少有一点$\xi$，使得$f(\xi)=C(a&lt;\xi&lt;b)$。</li><li>在闭区间$[a, b]$上连续的函数$f(x)$的值域为闭区间$[m, M]$，其中m与M依次为$f(x)$在$[a, b]$上的最小值与最大值。</li></ol><h2 id="导数与微分"><a href="#导数与微分" class="headerlink" title="导数与微分"></a>导数与微分</h2><h3 id="导数概念"><a href="#导数概念" class="headerlink" title="导数概念"></a>导数概念</h3><ol><li>由于自变量x的变化引起函数$y=f(x)$变化的“快慢”问题，即函数的变化率称为导数。</li><li>$y=f(x)$在点$x_0$的某个邻域内有定义，当$x$在$x_0$处取得增量$\Delta x$时，$x_0 \to x_0+\Delta x$，$\Delta y = f(x_0+\Delta x)-f(x_0)$。若$\Delta y$与$\Delta x$之比当$\Delta x\to 0$时的极限存在，则称$y=f(x)$在点$x_0$处可导，记为$f^\prime (x_0)$=$\lim \limits_{\Delta x \to 0} \frac{\Delta y}{\Delta x}$=$\lim \limits_{\Delta x \to 0} \frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}$=$\lim \limits_{x \to x_0} \frac{f(x)-f(x_0)}{x-x_0}$或记为$y^\prime |_{x=x_0}$=$\frac{dy}{dx}|_{x=x_0}$=$\frac{df(x)}{dx}|_{x=x_0}$。其中$\frac{dy}{dx}$表示y对x求导。</li><li>单侧导数：<ul><li>左导数：$f^\prime_-$=$\lim \limits_{h \to 0^-} \frac{f(x_0+h)-f(x_0)}{h}$=$\lim \limits_{x \to x_0^-} \frac{f(x)-f(x_0)}{x-x_0}$，从左边逼近；</li><li>右导数：$f^\prime_+$=$\lim \limits_{h \to 0^+} \frac{f(x_0+h)-f(x_0)}{h}$=$\lim \limits_{x \to x_0^+} \frac{f(x)-f(x_0)}{x-x_0}$，从右边逼近；</li><li>可导。$\Leftrightarrow$左右导数均存在且相等。</li></ul></li><li>导数的几何意义：<ul><li>在某一点的导数即该点的切线的斜率，$k_切=f^\prime(x_0)=tan\alpha$，$k_法=-\frac{1}{f^\prime(x_0)}$。</li><li>若$y=f(x)$，$f^\prime(x_0)=\infty$，表切线垂直于x轴。</li></ul></li><li>可导必连续，连续不一定可导。（$\lim \limits_{\Delta x \to 0} \frac{\Delta y}{\Delta x}$存在即可导，$\lim \limits_{\Delta x \to 0} \Delta y=0$即连续。）</li></ol><h3 id="函数的求导法则"><a href="#函数的求导法则" class="headerlink" title="函数的求导法则"></a>函数的求导法则<span id="derivative_formula"></span></h3><ol><li>常数和基本初等函数的导数公式：<table><thead><tr><th>$(C)^\prime=0$</th><th>$(x^\mu)^\prime=\mu x^{\mu-1}$</th></tr></thead><tbody><tr><td>$(a^x)^\prime=a^xlna(a&gt;<br>0, a≠1)$</td><td>$(e^x)^\prime=e^x$</td></tr><tr><td>$(lnx)^\prime=\frac{1}{x}$</td><td>$(log_ax)^\prime=\frac{1}{xlna}(a&gt;<br>0, a≠1)$</td></tr><tr><td>$(sinx)^\prime=cosx$</td><td>$(cosx)^\prime=-sinx$</td></tr><tr><td>$(tanx)^\prime=sec^2x$</td><td>$(cotx)^\prime=-csc^2x$</td></tr><tr><td>$(sec)^\prime=secxtanx$</td><td>$(cscx)^\prime=-cscxcotx$</td></tr><tr><td>$(arcsinx)^\prime=\frac{1}{\sqrt{1-x^2}}$</td><td>$(arccosx)^\prime=-\frac{1}{\sqrt{1-x^2}}$</td></tr><tr><td>$(arctanx)^\prime=\frac{1}{1+x^2}$</td><td>$(arccotx)^\prime=-\frac{1}{1+x^2}$</td></tr><tr><td>$(shx)^\prime=chx$</td><td>$(chx)^\prime=shx$</td></tr><tr><td>$(thx)^\prime=\frac{1}{ch^2x}$</td><td>$(arshx)^\prime=\frac{1}{\sqrt{1+x^2}}$</td></tr><tr><td>$(archx)^\prime=\frac{1}{\sqrt{x^2-1}}$</td><td>$(arthx)^\prime=\frac{1}{1-x^2}$</td></tr></tbody></table></li><li>函数的和、差、积、商的求导法则：<table><thead><tr><th>$(u±v)^\prime=u^\prime±v^\prime$</th><th>$(Cu)^\prime=Cu^\prime(C是常数)$</th></tr></thead><tbody><tr><td>$(uv)^\prime=u^\prime v+uv^\prime$</td><td>$(\frac{u}{v})^\prime=\frac{u^\prime v-uv^\prime}{v^2}$</td></tr></tbody></table></li><li>反函数求导：$x=f(y)$在$I_y$内单调、可导且$f^\prime(y)≠0$，则其反函数$y=f^\prime(x)$在对应区间内也可导，$[f^\prime(x)]^\prime=\frac{1}{f^\prime(y)}$或$\frac{dy}{dx}=\frac{1}{\frac{dx}{dy}}$。即反函数的导数等于直接函数导数的倒数。</li><li>复合函数求导：若$u=g(x)$在点x可导，而$y=f(u)$在点$u=g(x)$可导，则$y=f[g(x)]$在点x可导，$\frac{dy}{dx}=f^\prime(u)·g^\prime(x)$或$\frac{dy}{dx}=\frac{dy}{du}·\frac{du}{dx}$。</li></ol><h3 id="高阶导数"><a href="#高阶导数" class="headerlink" title="高阶导数"></a>高阶导数</h3><ol><li>对函数做n次求导叫做n阶导数，记作$\frac{d^ny}{dx^n}$或$y^{(n)}(x)$。</li><li>常用高阶导数：<table><thead><tr><th>$(a^x)^{(n)}=a^x(lna)^n$</th><th>$(sinx)^{(n)}=sin(x+\frac{n\pi}{2})$</th></tr></thead><tbody><tr><td>$(cosx)^{(n)}=cos(x+\frac{n\pi}{2})$</td><td>$(x^n)^{(n)}=n!$</td></tr><tr><td>$(x^n)^{(n+k)}=0(k=1, 2, \dots)$</td><td>$(uv)^{(n)}=\sum_{k=0}^n C_n^ku^{(n-k)}v^{(k)}$</td></tr><tr><td>$[ln(1+x)]^{(n)}=(-1)^{(n-1)}\frac{(n-1)!}{(1+x)^n}$</td><td></td></tr></tbody></table></li></ol><h3 id="隐函数及参数方程求导"><a href="#隐函数及参数方程求导" class="headerlink" title="隐函数及参数方程求导"></a>隐函数及参数方程求导</h3><ol><li>$y=sinx$类型是显函数，$x+y^3-1=0$类型是隐函数。此处隐函数同时两边对x求导得到$y^\prime=\dots$的型式即可。</li><li>参数方程$\begin{cases} x=\phi(t)\\y=\Phi(t) \end{cases}$，$\frac{dy}{dx}=\frac{\frac{dy}{dt}}{\frac{dx}{dt}}=\frac{\Phi^\prime}{\phi^\prime}$。</li></ol><h3 id="函数的微分"><a href="#函数的微分" class="headerlink" title="函数的微分"></a>函数的微分</h3><ol><li>由于自变量x的微小改变（增量$|\Delta x|$很小时）引起$y=f(x)$的改变量$\Delta y$的近似值问题，即微分问题。</li><li>$y=f(x)$在某区间内有定义，若$x_0 \to x_0+\Delta x$，则$\Delta y=f(x_0+\Delta x)-f(x_0)$（精确值）可表示成$\Delta y=A\Delta x+o(\Delta x)$（近似值，$o(\Delta x)$可忽略不计），A是不依赖$\Delta x$的常数，称$y=f(x)$可微。其中$A\Delta x$叫做$y=f(x)$在点$x_0$相应于$\Delta X$的微分，记作$dy=A\Delta x$。</li><li>可微。$\Leftrightarrow$可导，$dy=f^\prime(x)dx$（$\Delta x=dx$，$A=f^\prime(x)$）。</li></ol><h3 id="函数的微分运算法则"><a href="#函数的微分运算法则" class="headerlink" title="函数的微分运算法则"></a>函数的微分运算法则</h3><p>微分公式与法则都和<a href="#derivative_formula">导数</a>差不多。</p><h3 id="微分的几何意义"><a href="#微分的几何意义" class="headerlink" title="微分的几何意义"></a>微分的几何意义</h3><p>通过$\Delta y=f(x_0+\Delta x)-f(x_0)$与$dy=f^\prime(x_0)\Delta x$作图即可得知。（曲线，切线，$x_0$，$x_0+\Delta x$，$\Delta y$和$dy$）</p><h2 id="微分中值定理与导数的应用"><a href="#微分中值定理与导数的应用" class="headerlink" title="微分中值定理与导数的应用"></a>微分中值定理与导数的应用</h2><h3 id="微分中值定理"><a href="#微分中值定理" class="headerlink" title="微分中值定理"></a>微分中值定理</h3><ol><li>费马引理：$f(x)$在点$x_0$的某邻域$U(x_0)$内有定义，且在$x_0$处可导，若$f(x)≤f(x_0)$（$f(x)≥f(x_0)$），$\forall x∈U(x_0)$，则$f^\prime(x_0)=0$。</li><li>罗尔定理：$f(x)$满足$\begin{cases} 1.在[a, b]上连续。\\2.在(a, b)内可导。\\3.f(a)=f(b)。 \end{cases}$，则至少有一点$\xi∈(a, b)$，使得$f^\prime(\xi)=0$。</li><li>拉格朗日中值定理：$f(x)$满足$\begin{cases} 1.在[a, b]上连续。\\2.在(a, b)内可导。 \end{cases}$，则至少有一点$\xi∈(a, b)$，使得$f(b)-f(a)=f^\prime(\xi)(b-a)$。即$f^\prime(\xi)=\frac{f(b)-f(a)}{b-a}$，相当于求斜率。</li><li>柯西中值定理：$f(x)$及$F(x)$满足$\begin{cases} 1.在[a, b]上连续。\\2.在(a, b)内可导。\\3.\forall x∈(a, b)，F^\prime(x)≠0。 \end{cases}$，则至少有一点$\xi∈(a, b)$，使得$\frac{f(b)-f(a)}{F(b)-F(a)}=\frac{f^\prime(\xi)}{F^\prime(\xi)}$。</li><li>$f(x)$在区间I上连续，在I内可导且导数恒为零，则$f(x)=C$（C为常数）。</li></ol><h3 id="洛必达法则"><a href="#洛必达法则" class="headerlink" title="洛必达法则"></a>洛必达法则</h3><p>若$\begin{cases} 1.当x \to a时，f(x)和F(x) \to 0。\\2.在点a的某去心邻域内，f^\prime(x)及F^\prime(x)都存在且F^\prime≠0。\\3.\lim \limits_{x \to a} \frac{f^\prime(x)}{F^\prime(x)}存在或为无穷大。\\ \end{cases}$，则$\lim \limits_{x \to a} \frac{f(x)}{F(x)}=\lim \limits_{x \to a} \frac{f^\prime(x)}{F^\prime(x)}$。（将条件$x \to a$改为$x \to \infty$同样适用。）</p><h3 id="泰勒公式"><a href="#泰勒公式" class="headerlink" title="泰勒公式"></a>泰勒公式</h3><ol><li>泰勒中值定理1：$f(x)$在$x_0$处有n阶导数，$\exists x_0$的一个邻域，对于该邻域内的任一x，有$f(x)=f(x_0)+f^\prime(x_0)(x-x_0)+\frac{f^{\prime\prime}(x_0)}{2!}(x-x_0)^2+\dots+\frac{f^{(n)}(x_0)}{n!}(x-x_0)^n+R_n(x)$，其中$R_n(x)=o((x-x_0)^n)$。</li><li>泰勒中值定理2：$f(x)$在$x_0$的某个邻域$U(x_0)$内具有(n+1)阶导数，$\forall x∈U(x_0)$，有泰勒中值定理1的公式，其中$R_n(x)=\frac{f^{(n+1)}(\xi)}{(n+1)!}(x-x_0)^{n+1}$($\xi$是$x_0$与$x$之间的某个值)。</li><li>当泰勒中值定理2的公式中$n=0$时，就变成了拉格朗日中值公式。</li><li>当泰勒中值定理1的公式中$x_0=0$时，就变成了带有佩亚诺余项的麦克劳林公式，$f(x)=f(0)+f^\prime(0)x+\frac{f^{\prime\prime}(0)}{2!}x^2+\dots+\frac{f^{(n)}(0)}{n!}x^n+o(x^n)$。</li><li>当泰勒中值定理2的公式中$x_0=0$时，就变成了带有拉格朗日余项的麦克劳林公式，$f(x)=f(0)+f^\prime(0)x+\frac{f^{\prime\prime}(0)}{2!}x^2+\dots+\frac{f^{(n)}(0)}{n!}x^n+\frac{f^{(n+1)}(\theta x)}{(n+1)!}x^{n+1}(0&lt;\theta&lt;1)$。</li></ol><h3 id="函数的单调性与曲线的凹凸性"><a href="#函数的单调性与曲线的凹凸性" class="headerlink" title="函数的单调性与曲线的凹凸性"></a>函数的单调性与曲线的凹凸性</h3><ol><li>$y=f(x)$在$[a, b]$上连续，在$(a, b)$内可导。则在$(a, b)$内$f^\prime(x)≥0$($f^\prime(x)≤0$)，且等号仅在有限多个点处成立，则$y=f(x)$在$[a, b]$上单调增加(减少)。</li><li>$y=f(x)$在$[a, b]$上连续，在$(a, b)$内具有一阶和二阶导数。则在$(a, b)$内$f^{\prime\prime}(x)&gt;0$($f^{\prime\prime}(x)&lt;0$)，$y=f(x)$在$[a, b]$上的图形是凹(凸)的。</li><li>导数为零的点称为驻点或临界点；在$f^{\prime\prime}(x)=0$或二阶导数不存在的点左右异号则该点就是拐点。</li></ol><h3 id="函数的极值与最大值最小值"><a href="#函数的极值与最大值最小值" class="headerlink" title="函数的极值与最大值最小值"></a>函数的极值与最大值最小值</h3><ol><li>$f(x)$在$x_0$处可导，且在$x_0$处取得极值，则$f^\prime(x_0)=0$。</li><li>$f(x)$在$x_0$处连续，且在$x_0$的某去心邻域可导。<ul><li>若$x∈(x_0-\delta, x_0)$时，$f^\prime(x)&gt;0$，而$x∈(x_0, x_0+\delta)$，$f^\prime(x)&lt;0$，则$f(x)$在$x_0$处取得极大值。</li><li>若$x∈(x_0-\delta, x_0)$时，$f^\prime(x)&lt;0$，而$x∈(x_0, x_0+\delta)$，$f^\prime(x)&gt;0$，则$f(x)$在$x_0$处取得极小值。</li><li>若$x∈(x_0-\delta, x_0)\bigcup(x_0, x_0+\delta)$时，$f^\prime(x)$的符号保持不变，则$f(x)$在$x_0$处没有极值。</li></ul></li><li>$f(x)$在$x_0$处具有二阶导数且$f^\prime(x_0)=0$，$f^{\prime\prime}≠0$，则当$f^{\prime\prime}&lt;0$($f^{\prime\prime}&gt;0$)时，$f(x)$在$x_0$处取得极大值(极小值)。</li><li>将驻点及不可导点带入函数取区间上的最大值和最小值就是函数的最大值和最小值。</li></ol><h3 id="函数图形的描绘"><a href="#函数图形的描绘" class="headerlink" title="函数图形的描绘"></a>函数图形的描绘</h3><p>描绘步骤为：</p><ol><li>确定定义域和间断点，判断函数的奇偶性和周期性。</li><li>求$f^\prime(x)$和$f^{\prime\prime}$，根据$f^\prime(x)=0$、$f^{\prime\prime}=0$以及间断点分开区间。</li><li>确定$y=f(x)$的单调增、减区间，求出极值。</li><li>确定$y=f(x)$的凹凸区间和拐点。</li><li>取间断点求渐近线方程，共三种：<ul><li>斜率渐近线：$k=\lim \limits{x \to +\infty} \frac{f(x)}{x}$，$b=\lim \limits{x \to +\infty}[f(x)-kx]$。</li><li>垂直渐近线：$x \to x_0$时，$f(x) \to \infty$，则$x=x_0$就是渐近线。</li><li>水平渐近线：$k=0$时的渐近线。</li></ul></li><li>作表作图。</li></ol><h2 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h2><h3 id="不定积分的概念与性质"><a href="#不定积分的概念与性质" class="headerlink" title="不定积分的概念与性质"></a>不定积分的概念与性质</h3><ol><li>$F^\prime(x)=f(x)$，$F(x)+C$($C$是常数)是原函数，$f(x)$称为导函数。原函数存在的条件为连续函数一定有原函数。</li><li>在区间I上，$f(x)$带有任意常数项的原函数称为$f(x)$（或$f(x)dx$）在区间I上的不定积分，记作$\int f(x){\rm d}x$，即$\int f(x){\rm d}x=F(x)+C$（$C$是常数）。</li><li>不定积分的几何含义：即一组平行的曲线簇。</li><li>不定积分的性质：<table><thead><tr><th>$\int [f(x)+g(x)]{\rm d}x=\int f(x){\rm d}x+\int g(x){\rm d}x$</th></tr></thead><tbody><tr><td>$\int kf(x){\rm d}x=k\int f(x){\rm d}x$</td></tr></tbody></table></li><li>基本积分表：<table><thead><tr><th>$\int k{\rm d}x=kx+C$（$k是常数$）</th><th>$\int x^\mu{\rm d}x=\frac{x^{\mu+1}}{\mu+1}+C$</th></tr></thead><tbody><tr><td>$\int \frac{1}{x}{\rm d}x=ln|x|+C$</td><td>$\int \frac{1}{1+x^2}{\rm d}x=arctanx+C$</td></tr><tr><td>$\int \frac{1}{\sqrt{1-x^2}}{\rm d}x=arcsinx+C$</td><td>$\int cosx{\rm d}x=sinx+C$</td></tr><tr><td>$\int sinx{\rm d}x=-cosx+C$</td><td>$\int sec^2x{\rm d}x=tanx+C$</td></tr><tr><td>$\int csc^2x{\rm d}x=-cotx+C$</td><td>$\int secxtanx{\rm d}x=secx+C$</td></tr><tr><td>$\int cscxcotx{\rm d}x=-cscx+C$</td><td>$\int e^x{\rm d}x=e^x+C$</td></tr><tr><td>$\int a^x{\rm d}x=\frac{a^x}{lna}+C$</td><td>$\int shx{\rm d}x=chx+C$</td></tr><tr><td>$\int chx{\rm d}x=shx+C$</td><td>$\int tanx{\rm d}x=-ln|cosx|+C$</td></tr><tr><td>$\int cotx{\rm d}x=ln|sinx|+C$</td><td>$\int secx{\rm d}x=ln|secx+tanx|+C$</td></tr><tr><td>$\int cscx{\rm d}x=ln|cscx-cotx|+C$</td><td>$\int \frac{1}{a^2+x^2}{\rm d}x=\frac{1}{a}arctan\frac{x}{a}+C$</td></tr><tr><td>$\int \frac{1}{x^2-a^2}{\rm d}x=\frac{1}{2a}ln|\frac{x-a}{x+a}|+C$</td><td>$\int \frac{1}{\sqrt{a^2-x^2}}{\rm d}x=arcsin\frac{x}{a}+C$</td></tr><tr><td>$\int \frac{1}{\sqrt{x^2+a^2}}{\rm d}x=ln(x+\sqrt{x^2+a^2})+C$</td><td>$\int \frac{1}{\sqrt{x^2-a^2}}{\rm d}x=ln|x+\sqrt{x^2-a^2}|+C$</td></tr><tr><td>$\int \sqrt{x^2+a^2}{\rm d}x=\frac{a^2}{2}ln(\sqrt{a^2+x^2}+x)+\frac{x}{2}\sqrt{a^2+x^2}+C$</td><td></td></tr><tr><td>$\int \sqrt{x^2-a^2}{\rm d}x=\frac{a^2}{2}ln(\sqrt{x^2-a^2}+x)+\frac{x}{2}\sqrt{x^2-a^2}+C$</td><td></td></tr></tbody></table></li></ol><h3 id="换元积分法"><a href="#换元积分法" class="headerlink" title="换元积分法"></a>换元积分法</h3><ol><li>第一类换元法：$\int f(\phi(x))\phi^\prime(x){\rm d}x=\int f(\phi(x)){\rm d}\phi(x)=F(\phi(x))+C$。</li><li>第二类换元法：$\int f(x)dx=\int f(\phi(t))\phi^\prime(t)dt=g(t)+C$，其中$t=\phi^{-1}(x)$，因此$g(t)+C$=$g(\phi^{-1}(x))+C$。做题步骤：<ul><li>1.设$x=\phi(t)$，并求积。</li><li>2.将t换回x。（此处可画直角三角形辅助，例$sinx=\frac{x}{a}$，则斜边a、对边x、临边$\sqrt{a^2-x^2}$，$cosx$就等于$\frac{\sqrt{a^2-x^2}}{a}$）</li></ul></li></ol><h3 id="分部积分法"><a href="#分部积分法" class="headerlink" title="分部积分法"></a>分部积分法</h3><ol><li>$\int u {\rm d}v=uv-\int v {\rm d}u$。</li><li>选择$\int u {\rm d}v$中u的优先级顺序：对数函数、反三角函数、幂函数、三角函数和指数函数（对反幂三指，其中对反可以互换，三指也可以互换）。</li></ol><h3 id="有理函数的积分"><a href="#有理函数的积分" class="headerlink" title="有理函数的积分"></a>有理函数的积分</h3><ol><li><p>$R(x)=\frac{P_m(x)}{Q_n(x)}\begin{cases} m≥n，&amp;有理假分式。\\m&lt;n，&amp;有理真分式。 \end{cases}$，其中$P(x)$和$Q(x)$是两个多项式，m和n是多项式的最高次幂。有理假分式需要通过长除法变成有理真分式进行求解。</p></li><li><p>$\frac{A}{(x-a)^n}$型式化成$\frac{A_1}{(x-a)^n}+\frac{A_2}{(x-a)^{n-1}}+\dots+\frac{A_n}{x-a}$；<br> $\frac{Bx+C}{(x^2+px+q)^n}$型式化成$\frac{B_1x+C_1}{(x^2+px+q)^n}+\frac{B_2x+C_2}{(x^2+px+q)^{n-1}}+\dots+\frac{B_nx+C_n}{x^2+px+q}$。</p></li><li><br><table><thead><tr><th></th><th>$\int \frac{1}{ax^2+bx+c}{\rm d}x$</th><th>$\int \frac{dx+e}{ax^2+bx+c}{\rm d}x$</th></tr></thead><tbody><tr><td>b^2-4ac=0</td><td>$a(x-x_1)^2$。</td><td>$a(x-x_1)^2$，将d凑成和分母类似。</td></tr><tr><td>b^2-4ac&gt;0</td><td>$a(x-x_1)(x-x_2)$，化成$\frac{A_1}{x-x_1}+\frac{A_2}{x-x_2}$型式。</td><td>与左边相同。</td></tr><tr><td>b^2-4ac&lt;0</td><td>先配方，然后将d凑成和分母类似。</td><td>与左边相同。</td></tr></tbody></table></li><li><br><table><thead><tr><th>$\int R(sinx, cosx){\rm d}x$</th><th>另$t=tan\frac{x}{2}$。</th></tr></thead><tbody><tr><td>$\int R(tanx){\rm d}x$<br>$\int R(sin^2x, cos^2 x){\rm d}x$<br>$\int R(sin2x, cos2x){\rm d}x$</td><td>另$t=tanx$。</td></tr><tr><td>$\int R(x, \sqrt[n]{\frac{ax+b}{cx+h}}){\rm d}x$</td><td>另$t=\sqrt[n]{\frac{ax+b}{cx+h}}$。</td></tr><tr><td>$\int R(x, \sqrt{ax^2+bx+c}){\rm d}x$</td><td>先配方，然后对根式选择适当的三角变换去掉根式，化为三角函数有理式的积分。</td></tr></tbody></table></li></ol><h2 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h2><h3 id="定积分的概念与性质"><a href="#定积分的概念与性质" class="headerlink" title="定积分的概念与性质"></a>定积分的概念与性质</h3><ol><li>$f(x)$在$[a, b]$上有界，在$[a, b]$上任意插入若干个分点将其分成n个小区间$\Delta x_1,\Delta x_2,\dots,\Delta x_n$，在每个小区间上任取一点$\xi_i$，$I=\lim \limits_{\lambda \to 0} \sum_{i=1}^n f(\xi_i)\Delta x_i$($\lambda=max\{\Delta x_1,\Delta x_2,\dots,\Delta x_n\}$)，称这个极限I为$f(x)$在$[a, b]$上的定积分，记作$\int_a^b f(x){\rm d}x$。就是说若要取一个曲边梯形的面积，则可以用若干个小长方形的面积相加近似的获取其面积。</li><li>$f(x)$在$[a, b]$上连续，则$f(x)$在$[a, b]$上可积。</li><li>$f(x)$在$[a, b]$上有界，且只有有限个间断点，则$f(x)$在$[a, b]$上可积。</li><li>当$b=a$时，则$\int_a^a f(x){\rm d}x=0$。</li><li>$\int_a^b f(x){\rm d}x$=$-\int_b^a f(x){\rm d}x$。</li><li>$\int_a^b [\alpha f(x)+\beta g(x)]{\rm d}x$=$\alpha\int_a^b f(x){\rm d}x$+$\beta\int_a^b g(x){\rm d}x$。</li><li>当$a&lt;c&lt;b$时，$\int_a^b f(x){\rm d}x$=$\int_a^c f(x){\rm d}x$+$\int_c^b f(x){\rm d}x$。</li><li>在$[a, b]$上$f(x)\equiv 1$，则$\int_a^b 1{\rm d}x$=$\int_a^b {\rm d}x$=$b-a$。</li><li>在$[a, b]$上$f(x)≥0$（$f(x)≤0$），则$\int_a^b f(x){\rm d}x≥0$（$\int_a^b f(x){\rm d}x≤0$），其中$a&lt;b$。</li><li>在$[a, b]$上$f(x)≤g(x)$，则$\int_a^b f(x){\rm d}x≤\int_a^b g(x){\rm d}x$，其中$a&lt;b$。</li><li>$|\int_a^b f(x){\rm d}x|≤\int_a^b |f(x)|{\rm d}x$，其中$a&lt;b$。</li><li>若M及m分别是$f(x)$在$[a, b]$上的最大值和最小值，则$m(b-a)≤\int_a^b f(x){\rm d}x≤M(b-a)$，其中$a&lt;b$。</li><li>定积分中值定理：若$f(x)$在$[a, b]$上连续，$\exists \xi∈[a, b]$，使得$\int_a^b f(x){\rm d}x=f(\xi)(b-a)$。</li></ol><h3 id="微积分基本共识"><a href="#微积分基本共识" class="headerlink" title="微积分基本共识"></a>微积分基本共识</h3><ol><li>$f(x)$在$[a, b]$上连续，则积分上限的函数在$[a, b]$上可导，其导数为$\Phi^\prime(x)=\frac{d}{dx}\int_a^xf(t){\rm d}t=f(x)$，其中($a≤x≤b$)。</li><li>$\int_{\psi(x)}^{\phi(x)}[f(t){\rm d}t]^\prime=f(\phi(x))\phi^\prime(x)-f(\psi(x))\psi^\prime(x)$。</li><li>牛顿-莱布尼茨公式：$F(x)$是连续函数$f(x)$在$[a, b]$上的一个原函数，则$\int_a^bf(x){\rm d}x=F(b)-F(a)$。</li></ol><h3 id="定积分的换元法和分部积分法"><a href="#定积分的换元法和分部积分法" class="headerlink" title="定积分的换元法和分部积分法"></a>定积分的换元法和分部积分法</h3><ol><li>$x=\phi(t)$，若$\phi(\alpha)=a$，$\phi(\beta)=b$，则$\int_a^bf(x){\rm d}x=\int_{\alpha}^{\beta}f[\phi(t)]\phi^\prime(t){\rm d}t$。（一定要注意上下限也要替换。）</li><li>$f(x)$在$[-a, a]$上连续且为偶函数，则$\int_{-a}^af(x){\rm d}x=2\int_0^af(x){\rm d}x$；$f(x)$在$[-a, a]$上连续且为奇函数，则$\int_{-a}^af(x){\rm d}x=0$。</li><li>$f(x)$在$[0, 1]$上连续，则$\int_0^{\frac{\pi}{2}}f(sinx){\rm d}x=\int_0^{\frac{\pi}{2}}f(cosx){\rm d}x$，$\int_0^{\pi}xf(sinx){\rm d}x=\frac{\pi}{2}\int_0^{\pi}f(sinx){\rm d}x$。</li><li>$f(x)$是连续的周期函数，则$\int_a^{a+T}f(x){\rm d}x=\int_0^Tf(x){\rm d}x$，$\int_a^{a+nT}f(x){\rm d}x=n\int_0^Tf(x){\rm d}x$（$n∈N$）。</li><li>$\int_a^b u {\rm d}v=[uv]_a^b-\int_a^b v {\rm d}u$。</li></ol><h3 id="反常积分（广义积分）"><a href="#反常积分（广义积分）" class="headerlink" title="反常积分（广义积分）"></a>反常积分（广义积分）</h3><ol><li>无穷限的反常积分：<ul><li>$\int_a^{+\infty}f(x)dx=\lim \limits_{t \to +\infty}\int_a^tf(x){\rm d}x$，若极限存在则收敛，否则发散。</li><li>$\int_{-\infty}^{a}f(x)dx=\lim \limits_{t \to -\infty}\int_t^af(x){\rm d}x$，若极限存在则收敛，否则发散。</li><li>$\int_{-\infty}^{+\infty}f(x)dx=\int_{-\infty}^{0}f(x)dx+\int_{0}^{+\infty}f(x)dx$，若右式均收敛则左式收敛，否则发散。</li></ul></li><li>无界函数的反常积分：（注意函数无定义点。）<ul><li>若$f(x)$在$(a, b]$上连续，则a就是$f(x)$的瑕点。任取$t&gt;a$，则$\int_a^bf(x){\rm d}x=\lim \limits_{t \to a^+}\int_t^bf(x){\rm d}x$。</li><li>若$f(x)$在$[a, b)$上连续，则b就是$f(x)$的瑕点。任取$t&lt;b$，则$\int_a^bf(x){\rm d}x=\lim \limits_{t \to b^-}\int_a^tf(x){\rm d}x$。</li><li>若$f(x)$在$[a, c)$及$(c, b]$上连续，则c就是$f(x)$的瑕点。$\int_a^bf(x){\rm d}x=\int_a^cf(x){\rm d}x+\int_c^bf(x){\rm d}x$。</li></ul></li></ol><h3 id="Gamma-函数"><a href="#Gamma-函数" class="headerlink" title="$\Gamma$函数"></a>$\Gamma$函数</h3><ol><li>$\Gamma(s)$=$\int_0^{+\infty}e^{-x}x^{s-1}{\rm d}x$，其中$s&gt;0$。</li><li>$\Gamma(s+1)$=$s\Gamma(s)$，其中$s&gt;0$。</li><li>$\Gamma(n+1)=n!$。</li></ol><h2 id="定积分的应用"><a href="#定积分的应用" class="headerlink" title="定积分的应用"></a>定积分的应用</h2><h3 id="定积分在几何学上的应用"><a href="#定积分在几何学上的应用" class="headerlink" title="定积分在几何学上的应用"></a>定积分在几何学上的应用</h3><ol><li>平面图形的面积：$A=\int_a^bf(x){\rm d}x$。<ul><li>X型区域：若在x轴的$[a, b]$上$g(x)≤f(x)$，则$S=\int_a^b[f(x)-g(x)]{\rm d}x$。</li><li>Y型区域：若在y轴的$[c, e]$上$g(y)≤f(y)$，则$S=\int_c^e[f(y)-g(y)]{\rm d}y$。</li></ul></li><li>椭圆的面积：$S=\frac{ab\pi}{4}$。<ul><li>根据$sin^2t+cos^2t=1$与$(\frac{x}{a})^2+(\frac{y}{b})^2=1$推出$\begin{cases} x=acost\\y=bsint \end{cases}$，其中$0≤t≤\frac{\pi}{2}$。</li><li>$S=4\int_0^ay{\rm d}x=\int_0^{\frac{\pi}{2}}absin^2t{\rm d}t=\frac{\pi ab}{4}$</li></ul></li><li>极坐标情形：$A=\int_\alpha^\beta\frac{1}{2}[p(\theta)]^2{\rm d}\theta$。</li><li>旋转体的体积：<ul><li>X型区域：若在x轴的$[a, b]$上，$\int_a^b\pi f^2(x){\rm d}x$=$\int_a^bA(x){\rm d}x$。</li><li>Y型区域：若在y轴的$[c, e]$上，$\int_c^e\pi \phi^2(y){\rm d}y$=$\int_c^eA(y){\rm d}y$。</li></ul></li><li>旋转体的侧面积：曲线$y=f(x)≥0$，$a≤x≤b$，绕X轴旋转，得到的旋转体侧面积为$S=\int_a^b2\pi f(x)\sqrt{1+f^{\prime 2}(x)}{\rm d}x$。</li><li>光滑曲线弧是可求长的，求弧长公式为：<ul><li>$\begin{cases} x=\phi(t)\\y=\psi(t) \end{cases}$，其中$\alpha≤t≤\beta$，则$s=\int_\alpha^\beta\sqrt{\phi^{\prime 2}(t)+\psi^{\prime 2}(t)}{\rm d}t$。</li><li>$\begin{cases} x=x\\y=f(x) \end{cases}$，其中$a≤x≤b$，则$s=\int_a^b\sqrt{1+y^{\prime 2}}{\rm d}x$。</li><li>$\rho=\rho(\theta)$，($\alpha≤\theta≤\beta$)，$\begin{cases} x=x(\theta)=\rho(\theta)cos\theta\\y=y(\theta)=\rho(\theta)sin\theta \end{cases}$，$s=\int_\alpha^\beta\sqrt{\rho^2(\theta)+\rho^{\prime 2}(\theta)}{\rm d}\theta$。</li></ul></li></ol><h2 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h2><h3 id="微分方程的基本概念"><a href="#微分方程的基本概念" class="headerlink" title="微分方程的基本概念"></a>微分方程的基本概念</h3><ol><li>通俗说含导数的即微分方程。</li><li>任意常数的个数与微分方程的阶数相同，这样的解叫做微分方程的通解。</li></ol><h3 id="可分离变量的微分方程"><a href="#可分离变量的微分方程" class="headerlink" title="可分离变量的微分方程"></a>可分离变量的微分方程</h3><p>$y^\prime=f(x, y)$化为$g(y){\rm d}y=f(x){\rm d}x$，两边同时作积。</p><h3 id="齐次方程"><a href="#齐次方程" class="headerlink" title="齐次方程"></a>齐次方程</h3><ol><li>齐次方程：$\frac{dy}{dx}=\phi(\frac{y}{x})$，例如：$\frac{dy}{dx}=\frac{1+(\frac{y}{x})^2}{1-2(\frac{y}{x})^2}$，即$\frac{y}{x}$是整体出现的。求解步骤：<ul><li>$u=\frac{y}{x}$。</li><li>$y=xu$。</li><li>$\frac{dy}{dx}=u+x\frac{du}{dx}$。</li><li>分离变量。</li></ul></li><li>可化为齐次方程：$\frac{dy}{dx}=\frac{ax+by+c}{a_1x+b_1y+c_1}$，当$c=c_1$时是其次的，否则是非齐次的。将非齐次化作齐次方程令$x=X+h$，$y=Y+k$，所以$\frac{dY}{dX}=\frac{aX+bY+ah+bk+c}{a_1X+b_1Y+a_1h+b_1k+c_1}$，若方程组$\begin{cases} ah+bk+c=0,\\a_1h+b_1k+c_1=0\end{cases}$中：<ul><li>若$\frac{a_1}{a}≠\frac{b_1}{b}$，则$\frac{dY}{dX}=\frac{aX+bY}{a_1X+b_1Y}$。</li><li>若$\frac{a_1}{a}=\frac{b_1}{b}$，则令$\frac{a_1}{a}=\frac{b_1}{b}=\lambda$，$\frac{dy}{dx}=\frac{ax+by+c}{\lambda(ax+by)+c_1}$，引入变量$v=ax+by$，则$\frac{dv}{dx}=a+b\frac{dy}{dx}$或$\frac{dy}{dx}=\frac{1}{b}(\frac{dv}{dx}-a)$，于是最终方程为$\frac{1}{b}(\frac{dv}{dx}-a)=\frac{v+c}{\lambda v+c_1}$。</li></ul></li></ol><h3 id="一阶线性微分方程"><a href="#一阶线性微分方程" class="headerlink" title="一阶线性微分方程"></a>一阶线性微分方程</h3><p>$\frac{dy}{dx}+P(x)y=Q(x)$称为一阶线性微分方程：</p><ul><li>若$Q(x)\equiv 0$则称为齐次线性微分方程，其通解为$y=Ce^{-\int P(x){\rm d}x}$，其中$C=±e^{C_1}$。</li><li>若$Q(x)≠0$则称为非齐次线性微分方程，另$y=ue^{-\int P(x){\rm d}x}$代入原方程可得到其特解$y=e^{-\int P(x){\rm d}x}(\int Q(x)e^{\int P(x){\rm d}x}{\rm d}x+C)$，其解为通解加上特解为$y=Ce^{-\int P(x){\rm d}x}+e^{-\int P(x){\rm d}x}\int Q(x)e^{\int P(x){\rm d}x}{\rm d}x$。</li></ul><h3 id="可降阶的高阶微分方程"><a href="#可降阶的高阶微分方程" class="headerlink" title="可降阶的高阶微分方程"></a>可降阶的高阶微分方程</h3><ol><li>$y^{(n)}=f(x)$：几阶导就求几次积分。</li><li>$y^{\prime\prime}=f(x, y^\prime)$：设$y^\prime=p$，则$y^{\prime\prime}=p^\prime$，$p^\prime=f(x, p)$，分离变量求积。</li><li>$y^{\prime\prime}=f(y, y^\prime)$：设$y^\prime=p$，则$y^{\prime\prime}=p^\prime=\frac{dp}{dx}=\frac{dp}{dy}\frac{dy}{dx}=p\frac{dp}{dy}$，分离变量求积。</li></ol><h3 id="高阶线性微分方程"><a href="#高阶线性微分方程" class="headerlink" title="高阶线性微分方程"></a>高阶线性微分方程</h3><ol><li>二阶齐次线性方程：$y^{\prime\prime}+P(x)y^\prime+Q(x)y=0$，其解为$y=C_1y_1(x)+C_2y_2(x)$。</li><li>二阶非齐次线性方程：$y^{\prime\prime}+P(x)y^\prime+Q(x)y=f(x)$，设$y^<em>(x)$是特解，$Y(x)$是通解，则其解为$y=Y(x)+y^</em>(x)$。</li></ol><h3 id="常系数齐次线性微分方程"><a href="#常系数齐次线性微分方程" class="headerlink" title="常系数齐次线性微分方程"></a>常系数齐次线性微分方程</h3><p>将$y^{\prime\prime}+P(x)y^\prime+Q(x)y=0$写为$y^{\prime\prime}+py^\prime+qy=0$，求解：</p><table><thead><tr><th>$r^2+pr+q=0$</th><th>$y^{\prime\prime}+P(x)y^\prime+Q(x)y=0$</th></tr></thead><tbody><tr><td>$p^2-4q&gt;0$，$r=\frac{-p±\sqrt{p^2-4q}}{2}$</td><td>$y=C_1e^{r_1x}+C_2e^{r_2x}$</td></tr><tr><td>$p^2-4q=0$，$r=-\frac{p}{2}$</td><td>$y=(C_1+C_2x)e^{r_1x}$</td></tr><tr><td>$p^2-4q&lt;0$，$r=\alpha ±\beta i$，$\alpha=-\frac{p}{2}, \beta=\frac{\sqrt{4q-p^2}}{2}$</td><td>$e^{\alpha x}(C_1cos\beta x+C_2sin\beta x)$</td></tr></tbody></table><h3 id="常系数非齐次线性微分方程"><a href="#常系数非齐次线性微分方程" class="headerlink" title="常系数非齐次线性微分方程"></a>常系数非齐次线性微分方程</h3><ol><li><p>$f(x)=e^{\lambda x}P_m(x)$，其特解为：$y*=e^{\lambda x}Q_m(x)$，</p><ul><li>$\lambda=\begin{cases} 0,&amp;\lambda与特征方程两个特征根均不相等\\1&amp;\lambda与特征方程其中一个特征根相等\\2&amp;\lambda与特征方程两个特征根均相等 \end{cases}$。</li><li>$Q_m(x)$与$P_m(x)$是同次的多项式，例如$P_m(x)=x^2+3$，则$Q_m(x)=ax^2+bx+c$。</li></ul></li><li><p>$f(x)=e^{\lambda x}[P_l(x)cos\psi x+Q_n(x)sin \psi x]$，其特解为：$y^*=x^ke^{\lambda x}[R_m^{(1)}(x)cos\psi x+R_m^{(2)}(x)sin\psi x]$，</p><ul><li>$\lambda=\begin{cases} 0,&amp;\lambda±i\psi不是特征方程的根 \\1,&amp;\lambda±i\psi是特征方程的根 \end{cases}$。</li><li>$P_l(x)$和$Q_n(x)$是两个多项式，$R_m(x)$中的$m=Max\{l, n\}$。</li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数</title>
      <link href="/posts/c23efd5b/"/>
      <url>/posts/c23efd5b/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/linearAlgebra.png"></p><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><h3 id="行列式定义"><a href="#行列式定义" class="headerlink" title="行列式定义"></a>行列式定义</h3><ol><li>$\begin{vmatrix} a&amp;b\\ c&amp;d \end{vmatrix}=ad-bc$</li><li>三阶行列式: 展开式共六项，其中三个正项，三个负项(n 阶行列式展开式共 n! 项)。</li><li>n 阶行列式: 行取自然排列(例123)，列取排列所有可能(例123、132、$\dots$)，不同行不同列取 n 个元素相乘，符号由列标排列逆序数的奇偶决定。</li><li>下三角、上三角和对角形的行列式为主对角线元素相乘。</li><li>山寨下三角、山寨上三角和山寨对角形的行列式为 $(-1)^{\frac{n(n-1)}{2}}$ 与次对角线元素相乘。</li></ol><h3 id="行列式性质"><a href="#行列式性质" class="headerlink" title="行列式性质"></a>行列式性质</h3><ol><li>转置: $D^T=D$</li><li>交换两行(列)，行列式变号。</li><li>两行(列)元素相等，D=0。</li><li>某一行(列)有公因子 k，k 外提一次。<br>所有行(列)都有公因子 k，k 外提 n 次。</li><li>两行(列)元素成比例，D=0。</li><li>某一行(列)元素全为0，D=0。</li><li>某一行(列)元素全是两数之和，拆成两个行列式(只拆该行或列，其余行或列保持不变)。</li><li>某一行(列)乘以一个数加到另一行(列)，D 不变。</li></ol><h3 id="行列式展开"><a href="#行列式展开" class="headerlink" title="行列式展开"></a>行列式展开</h3><ol><li>D = 某一行(列)元素与其代数余子式乘积之和(将$(i, j)$所在的行列划去留下的就是余子式，代数余子式是带符号的余子式，其符号为$(-1)^{i+j}$)。</li><li>异乘变零: 某行(列)元素与其他行(列)的代数余子式乘积之和为0。</li><li>拉普拉斯定理: 任取 k 行(列)，由这 k 行(列)元素组成的所有 k 阶子式与其代数余子式乘积之和为 D(常用于解某一块都是0的行列式)。</li><li>克拉默法则: n 个方程 n 个未知数的方程组，系数行列式若不等于0则有唯一解: $x_i=\frac{D_i}{D}$，其中 $D_i$ 为用常数项替代 i 列，而其他列不变的行列式的值。n 个方程 n 个未知数的齐次方程组，系数行列式若不等于0则有零解；若等于0则有非零解。</li><li>范德蒙德行列式:  $$\begin{vmatrix} 1&amp;1&amp;\cdots&amp;1\\ x_1&amp;x_2&amp;\cdots&amp;x_n\\ \cdots&amp;\cdots&amp;\cdots&amp;\cdots\\ {x_{1}}^{n-1}&amp;{x_{2}}^{n-1}&amp;\cdots&amp;{x_{n}}^{n-1} \end{vmatrix}=\prod_{1≤j&lt;i≤n}(x_i-x_j)$$</li><li>对称行列式主对角线无要求，上下位置对应相等；反对称行列式主对角线全为零，上下位置对应成相反数。</li></ol><h2 id="矩阵及其运算"><a href="#矩阵及其运算" class="headerlink" title="矩阵及其运算"></a>矩阵及其运算</h2><h3 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h3><ol><li>负矩阵: A，-A；n阶方阵: 行数=列数，$A_{n×n}=A_n$；单位阵: 方阵对角线都是1，其余为0，记作E。</li><li>矩阵加(减)法: 同型矩阵，对应元素相加(减)。</li><li>矩阵数乘: kA，用 k 乘以 A 的每个元素。</li><li>矩阵提公因子: 每个元素都有公因子则向外提一次。</li><li>AB 相乘条件: A 的列数=B 的行数。</li><li>C=AB，结果矩阵形状: C 的行数=A 的行数；C 的列数=B 的列数。</li><li>矩阵乘法不满足:<ul><li>AB 一般不等于 BA。</li><li>AB=AC，且 A≠0，推不出 B=C。</li><li>AB=0，推不出 A=0，或 B=0。</li></ul></li><li>与零矩阵相乘: $A_{4×3}O_{3×2}=O_{4×2}$；<br> 与E相乘: $AE=A$，$EB=B$；<br> 运算规则: $\begin{cases}(AB)C=A(BC)\\(A+B)C=AC+BC\\k(A+B)=(kA)B=A(kB)\end{cases}$。</li><li>次幂: $A^k=AA\cdots A$(k 个 A 相乘)。</li><li>$A^m×A^n=A^{m+n}$<br>$(A^m)^n=A^{mn}$<br>$(P^{-1}AP)^n=P^{-1}A^nP$</li><li>$(A^T)^T=A$<br>$(kA)^T=kA^T$<br>$(A+B)^T=A^T+B^T$<br>$(AB)^T=B^TA^T$</li><li>$diag(1, 2, 3)=\begin{bmatrix}1&amp;0&amp;0\\0&amp;2&amp;0\\0&amp;0&amp;3\end{bmatrix}$。</li><li>对称矩阵: $A^T=A$<br>反对称矩阵: $A^T=-A$</li><li>$|A^T|=|A|$<br>$|kA|=k^n|A|$<br>$|AB|=|A||B|$</li><li>分块矩阵求转置分两步:<ul><li>将分块矩阵的块看作普通元素求转置。</li><li>对每一个块求转置。</li><li>$\begin{bmatrix} A_1&amp;0&amp;0&amp;0\\0&amp;A_2&amp;0&amp;0\\0&amp;0&amp;A_3&amp;0\\0&amp;0&amp;0&amp;A_4 \end{bmatrix}$=$\begin{bmatrix} A_1^{-1}&amp;0&amp;0&amp;0\\0&amp;A_2^{-1}&amp;0&amp;0\\0&amp;0&amp;A_3^{-1}&amp;0\\0&amp;0&amp;0&amp;A_4^{-1} \end{bmatrix}$；$H=\begin{bmatrix} A&amp;C\\0&amp;B \end{bmatrix}$，$H^{-1}=\begin{bmatrix} A^{-1}&amp;A^{-1}CB^{-1}\\0&amp;B^{-1} \end{bmatrix}$。</li></ul></li><li>标准形:<ul><li>对角线全0或全1。</li><li>对角线从上到下是连续的1和连续的0。</li><li>可以不是方阵。</li></ul></li></ol><h3 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h3><ol><li>逆矩阵: $AB=BA=E$，逆矩阵一定是方阵。<br>推论: $AB=E$，A, B 均可逆，所以 $A^{-1}=B$, $B^{-1}=A$</li><li>求 $A^{-1}$:<ul><li>伴随矩阵法: $A^{-1}=\frac{1}{|A|}A^*$</li><li>初等变换法: $(\begin{array}{c:c}A&amp;E\end{array}) \longrightarrow (\begin{array}{c:c}E&amp;A^{-1}\end{array})$</li></ul></li><li>$(A^{-1})^{-1}=A$<br>$(AB)^{-1}=B^{-1}A^{-1}$</li><li>$(A^T)^{-1}=(A^{-1})^T$<br>$(kA)^{-1}=\frac{1}{k}A^{-1}$</li><li>$|A^{-1}|=\frac{1}{|A|}$<br>$(A^{-1})^{\ast}=(A^*)^{-1}=\frac{1}{|A|}A$</li><li>A 可逆则 $|A|≠0$。</li></ol><h3 id="伴随矩阵"><a href="#伴随矩阵" class="headerlink" title="伴随矩阵"></a>伴随矩阵</h3><ol><li>按行求代数余子式，按列放，伴随矩阵一定是方阵。</li><li>$AA^{\ast}=A^{\ast}A=|A|E$</li><li>$|A^{\ast}|=|A|^{n-1}$</li><li>$A^{-1}=\frac{1}{|A|}A^{\ast} \longrightarrow A^{\ast}=|A|A^{-1}$</li><li>$R(A^{\ast})=\begin{cases} n,&amp;若 R(A)=n\\ 1,&amp;若 R(A)=n-1\\ 0,&amp;若 R(A)&lt;n-1 \end{cases}$</li></ol><h2 id="矩阵的初等变换"><a href="#矩阵的初等变换" class="headerlink" title="矩阵的初等变换"></a>矩阵的初等变换</h2><h3 id="初等矩阵初等变换"><a href="#初等矩阵初等变换" class="headerlink" title="初等矩阵初等变换"></a>初等矩阵初等变换</h3><ol><li>三种初等行变换，三种初等列变换:<ul><li>交换两行(列)。</li><li>用一个非0数乘某一行(列)。</li><li>某一行(列)的 k 倍加到另一行(列)上去。</li></ul></li><li>等价: AB 是同型矩阵，A 经初等变换得到 B(同型矩阵行列相等)。</li><li>等价: AB 是同型矩阵，存在可逆 P, Q，使得 $PAQ=B$。</li><li>初等矩阵即对E做y一次初等变换得到的矩阵。</li><li>初等矩阵均可逆，其逆矩阵也是初等矩阵，转置矩阵也是初等矩阵。</li><li>初等矩阵左乘 A，相当于对 A 做初等行变换。<br>初等矩阵右乘 A，相当于对 A 做初等列变换。</li><li>初等矩阵 $E(i, j)$ 表示交换 i, j 行。其中 $|E(i, j)|=-1$，$E^{-1}(i, j)=E(i, j)$。<br>初等矩阵 $E(i(k))$ 表示用 k 乘第 i 行。其中 $|E(i(k))|=k$，$E^{-1}(i(k))=E(i(\frac{1}{k}))$。<br>初等矩阵 $E(i, j(k))$ 表示用第 j 行的 k 倍加到第 i 行上。其中 $|E(i, j(k))|=1$，$E^{-1}(i, j(k))=E(i, j(-k))$。</li></ol><h3 id="矩阵的秩"><a href="#矩阵的秩" class="headerlink" title="矩阵的秩"></a>矩阵的秩</h3><ol><li>R(A): 非零子式的最高阶数。</li><li>零矩阵的秩为0。</li><li>$0≤R(A)≤min\{行数, 列数\}$，若$R(A)=min\{行数, 列数\}$则称为满秩，若$R(A)＜min\{行数, 列数\}$则称为降秩。</li><li>若A是方阵且满秩即|A|≠0，则A可逆。</li><li>$R(A)=r \Longleftrightarrow $有一个 r 阶非零子式，所有 r+1 阶子式均为0。</li><li>初等变换(行, 列)不改变矩阵的秩。</li><li>求 R(A)，将 A 化为阶梯型(初等行列变换均可)，数非零行的行数。阶梯型画线横线可跨多个数，竖线只能跨一个数。行简化阶梯型: 在阶梯型的基础上，非零行的首非零元是1；首非零元所在列其余元素是0。</li><li>$R(A)=R(A^T)$</li><li>P, Q 可逆，$R(A)=R(PA)=R(AQ)=R(PAQ)$。</li><li>$max\{R(A), R(B)\}≤R(A, B)≤R(A)+R(B)$</li><li>$R(A+B)≤R(A)+R(B)$</li><li>$R(AB)≤min\{R(A), R(B)\}$</li><li>$A_{m×n}·B_{n×l}=0$，则 $R(A)+R(B)≤n$。</li><li>$A·B=0$，若 A 为列满秩矩阵，则 $B=0$(列满秩矩阵即矩阵的秩等于矩阵的列数)。</li></ol><h2 id="向量组的线性相关性"><a href="#向量组的线性相关性" class="headerlink" title="向量组的线性相关性"></a>向量组的线性相关性</h2><h3 id="向量的线性组合"><a href="#向量的线性组合" class="headerlink" title="向量的线性组合"></a>向量的线性组合</h3><ol><li>$kα=0 \Longleftrightarrow k=0 或 α=0$</li><li>零向量可由任意向量组表示。</li><li>向量组中的一个向量可由该向量组表示。</li><li>任意向量可由单位向量组表示。</li><li>向量组等价: 两向量组可相互表示。</li></ol><h3 id="线性相关-amp-amp-线性无关"><a href="#线性相关-amp-amp-线性无关" class="headerlink" title="线性相关 &amp;&amp; 线性无关"></a>线性相关 &amp;&amp; 线性无关</h3><ol><li>线性相关: 存在不全是0的 $k_1, \cdots, k_n$，使 $kα_1+ \cdots +kα_n=0$。</li><li>线性无关: $kα_1+ \cdots +kα_n=0$ 成立，$k_1, \cdots, k_n$ 全取0。</li></ol><h3 id="线性相关、无关的性质"><a href="#线性相关、无关的性质" class="headerlink" title="线性相关、无关的性质"></a>线性相关、无关的性质</h3><ol><li>向量组中两个向量分量成比例，向量组线性相关。</li><li>一个零向量线性相关，一个非零向量线性无关。</li><li>含零向量的向量组必线性相关。</li><li>部分组线性相关，则整体组线性相关。<br>整体组线性无关，则部分组线性无关。</li><li>向量组线性无关，则接长组线性无关。<br>向量组线性相关，则截短组线性相关。</li><li>n 个 n 维向量线性无关 $\Longleftrightarrow D≠0$<br>n 个 n 维向量线性相关 $\Longleftrightarrow D=0$</li></ol><h3 id="线性相关、无关的定理"><a href="#线性相关、无关的定理" class="headerlink" title="线性相关、无关的定理"></a>线性相关、无关的定理</h3><ol><li>向量线性相关 $\Longleftrightarrow$ 至少一个向量是其余向量的线性组合。</li><li>$α_1, \cdots, α_s$ 线性无关，$α_1, \cdots, α_s, β$ 线性相关，则 β 可由 $α_1, \cdots, α_s$ 唯一线性表示。</li><li>$α_1, \cdots, α_s$ 线性无关，可由 $β_1, \cdots, β_t$ 线性表示，则 $s≤t$。</li><li>$α_1, \cdots, α_s$ 可由 $β_1, \cdots, β_t$ 线性表示，且 $s&gt;t$，则 $α_1, \cdots, α_s$ 线性相关。</li><li>向量个数 &gt; 向量维数，向量组线性相关。</li><li>n+1 个 n 维向量必线性相关。</li><li>等价的线性无关的向量组，含相同个数的向量。</li></ol><h3 id="极大线性无关组"><a href="#极大线性无关组" class="headerlink" title="极大线性无关组"></a>极大线性无关组</h3><ol><li>线性无关组的定义: $α_1, α_2, \cdots, α_r$ 的部分组如 $α_1, α_2$ 无关且每个向量均可由 $α_1, α_2$ 表示。</li><li>线性无关向量组的极大无关组是本身。</li><li>向量组与其极大无关组等价。</li><li>向量组的不同极大无关组含向量个数相同。</li><li>向量组的秩: 极大无关组含向量的个数。</li><li>$0≤R(α_1, \cdots, α_s)≤min\{向量个数, 向量维数\}$</li><li>A 的行秩=A 的列秩= R(A)</li><li>$R(AB)≤min\{R(A), R(B)\}$</li><li>求极大线性无关组:<ul><li>不管向量是行或列，均按行构成矩阵。</li><li>只做初等行变化，化成行最简形矩阵。</li><li>首非零元所在列做极大无关组。</li><li>其余向量表示系数直接写出即可。</li></ul></li></ol><h2 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h2><h3 id="AX-B-有解判定"><a href="#AX-B-有解判定" class="headerlink" title="AX=B 有解判定"></a>AX=B 有解判定</h3><ol><li>$R(A)=R(Ā)=n$，有唯一解($R(Ā)$是带上等式右边的矩阵的秩)。</li><li>$R(A)=R(Ā)&lt;n$，有无穷解。</li><li>$R(A)≠R(Ā)$，无解。</li><li>一般解计算方法:<ul><li>写出Ā。</li><li>通过初等行变化转换成阶梯型。</li><li>判断解的个数。</li><li>化为行简化阶梯型，非零行的首非零元留在等式左边，其余变量留在等式右边得一般解。</li></ul></li></ol><h3 id="AX-0-齐次方程组"><a href="#AX-0-齐次方程组" class="headerlink" title="AX=0 齐次方程组"></a>AX=0 齐次方程组</h3><ol><li>齐次方程组一定有解，至少有零解。</li><li>齐次方程组仅有零解 $\Longleftrightarrow R(A)=n$。</li><li>齐次方程组有非零解 $\Longleftrightarrow R(A)&lt;n$。</li><li>齐次方程组中，方程个数&lt;未知数个数，有非零解。</li><li>齐次方程组中，方程个数=未知数个数，<br>有非零解 $\Longleftrightarrow$ 系数行列式等于零；<br>仅有零解 $\Longleftrightarrow$ 系数行列式不等于零。</li></ol><h3 id="AX-0-解的结构"><a href="#AX-0-解的结构" class="headerlink" title="AX=0 解的结构"></a>AX=0 解的结构</h3><ol><li>$AX=0$ 的两个解相加仍然是解。</li><li>η 是 $AX=0$ 的解，则 cη 也是解。</li><li>$AX=0$ 的解的线性组合仍然是解。</li><li>基础解系: $η_1, \cdots, η_s$ 是解，满足:<ul><li>$η_1, \cdots, η_s$ 线性无关。</li><li>任意解可有 $η_1, \cdots, η_s$ 表示。</li></ul></li><li>$AB=0$，则 $R(A)+R(B)≤n$。</li></ol><h3 id="AX-B-解的结构"><a href="#AX-B-解的结构" class="headerlink" title="AX=B 解的结构"></a>AX=B 解的结构</h3><ol><li>$AX=B \longrightarrow AX=0$(导出组)</li><li>$AX=B$ 的两个解相减是 $AX=0$ 的解。</li><li>$AX=B$ 的一个解和 $AX=0$ 的一个解相加是 $AX=B$ 的另一个解。</li><li>$AX=B$ 的通解: 特解 + 基础解系的线性组合。<ul><li>$AX=B$ 的一个特解。</li><li>$AX=0$ 的基础解系。</li></ul></li></ol><h2 id="相似矩阵及其二次型"><a href="#相似矩阵及其二次型" class="headerlink" title="相似矩阵及其二次型"></a>相似矩阵及其二次型</h2><h3 id="特征值-amp-amp-特征向量"><a href="#特征值-amp-amp-特征向量" class="headerlink" title="特征值 &amp;&amp; 特征向量"></a>特征值 &amp;&amp; 特征向量</h3><ol><li>$Aα=λα$，其中$λ$是特征值，$α$是对应于$λ$的特征向量。特征值可以是零，特征向量是非零向量。</li><li>$|λE-A|=0$，用于求特征值。<br>$(λE-A)X=0$ 的非零解，用于求特征向量。<br>解法:<ul><li>1.写出$|λE-A|$。</li><li>2.把某行尽可能转化为零后再按行展开。</li><li>3.提关于$λ$的公因子。</li><li>4.将$λ$代入$|λE-A|$，做初等行变化转换成行简化阶梯型，计算其基础解系。</li></ul></li><li>A 和 $A^T$ 有相同的特征值。</li><li>$\sum λ_i=\sum a_{ii}$<br>$λ_1, \cdots, λ_n=|A|$</li><li>矩阵的迹 $tr(A)=\sum a_{ii}$</li><li>不同特征值对应的特征向量线性无关(实对称矩阵，不同特征值对应的特征向量一定正交)。</li><li>k 重特征值的线性无关的特征向量个数小于等于 k 个。</li><li>kλ 是 kA 的特征值。</li><li>$λ^k$ 是 $A^k$ 的特征值。</li><li>求 A 的多项式的特征值: A 替换成 λ，E 替换成 1。</li><li>$λ^{-1}$ 是 $A^{-1}$ 的特征值。</li><li>$\frac{1}{λ}|A|$ 是 $A^*$ 的特征值</li></ol><h3 id="相似矩阵"><a href="#相似矩阵" class="headerlink" title="相似矩阵"></a>相似矩阵</h3><ol><li>A, B 是同阶方阵，存在可逆 P，$P^{-1}AP=B$。</li><li>相似矩阵具有反身性，对称性和传递性。</li><li>$A\sim B\begin{cases} A, B 有相同的特征值。\\ |A|=|B|\\ tr(A)=tr(B)\\ |A|和|B| 同时为零或同时不为零，因此 A, B 同时不可逆或同时可逆。\\ A, B 若可逆则 A^{-1}\sim B^{-1}。\\ A^m\sim B^m \end{cases}$</li></ol><h3 id="对角化"><a href="#对角化" class="headerlink" title="对角化"></a>对角化</h3><ol><li>A 相似于对角行 $\Longleftrightarrow$ A 有 n 个线性无关的特征向量。</li><li>A 有 n 个互异特征值，可对角化。</li><li>不管单根，若每个 k 重特征根，都有 k 个特征向量，则可对角化。</li><li>特征向量做列构成 P， 特征值做主对角线构成 A，特征值和特征向量位置对应。</li></ol><h3 id="内积"><a href="#内积" class="headerlink" title="内积"></a>内积</h3><ol><li>$[α, β]=α^Tβ$，若 α, β 是列向量。</li><li>内积是一个数。</li><li>$[α, α]≥0$, $[α, α]=0$ $\Longleftrightarrow$ $α=0$</li><li>$[α, β]=[β, α]$<br>$[kα, β]=k[β, α]=k[α, β]$<br>$[α+β, γ]=[α, γ]+[β, γ]$</li><li>长度 $||α||=\sqrt{[α, α]}$<br>$||α||^2=[α, α]$<br>$[α, α]=||α||^2$</li><li>$||α||≥0$, $||α||=0$ $\Longleftrightarrow$ $α=0$</li><li>$||kα||=|k|·||α||$<br>$|[α, β]|≤||α||·||β||$</li><li>$||α+β||≤||α||+||β||$</li><li>$[α, β]=0$，即正交，$α \bot β$。</li><li>正交向量组: 不含零向量，两两正交。</li><li>标准正交向量组: 正交向量组，每个向量都是单位向量。</li><li>施密特正交化:<br>$α_1, α_2, α_3$ | $β_1, β_2, β_3$<br>$β_1=α_1$<br>$β_2=α_2-\frac{[α_2, β_1]}{[β_1, β_1]}β_1$<br>$β_3=α_3-\frac{[α_3, β_1]}{[β_1, β_1]}β_1-\frac{[α_3, β_2]}{[β_2, β_2]}β_2$<br>$\cdots$</li></ol><h3 id="正交"><a href="#正交" class="headerlink" title="正交"></a>正交</h3><ol><li>A 是方阵，$A^TA=E$，A 为正交矩阵。</li><li>A 正交，$|A|=1 或 -1$，$|A^{-1}|=A^T$。</li><li>A 正交，$A^{-1}$ 和 $A^T$ 也正交。<br>A, B 正交，$AB$ 也正交。</li><li>A 正交，$[Aα, Aβ]=[α, β]$。</li><li>A 正交 $\Longleftrightarrow$ 列(行)向量组是标准正交向量组。</li></ol><h3 id="正交相似"><a href="#正交相似" class="headerlink" title="正交相似"></a>正交相似</h3><ol><li>实对称矩阵 A 的不同特征值的特征向量必正交。</li><li>正交相似: A, B 是同阶方阵，存在正交 P，$P^{-1}AP=B$。</li><li>A 是实对称矩阵，存在正交 Q，$Q^{-1}AQ=\bigwedge$。</li><li>Q: 正交单位化后的特征向量做列。<br>$\bigwedge$: 特征值作为主对角线元素。</li></ol><h3 id="二次型"><a href="#二次型" class="headerlink" title="二次型"></a>二次型</h3><ol><li>二次型 $\longrightarrow$ 矩阵:<ul><li>平方项系数做主对角线。</li><li>交叉项系数除以二放两对称位置。</li></ul></li><li>矩阵 $\longrightarrow$ 二次型:<ul><li>主对角线做平方项系数。</li><li>主对角线右上角元素乘以二做交叉项系数。(如矩阵不对称则先将矩阵化为对称矩阵)</li></ul></li><li>二次型的矩阵对称。</li><li>$X=CY$，线性替换。</li></ol><h3 id="合同"><a href="#合同" class="headerlink" title="合同"></a>合同</h3><ol><li>A, B 是 n 阶方阵，存在可逆 C，$C^TAC=B$。</li><li>合同矩阵具有反身性，对称性和传递性。</li><li>$A\simeq B\begin{cases} R(A)=R(B)\\ A 对称 \Longleftrightarrow B 对称\\ A, B 可逆，A^{-1}\simeq B^{-1}\\ A^T\simeq B^T \end{cases}$</li></ol><h3 id="标准形"><a href="#标准形" class="headerlink" title="标准形"></a>标准形</h3><ol><li>标准形: 只有平方项，没有交叉项。</li><li>标准形不唯一。</li><li>化标准形三种方法:<ul><li>配方法: 先处理 $x_1$，使后边的项中不再出现 $x_1$，再依次对 $x_2, x_3, \cdots, x_n$ 进行配方法处理。</li><li>初等变换法: $(\begin{array}{c:c}A\\E\end{array}) \longrightarrow (\begin{array}{c:c}\bigwedge\\C\end{array})$(对 A, E 做列变换，只对 A 做相应的行变换，$\bigwedge$是对角矩阵即除了对角线以外都是零)。</li><li>正交替换法: 正交 Q，$Q^TAQ=\bigwedge$。，</li></ul></li></ol><h3 id="规范形"><a href="#规范形" class="headerlink" title="规范形"></a>规范形</h3><ol><li>规范形: 只有平方项，系数只能为1, -1, 0，且变量的下标是连着的。(1, -1, 0 系数不可变换位置)</li><li>规范形是唯一的。</li><li>正惯性指数: 规范形的正项个数。<br>负惯性指数: 规范形的负项个数。<br>符号差: 正惯性指数-负惯性指数。</li><li>$A\simeq B$ $\Longleftrightarrow$ 有相同的秩和正惯性指数。</li></ol><h3 id="正定"><a href="#正定" class="headerlink" title="正定"></a>正定</h3><ol><li>二次型 $X^TAX$，任意 $X≠0$:<ul><li>$X^TAX&gt;0$，正定。</li><li>$X^TAX&lt;0$，负定。</li><li>$X^TAX≥0$，半正定。</li><li>$X^TAX≤0$，半负定。</li></ul></li><li>正定二次型经过非退化替换仍化为正定二次型。</li><li>二次型正定 $\Longleftrightarrow$ 标准形每个变量的系数都大于零。</li><li>二次型正定 $\Longleftrightarrow$ 正惯性指数为 n。</li><li>A 正定，$|A|&gt;0$。</li><li>A 正定 $\Longleftrightarrow$ A 的特征值都大于零。</li><li>A 正定 $\Longleftrightarrow$ A 各阶顺序主子式大于零。</li><li>A 正定 $\longrightarrow$ ①$A^{-1}正定$②${A^*正定}$③$A^k正定$④A 主对角线元素都大于零。</li><li>A 正定，B(半)正定 $\longrightarrow$ A+B 正定。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="外提-k"><a href="#外提-k" class="headerlink" title="外提 k"></a>外提 k</h3><ol><li>行列式一行(列)有公因子 k，向外提一次。</li><li>矩阵所有元素都有公因子 k，向外提一次。</li><li>向量所有分量都有公因子 k，向外提一次。</li><li>$|kA|=k^n|A|$</li><li>$(kA)^{-1}=\frac{1}{k}A^{-1}$</li><li>$(kA)^<em>=k^{n-1}A^</em>$</li><li>$(kA)^T=kA^T$</li><li>$[kα, β]=k[α, β]$</li><li>$||kα||=|k|·||α||$</li></ol><h3 id="方阵-A-可逆充要条件"><a href="#方阵-A-可逆充要条件" class="headerlink" title="方阵 A 可逆充要条件"></a>方阵 A 可逆充要条件</h3><ol><li>$|A|≠0$</li><li>A 满秩(R(A)=行，R(A)=列)。</li><li>A 的标准形是 E。</li><li>$A=E_1E_2 \cdots E_s$，$E_i$是初等矩阵。</li><li>A 的所有特征值不为0。</li><li>$R(A)=n$</li><li>A 的行秩=A 的列秩=R(A)=n</li><li>A 的行(列)向量组无关。</li><li>A 的非零子式最高阶数为 n。</li><li>AX=0 只有零解。<br>AX=B 有唯一解。</li></ol><h3 id="等价、相似、正交相似、合同"><a href="#等价、相似、正交相似、合同" class="headerlink" title="等价、相似、正交相似、合同"></a>等价、相似、正交相似、合同</h3><ol><li>$\cong$ 等价: A, B 同型，存在可逆 P, Q，$PAQ=B$。</li><li>$\sim$ 相似: A, B 方阵，存在可逆 P，$P^{-1}AP=B$。</li><li>$\sim$ 正交相似: A, B 方阵，存在正交 P，$P^{-1}AP=B$。</li><li>$\simeq$ 合同: A, B 方阵，存在可逆 P，$P^TAP=B$。</li><li>正交相似肯定相似，且一定合同($P^{-1}=P^T$)。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django(二):ORM</title>
      <link href="/posts/f91e7a1b/"/>
      <url>/posts/f91e7a1b/</url>
      
        <content type="html"><![CDATA[<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>Django ORM 默认使用 SQLite 数据库，它是一款轻型的数据库，是遵守 ACID 的关系型数据库管理系统，它包含在一个相对小的 C 库中。也可以使用其他数据库，例如 MySQL，修改 Django 的默认连接为 MySQL 方式之后，即可通过 Django 的 ORM 操作 MySQL 数据库。</p><h2 id="默认数据库连接"><a href="#默认数据库连接" class="headerlink" title="默认数据库连接"></a>默认数据库连接</h2><p>修改默认数据库连接可以通过修改主目录文件夹下的 settings.py 文件中的 DATABASES 参数。此处以 MySQL 为例，代码如下:</p><pre class=" language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'数据库名'</span><span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token string">'3306'</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果是低版本的 pymysql 连接数据库则还需要再主目录文件夹下的 __init__.py 文件夹中输入如下代码:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqlpymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h2><p>Django 支持在应用的 models.py 中进行数据表的增删改操作，示例代码如下:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment" spellcheck="true"># 此处User在数据库中的表名为user.user，因为该models在user应用下，其中类名会自动小写。</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 此处department在数据库中的字段名为department_id，Django会自动增加_id为尾缀</span>    department <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">"Department"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Department</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span></code></pre><h3 id="字段参考"><a href="#字段参考" class="headerlink" title="字段参考"></a>字段参考</h3><table><thead><tr><th>字段名</th><th>作用</th></tr></thead><tbody><tr><td>models.AutoField</td><td>int 类型=int(11)。如果类中没有 models.AutoField，则默认会创建一个字段名为 id 的自增列，且默认标注为主键。</td></tr><tr><td>models.CharField</td><td>字符串类型=varchar。必须有 max_length 参数。</td></tr><tr><td>models.BooleanField</td><td>boolean 类型=tinyint(1)。不能为空，Blank=True。</td></tr><tr><td>models.ComaSeparatedIntegerField</td><td>用逗号分割的数字=varchar。继承CharField，所以必须 max_length 参数。</td></tr><tr><td>models.DateField</td><td>日期类型=date。对于参数，auto_now=True 则每次更新都会更新这个时间；auto_now_add=True 则只是第一次创建时添加，之后的更新不再改变。</td></tr><tr><td>models.DateTimeField</td><td>日期类型=datetime。同 DateField 的参数。</td></tr><tr><td>models.Decimal</td><td>十进制小数类型=decimal。必须指定整数位 max_digits 和小数位 decimal_places。</td></tr><tr><td>models.EmailField</td><td>字符串类型(正则表达式邮箱)=varchar。对字符串进行邮箱正则表达式验证。</td></tr><tr><td>models.FloatField</td><td>浮点类型=double。</td></tr><tr><td>models.IntegerField</td><td>整型=int。</td></tr><tr><td>models.BigIntegerField</td><td>长整型=bigint。</td></tr><tr><td>models.IPAddressField</td><td>字符串类型(ip4 正则表达式)</td></tr><tr><td>models.GenericIPAddressField</td><td>字符串类型(ip4 或 ip6 正则表达式)。参数 protocol 可以是: both、ipv4 或 ipv6</td></tr><tr><td>models.NullBooleanField</td><td>允许为空的布尔类型。</td></tr><tr><td>models.PositiveIntegerFile</td><td>正 integer。</td></tr><tr><td>models.PositiveSmallIntegerField</td><td>正 smallInteger。</td></tr><tr><td>models.SlugField</td><td>减号、下划线、字母和数字。</td></tr><tr><td>models.SmallIntegerField</td><td>整型，对应数据库中的 tinyint、smallint、int、bigint。</td></tr><tr><td>models.TextField</td><td>字符串类型=longtext。</td></tr><tr><td>models.TimeField</td><td>时间。HH:MM[:ss[.uuuuuu]]。</td></tr><tr><td>models.URLField</td><td>字符串类型(正则表达式地址)。</td></tr><tr><td>models.BinaryField</td><td>二进制=binary。</td></tr><tr><td>models.ImageField</td><td>图片。存储图片名，常与 upload_to 参数连用，设置图片路径。</td></tr><tr><td>models.FilePathField</td><td>文件。存储文件名常与 upload_to 参数连用，设置文件路径。</td></tr><tr><td>models.ForeignKey(其他表类名)</td><td>多对一，参数 on_delete 必须。例如动物和狗，则在狗中添加 ForeignKey。</td></tr><tr><td>models.OneToOneField(其他表类名)</td><td>一对一，参数 on_delete 必须。例如主表和从表，则在从表中添加 OneToOneField。</td></tr><tr><td>models.ManyToManyField(其他表类名)</td><td>多对多。</td></tr></tbody></table><h3 id="参数参考"><a href="#参数参考" class="headerlink" title="参数参考"></a>参数参考</h3><table><thead><tr><th>参数(默认值)</th><th>作用</th></tr></thead><tbody><tr><td>null=True</td><td>数据库中字段是否可以为空，True 可以。</td></tr><tr><td>blank=True</td><td>django 的 admin 中添加数据时是否可允许空值，True 可以。</td></tr><tr><td>primary_key=False</td><td>主键，对 AutoField 设置主键后会代替原来的自增 id 列 ，True 作为主键列。</td></tr><tr><td>auto_now</td><td>自动创建，无论添加或修改都是会修改成当前操作的时间。</td></tr><tr><td>auto_now_add</td><td>自动创建，时间永远是创建时的时间。</td></tr><tr><td>choices</td><td>常用于下拉菜单。例如使用<code>M</code>可以获得<code>Male</code>: <br>class Person(models.Model):<br>　　GENDER_CHOICES = (<br>　　　　　(‘M’, ‘Male’),<br> 　　　　　(‘F’, ‘Female’),<br>　　)<br>　　models.CharField(max_length=2, choices=GENDER_CHOICES)<br>Person(gender=”M”)</td></tr><tr><td>max_length</td><td>最大长度。</td></tr><tr><td>default</td><td>该字段默认值。</td></tr><tr><td>verbose_name</td><td>admin 中字段的显示名称。</td></tr><tr><td>name</td><td>db_column</td></tr><tr><td>unique=True</td><td>是否允许重复，True 不允许。</td></tr><tr><td>db_index=True</td><td>是否允许数据库索引，True 允许。</td></tr><tr><td>editable=True</td><td>在 admin 里是否可编辑。</td></tr><tr><td>error_messages=None</td><td>错误信息提示，True 允许。</td></tr><tr><td>auto_created=False</td><td>自动创建，True 允许。</td></tr><tr><td>help_text</td><td>在 admin 中提示帮助信息。</td></tr><tr><td>upload_to</td><td>常用于设置文件、图片的上传路径。</td></tr><tr><td>on_delete</td><td>有CASCADE、PROTECT、SET_NULL、SET_DEFAULT、SET()五个可选择的值。<br>CASCADE: 级联删除，常用。<br>PROTECT: 报完整性错误。<br>SET_NULL: 把外键设置为 null，前提是允许为 null。<br>SET_DEFAULT: 为外键设置默认值。<br>SET(): 此调用其他值，可以是一个函数。</td></tr></tbody></table><h2 id="数据行操作"><a href="#数据行操作" class="headerlink" title="数据行操作"></a>数据行操作</h2><p>进行数据库行操作时，首先需要导入该模块的 models。例如导入 user 模块的 models，代码如下:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> user <span class="token keyword">import</span> models</code></pre><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><ul><li><p>自动提交(传对应参数)</p><pre class=" language-python"><code class="language-python">  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">)</span></code></pre></li><li><p>自动提交(传字典，字典中 key 与数据库字段名一一对应)</p><pre class=" language-python"><code class="language-python">  user_info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"123456"</span><span class="token punctuation">}</span>  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>user_info<span class="token punctuation">)</span></code></pre></li><li><p>手动提交</p><pre class=" language-python"><code class="language-python">  obj <span class="token operator">=</span> models<span class="token punctuation">.</span>objects<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">)</span>  obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre class=" language-python"><code class="language-python">models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul><li><p>自动提交</p><pre class=" language-python"><code class="language-python">  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>password<span class="token operator">=</span><span class="token string">'654321'</span><span class="token punctuation">)</span></code></pre></li><li><p>手动提交</p><pre class=" language-python"><code class="language-python">  obj <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">)</span>  obj<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">'654321'</span>  obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li><p>根据条件查找单个</p><pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true"># 查找 username 为 root 的用户</span>  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">)</span></code></pre></li><li><p>查找所有</p><pre class=" language-python"><code class="language-python">  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>查找所有，但只取 values 参数中选定的列</p><pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true"># 只取 username 列</span>  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span></code></pre></li><li><p>查找所有，但只取 values_list 参数中选定的列，并返回一个 list(默认 tuple)。</p><pre class=" language-python"><code class="language-python">  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values_list<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">)</span></code></pre></li><li><p>获取所查表行数。</p><pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true"># 查 user 表一共有多少条数据</span>  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>根据条件查找。</p><pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true"># 查找 id = 1 的</span>  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查找 id > 1 的</span>  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id__gt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查找 id &lt; 1 的</span>  models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id__lt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="自定义-SQL-语句操作"><a href="#自定义-SQL-语句操作" class="headerlink" title="自定义 SQL 语句操作"></a>自定义 SQL 语句操作</h3><p>获取 django.db.connection 后，直接通过 pymysql 进行操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> connectioncursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 增加(插入一条数据成功返回主键，失败返回0)</span><span class="token keyword">def</span> <span class="token function">create_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token string">"insert语句"</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取插入的数据 id</span>        result <span class="token operator">=</span> connection<span class="token punctuation">.</span>insert_id<span class="token punctuation">(</span><span class="token punctuation">)</span>        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> ex<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"插入异常: "</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span>        connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token comment" spellcheck="true"># 增加(插入多条数据成功返回更新条数，失败返回0)</span><span class="token keyword">def</span> <span class="token function">create_many</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token string">"insert语句"</span>    info_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"321"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>createmany_sql<span class="token punctuation">,</span> info_list<span class="token punctuation">)</span>        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> ex<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"插入异常: "</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span>        connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token comment" spellcheck="true"># 更新一条数据，返回影响条数</span><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token string">"update|delete语句"</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>rowcount        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> ex<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"更新异常: "</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span>        connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token comment" spellcheck="true"># 查询数据，返回查询的数据，失败返回None</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token string">"selete语句"</span>    result <span class="token operator">=</span> None    <span class="token keyword">try</span><span class="token punctuation">:</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 查询单条用fetchone，查询多条用fetchall</span>        result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> ex<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"查找异常: "</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> transaction<span class="token keyword">with</span> transaction<span class="token punctuation">.</span>atomic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    数据库操作语句</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django(一):简介</title>
      <link href="/posts/d3057ef/"/>
      <url>/posts/d3057ef/</url>
      
        <content type="html"><![CDATA[<h2 id="MTV-框架模式"><a href="#MTV-框架模式" class="headerlink" title="MTV 框架模式"></a>MTV 框架模式</h2><p>Django 是一个遵循 MVC 设计模式的框架，采用了 MTV 的框架模式(T 即 Template)，其中控制器接受用户输入的部分由框架自行处理，因此 Django 更关注模板部分。</p><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><p>Django 所需命令可以通过<code>django-admin help</code>查看所拥有的命令，使用<code>django-admin help 命令名字</code>可以查看该命令如何使用。</p><h3 id="Django-目录结构"><a href="#Django-目录结构" class="headerlink" title="Django 目录结构"></a>Django 目录结构</h3><ul><li>templates: 存放视图文件。</li><li>static: 存放静态文件。</li><li>django_temp: 存放项目相关文件。<ol><li>settings.py: 项目相关配置。</li><li>urls.py: 路由配置。</li></ol></li><li>user: 存放应用模块相关文件。<ol><li>admin.py: 后台管理相关配置。</li><li>dao.py: 数据库操作相关。</li><li>models.py: 自定义类，并根据类创建数据库表。</li><li>tests.py: 单元测试。</li><li>views.py: 业务处理。</li></ol></li></ul><h3 id="配置静态文件夹"><a href="#配置静态文件夹" class="headerlink" title="配置静态文件夹"></a>配置静态文件夹</h3><p>在 settings 中配置静态文件夹，代码如下:</p><pre class=" language-python"><code class="language-python">STATIC_URL <span class="token operator">=</span> <span class="token string">'/static/'</span>STATICFILES_DIRS <span class="token operator">=</span> <span class="token punctuation">[</span>    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="配置模板文件夹"><a href="#配置模板文件夹" class="headerlink" title="配置模板文件夹"></a>配置模板文件夹</h3><p>在 settings 中配置模板文件夹，修改<code>DIRS</code>中的<code>templates</code>即可修改模板文件夹位置。代码如下:</p><pre class=" language-python"><code class="language-python">TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.template.backends.django.DjangoTemplates'</span><span class="token punctuation">,</span>        <span class="token string">'DIRS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'templates'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">,</span>        <span class="token string">'APP_DIRS'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'context_processors'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token string">'django.template.context_processors.debug'</span><span class="token punctuation">,</span>                <span class="token string">'django.template.context_processors.request'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.auth.context_processors.auth'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.messages.context_processors.messages'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="创建一个应用"><a href="#创建一个应用" class="headerlink" title="创建一个应用"></a>创建一个应用</h3><p>首先通过命令<code>python manage.py startapp 名字</code>创建应用。其次在 settings 中添加新增的应用即可。例如新创建的应用名为 user，代码如下:</p><pre class=" language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>    <span class="token string">'user'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><ol><li><p>在 urls.py 中的<code>urlpatterns</code>新增路由即可。path 中第一个参数为 URI 映射位置，后一个参数为需要映射到的服务位置(方法)，代码如下:</p><pre class=" language-python"><code class="language-python"> urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>     path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>     path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> user_controller<span class="token punctuation">.</span>login<span class="token punctuation">)</span><span class="token punctuation">,</span>     path<span class="token punctuation">(</span><span class="token string">'register/'</span><span class="token punctuation">,</span> user_controller<span class="token punctuation">.</span>register<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span></code></pre></li><li><p>URL 也可以动态匹配，常用于 RESTful 设计风格。函数只需多加变量，即可获得该匹配的 URI 地址，代码如下:</p><pre class=" language-python"><code class="language-python"> urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token comment" spellcheck="true"># 匹配0和任意整数</span>     path<span class="token punctuation">(</span><span class="token string">'user/&lt;int:uid>/'</span><span class="token punctuation">,</span> user_controller<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 匹配除了'/'以外的非空字符串</span>     path<span class="token punctuation">(</span><span class="token string">'user/&lt;str:username>/'</span><span class="token punctuation">,</span> user_controller<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 匹配任意由 ASCII 字母或数字以及连字符和下划线组成的短标签</span>     path<span class="token punctuation">(</span><span class="token string">'user/&lt;slug:username>/'</span><span class="token punctuation">,</span> user_controller<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>uid<span class="token punctuation">)</span></code></pre></li><li><p>项目主文件夹的 urls.py 还可以通过 include() 函数包含其他子文件夹的路由映射。例如在主文件中包含 user 文件夹下的 urls.py，此时所有 user 文件夹下的路径都会加上<code>user/</code>的前缀:</p><pre class=" language-python"><code class="language-python"> <span class="token comment" spellcheck="true"># main.py</span> <span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin <span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>     path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>     path<span class="token punctuation">(</span><span class="token string">'user/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">"user.urls"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"> <span class="token comment" spellcheck="true"># user文件夹下的 urls.py</span> <span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path <span class="token keyword">from</span> user<span class="token punctuation">.</span>views <span class="token keyword">import</span> login<span class="token punctuation">,</span> register<span class="token punctuation">,</span> index<span class="token punctuation">,</span> temp urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>     path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> login<span class="token punctuation">)</span><span class="token punctuation">,</span>     path<span class="token punctuation">(</span><span class="token string">'register/'</span><span class="token punctuation">,</span> register<span class="token punctuation">)</span><span class="token punctuation">,</span>     path<span class="token punctuation">(</span><span class="token string">'index/'</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">,</span>     path<span class="token punctuation">(</span><span class="token string">'temp/&lt;str:slug>/'</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span></code></pre></li><li><p>path 可以取别名，此时在前端页面可以通过花括号内% url 名字 [参数] %的形式调用。当目录过深时，会使用别名取代长路径，代码如下:</p><pre class=" language-python"><code class="language-python"> urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>     path<span class="token punctuation">(</span><span class="token string">'temp/&lt;str:slug>/'</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span></code></pre><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url 名字 参数%}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     花括号内输入% csrf_token % <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>411</code></pre></li></ol><h3 id="初始化-Django-数据库"><a href="#初始化-Django-数据库" class="headerlink" title="初始化 Django 数据库"></a>初始化 Django 数据库</h3><ol><li><p>Django 拥有自带的数据库，但此处使用 Mysql 数据库为例(需要安装 mysqlclient)，在应用的<code>models.py</code>中通过表创建数据库。此处建立一个 User 表，代码如下:</p><pre class=" language-python"><code class="language-python"> <span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>     username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span></code></pre></li><li><p>通过命令行输入<code>python manage.py makemigrations</code>保存修改在本地。</p></li><li><p>输入<code>python manage.py migrate</code>提交本地修改至数据库，即可完成建表操作。</p></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="Django-CSRF-提交问题"><a href="#Django-CSRF-提交问题" class="headerlink" title="Django CSRF 提交问题"></a>Django CSRF 提交问题</h3><p>Django 中设置防跨站请求伪造功能，当用 POST 提交数据的时候，Django 会去检查是否有一个 CSRF 的随机字符串，如果没有则会报错(Forbidden 403)。</p><ol><li><p>在表单中通过 POST 方法提交出现问题，则需要再表单中输入花括号内包含<code>% csrf_token %</code>即可完成完成操作。代码如下:</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 花括号内输入% csrf_token % <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li><li><p>通过 AJAX 提交 POST 请求，需要在 data 中添加<code>csrfmiddlewaretoken</code>数据即可完成提交。代码如下:</p><pre class=" language-js"><code class="language-js"> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     url<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>     type<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>     data<span class="token punctuation">:</span> <span class="token punctuation">{</span>         csrfmiddlewaretoken<span class="token punctuation">:</span> <span class="token string">"{{ csrf_token }}"</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="支持-PUT-和-DELETE"><a href="#支持-PUT-和-DELETE" class="headerlink" title="支持 PUT 和 DELETE"></a>支持 PUT 和 DELETE</h3><p>支持 PUT 和 DELETE 请求，修改 ajaxSetup 函数即可。代码如下:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">csrfSafeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token regex">/^(GET|HEAD|OPTIONS|TRACE)$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>$<span class="token punctuation">.</span><span class="token function">ajaxSetup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    beforeSend<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">,</span> settings<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">csrfSafeMethod</span><span class="token punctuation">(</span>settings<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>crossDomain<span class="token punctuation">)</span> <span class="token punctuation">{</span>            xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"X-CSRFToken"</span><span class="token punctuation">,</span> <span class="token string">"{{ csrf_token }}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>后台获取 DELETE 和 PUT 请求携带的参数代码如下:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> QueryDictQueryDict<span class="token punctuation">(</span>request<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"参数名"</span><span class="token punctuation">)</span></code></pre><h3 id="session-存储对象"><a href="#session-存储对象" class="headerlink" title="session 存储对象"></a>session 存储对象</h3><p>session 存储对象需要对对象进行序列化。Django 中用 session 序列化对象需要在 settings.py 中添加如下代码:</p><pre class=" language-python"><code class="language-python">SESSION_SERIALIZER <span class="token operator">=</span> <span class="token string">'django.contrib.sessions.serializers.PickleSerializer'</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python:邮件发布</title>
      <link href="/posts/e1959e59/"/>
      <url>/posts/e1959e59/</url>
      
        <content type="html"><![CDATA[<p>Python 邮件发送模板。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMETextsmtp_obj <span class="token operator">=</span> None<span class="token comment" spellcheck="true"># QQ邮箱host</span>host <span class="token operator">=</span> <span class="token string">"smtp.qq.com"</span><span class="token comment" spellcheck="true"># QQ邮箱port</span>port <span class="token operator">=</span> <span class="token number">465</span>password <span class="token operator">=</span> <span class="token string">""</span><span class="token comment" spellcheck="true"># 邮件内容</span>content <span class="token operator">=</span> <span class="token string">"内容"</span><span class="token comment" spellcheck="true"># MIMIE邮件体</span>message <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 邮件标题</span>message<span class="token punctuation">[</span><span class="token string">"Subject"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"标题"</span>message<span class="token punctuation">[</span><span class="token string">"From"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1398524980@qq.com"</span>message<span class="token punctuation">[</span><span class="token string">"To"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1134177664@qq.com"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 基于SSL安全协议和发送邮件</span>    smtp_obj <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 邮件发送人验证</span>    smtp_obj<span class="token punctuation">.</span>login<span class="token punctuation">(</span>message<span class="token punctuation">[</span><span class="token string">"From"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span>    smtp_obj<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>message<span class="token punctuation">[</span><span class="token string">"From"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> message<span class="token punctuation">[</span><span class="token string">"To"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"发送失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    smtp_obj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"发送成功"</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot(十):分布式</title>
      <link href="/posts/c7a1f9a1/"/>
      <url>/posts/c7a1f9a1/</url>
      
        <content type="html"><![CDATA[<h2 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h2><ul><li><p>单一应用架构<br>  当网站流量很小时，只需一个应用将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。<br>  <strong>缺点: 性能扩展难、不利于维护升级、协同开发问题较大。</strong></p></li><li><p>垂直应用架构<br>  当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的 Web 框架(MVC)是关键。<br>  <strong>缺点: 公用模块无法重复利用。</strong></p></li><li><p>分布式服务架构<br>  当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(Remote Procedure Call, RPC)是关键。在分布式系统中，国内常用 Dubbo + ZooKeeper 组合，而 Spring Boot 推荐使用全栈的 Spring、Spring Boot 以及Spring Cloud。</p></li><li><p>流动计算架构<br>  当服务越来越多，容量的评估，小服务资源的浪费等现象逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(Service-Oriented Architecture, SOA)是关键。<br>  <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/architectureRoadMap.jpg"></p></li></ul><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>因网络是不可靠的，所以微服务架构(分布式架构)有着四个核心的问题:</p><ol><li><strong>客户端如何访问？</strong></li><li><strong>服务之间如何通信？</strong></li><li><strong>如果治理大量的服务？</strong></li><li><strong>如何解决服务奔溃的问题？</strong></li></ol><p><strong>解决方案一</strong>: Spring Cloud NetFlix，一站式解决方案，但是已经无限期停止维护。</p><ol><li>API 网关使用 Zuul 组件。</li><li>Feign 基于 HttpClient 开发，而 HttpClient 是基于 HTTP 的通信方式，它是同步并阻塞的。</li><li>服务注册与发现使用 Eureka 框架。</li><li>熔断机制使用 Hystrix，服务降级用的是 Feign。</li></ol><p><strong>解决方案二</strong>: Apache Dubbo ZooKeeper，不完善。</p><ol><li>API 网关无，需要寻找第三方或者自己实现。</li><li>基于 RPC 实现 Dubbo 用于服务通信。</li><li>服务注册与发现使用 ZooKeeper。</li><li>熔断机制无，记住了 Hystrix。</li></ol><p><strong>解决方案三</strong>: Spring Cloud Alibaba，一站式解决方案。</p><p><strong>解决方案四</strong>：服务网格(Server Mesh) + 代表解决方案(istio)</p><h2 id="Apache-ZooKeeper-Dubbo"><a href="#Apache-ZooKeeper-Dubbo" class="headerlink" title="Apache ZooKeeper Dubbo"></a>Apache ZooKeeper Dubbo</h2><h3 id="ZooKeeper-简介"><a href="#ZooKeeper-简介" class="headerlink" title="ZooKeeper 简介"></a>ZooKeeper 简介</h3><p>ZooKeeper 是一个分布式的，开放源码的分布式应用程序协调服务(即注册中心)。它是一个为分布式应用提供一致性服务的软件，提供的功能包括: 配置维护、域名服务、分布式同步和组服务等。</p><h3 id="Dubbo-简介"><a href="#Dubbo-简介" class="headerlink" title="Dubbo 简介"></a>Dubbo 简介</h3><p><a href="http://dubbo.apache.org/zh-cn/docs/user/quick-start.html" target="_blank" rel="noopener">Dubbo</a> 是 Alibaba 开源的分布式服务框架(已捐献 Apache)，是一款高性能、轻量级的开源 Java RPC 框架，它提供了三大核心能力: 面向接口的远程方法调用、智能容错和负载均衡以及服务自动注册和发现。</p><blockquote><p>RPC(Remote Procedure Call)是指远程调用过程，是一种进程间的通信方式，它是一种技术思想而不是规范。它允许程序调用另一个地址空间(通常是共享网络的另一台机器上)的过程或函数，而不是程序员显式编码这个远程调用的细节。使用 RPC 时，无论是调用本地还是远程的函数，本质上编写的调用代码基本相同。RPC 包含两个核心模块：通讯(共享网络的机器通信方式)和序列化(数据的序列化传输)。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/dubbo-architecture.png"></p><ol><li>Provider: 暴露服务的服务提供者，服务提供者在启动时向注册中心注册自己提供的服务。</li><li>Consumer: 调用远程服务的服务消费者，服务消费者在启动时向注册中心订阅自己所需的服务，基于软负载均衡算法从注册中心所给的提服务提供者地址列表中选一台提供者进行调用，如果调用失败则选择其他的服务提供者。</li><li>Registry: 注册中心返回服务提供方地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>Monitor: 服务消费者和提供者在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据刀监控中心。</li></ol><h3 id="Spring-Boot-集成"><a href="#Spring-Boot-集成" class="headerlink" title="Spring Boot 集成"></a>Spring Boot 集成</h3><ol><li><p>父类 Maven 项目 dubbo，仅用于控制模块的依赖版本。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>duubo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>provider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>consumer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot-version</span><span class="token punctuation">></span></span>2.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot-version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dubbo-version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dubbo-version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dubbo-dependencies-version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dubbo-dependencies-version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-boot-version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${dubbo-version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${dubbo-dependencies-version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>项目模块 provider，用于继承父类依赖实现出票功能。</p><ol><li><p>依赖引用。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>duubo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>provider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>duubo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置注册中心相关信息以及服务提供者所在位置，并通过<code>@DubboService</code>注解暴露服务。</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">dubbo</span><span class="token punctuation">:</span>   <span class="token key atrule">application</span><span class="token punctuation">:</span>     <span class="token key atrule">name</span><span class="token punctuation">:</span> provider<span class="token punctuation">-</span>ticket   <span class="token key atrule">registry</span><span class="token punctuation">:</span>     <span class="token key atrule">address</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">2181</span>   <span class="token key atrule">scan</span><span class="token punctuation">:</span>     <span class="token key atrule">base-packages</span><span class="token punctuation">:</span> com.kuukokawaii.service</code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:42  * @Description 出票服务  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 获得票      * @return String      */</span>     String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:42  * @Description 出票 service 实现  */</span> <span class="token annotation punctuation">@Service</span> <span class="token annotation punctuation">@DubboService</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"取到票了！！"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:47  * @Description 主程序  */</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token annotation punctuation">@EnableDubbo</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProviderApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol></li><li><p>项目模块 consumer，用于继承父类依赖调用 provider 模块的出票功能。</p><ol><li><p>依赖引用。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>duubo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>consumer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>duubo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置注册中心地址。</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">dubbo</span><span class="token punctuation">:</span>   <span class="token key atrule">application</span><span class="token punctuation">:</span>     <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer<span class="token punctuation">-</span>ticket   <span class="token key atrule">registry</span><span class="token punctuation">:</span>     <span class="token key atrule">address</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">2181</span> <span class="token key atrule">server</span><span class="token punctuation">:</span>   <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span></code></pre></li><li><p>consumer 模块通过<code>@DubboReference</code>注解远程引用 provider 模块的服务则需要先编写服务接口，必须是与 provider 模块服务接口相同的全限定名。例如此处的<code>com.kuukokawaii.service.TicketService;</code>。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 11:21  * @Description 远程调用出票服务  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 出票服务      * @return 出票String      */</span>     String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Reference<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 11:22  * @Description 用户 service  */</span> <span class="token annotation punctuation">@Service</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@DubboReference</span>     TicketService ticketService<span class="token punctuation">;</span>     <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> ticketService<span class="token punctuation">.</span><span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol></li></ol><h2 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h2><ul><li><p>Spring Cloud 是一个分布式的整体解决方案。Spring Cloud 为开发者提供了在分布式系统中快速构建的工具，使用 Spring Cloud 的开发者可以快速的启动服务或构建应用、同时能够快速和云平台资源进行对接。</p></li><li><p>Spring Cloud 分布式开发五大常用组件:</p><ol><li>Spring Cloud Config: 分布式配置。</li><li>Eureka: 服务发现。</li><li>Zuul: 服务网关。</li><li>Hystrix: 断路器。</li><li>Ribbon: 客户端负载均衡。</li><li>Feign: 在 Ribbon 的基础上采用接口方式实现客户端负载均衡。</li></ol></li><li><p>Spring Cloud 对配置管理、服务发现、熔断、路由、微代理、控制总线、一次性 token、全局锁、leader 选举、分布式 session 和集群管理等问题都提供了相应的解决方案。</p></li></ul><h3 id="父类依赖"><a href="#父类依赖" class="headerlink" title="父类依赖"></a>父类依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>zuul-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>provider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>consumer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud-version</span><span class="token punctuation">></span></span>Hoxton.SR7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud-version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot-version</span><span class="token punctuation">></span></span>2.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot-version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud-version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-boot-version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h3 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h3><ol><li><p>引入依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置 YAML 文件。</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">profiles</span><span class="token punctuation">:</span>     <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token punctuation">---</span> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev   <span class="token key atrule">application</span><span class="token punctuation">:</span>     <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>server   <span class="token key atrule">devtools</span><span class="token punctuation">:</span>     <span class="token key atrule">livereload</span><span class="token punctuation">:</span>       <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">20000</span>   <span class="token key atrule">cloud</span><span class="token punctuation">:</span>     <span class="token key atrule">config</span><span class="token punctuation">:</span>       <span class="token key atrule">server</span><span class="token punctuation">:</span>         <span class="token key atrule">git</span><span class="token punctuation">:</span>           <span class="token key atrule">uri</span><span class="token punctuation">:</span> 配置文件 git uri           <span class="token key atrule">username</span><span class="token punctuation">:</span> git 账号           <span class="token key atrule">password</span><span class="token punctuation">:</span> git 密码 <span class="token key atrule">server</span><span class="token punctuation">:</span>   <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10000</span></code></pre></li><li><p>开启 Config Server。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:20  * @Description Spring Cloud Config Server  */</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token annotation punctuation">@EnableConfigServer</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigServerApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConfigServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h3><ol><li><p>引入依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>engineering_certification<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用<code>bootstrap.yml</code>访问本地 Config Server 获取配置信息。</p><p> 本地<code>bootstrap.yml</code>配置:</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">cloud</span><span class="token punctuation">:</span>     <span class="token key atrule">config</span><span class="token punctuation">:</span>       <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>server       <span class="token key atrule">label</span><span class="token punctuation">:</span> master       <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev       <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">10000</span></code></pre><p> 代码托管仓库的配置文件:</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">profiles</span><span class="token punctuation">:</span>     <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token punctuation">---</span> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev   <span class="token key atrule">application</span><span class="token punctuation">:</span>     <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>server   <span class="token key atrule">devtools</span><span class="token punctuation">:</span>     <span class="token key atrule">livereload</span><span class="token punctuation">:</span>       <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">20001</span> <span class="token key atrule">server</span><span class="token punctuation">:</span>   <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10001</span> <span class="token key atrule">eureka</span><span class="token punctuation">:</span>   <span class="token key atrule">instance</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 注册中心 IP 地址</span>     <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost   <span class="token key atrule">client</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 当前服务不注册至服务中心</span>     <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>     <span class="token comment" spellcheck="true"># 是否去注册中心获取其它服务地址</span>     <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>     <span class="token key atrule">service-url</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 注册中心访问地址</span>       <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/</code></pre></li><li><p>开启 Eureka Server。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:25  * @Description Eureka 注册中心  */</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token annotation punctuation">@EnableEurekaServer</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaServerApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h3 id="Zuul-Hystrix-Dashboard"><a href="#Zuul-Hystrix-Dashboard" class="headerlink" title="Zuul + Hystrix Dashboard"></a>Zuul + Hystrix Dashboard</h3><ol><li><p>引入依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zuul-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-zuul<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- Hystrix 监控器需要引入 dashboard 和 actuator 两个依赖 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用<code>bootstrap.yml</code>访问本地 Config Server 获取配置信息。</p><p> 本地<code>bootstrap.yml</code>配置:</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">cloud</span><span class="token punctuation">:</span>     <span class="token key atrule">config</span><span class="token punctuation">:</span>       <span class="token key atrule">name</span><span class="token punctuation">:</span> zuul<span class="token punctuation">-</span>gateway       <span class="token key atrule">label</span><span class="token punctuation">:</span> master       <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev       <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">10000</span></code></pre><p> 代码托管仓库的配置文件:</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">profiles</span><span class="token punctuation">:</span>     <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token punctuation">---</span> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev   <span class="token key atrule">application</span><span class="token punctuation">:</span>     <span class="token key atrule">name</span><span class="token punctuation">:</span> zuul<span class="token punctuation">-</span>gateway   <span class="token key atrule">devtools</span><span class="token punctuation">:</span>     <span class="token key atrule">livereload</span><span class="token punctuation">:</span>       <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span> <span class="token key atrule">server</span><span class="token punctuation">:</span>   <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span> <span class="token key atrule">eureka</span><span class="token punctuation">:</span>   <span class="token key atrule">client</span><span class="token punctuation">:</span>     <span class="token key atrule">service-url</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 注册中心地址</span>       <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>10001/eureka/   <span class="token key atrule">instance</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 该服务注册至服务中心的实例 id</span>     <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>     <span class="token comment" spellcheck="true"># 点击注册中心的实例时会显示该服务所在的 ip 地址</span>     <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">zuul</span><span class="token punctuation">:</span>   <span class="token key atrule">routes</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 映射注册在服务中心的服务(如果该服务有消费者，则只需要配置消费者，消费者会调用服务提供者)</span>     <span class="token key atrule">consumer</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 网关请求地址与注册中心服务的映射</span>       <span class="token key atrule">path</span><span class="token punctuation">:</span> /consumer/**       <span class="token comment" spellcheck="true"># 过滤客户端请求中的和该配置项匹配的headers</span>       <span class="token key atrule">sensitiveHeaders</span><span class="token punctuation">:</span> Cookie<span class="token punctuation">,</span>Set<span class="token punctuation">-</span>Cookie   <span class="token comment" spellcheck="true"># 禁用默认路由，只能使用配置的路由。</span>   <span class="token key atrule">ignored-services</span><span class="token punctuation">:</span> <span class="token string">'*'</span>   <span class="token comment" spellcheck="true"># 网关在进行请求路由转发前为请求设置 Host 头信息。</span>   <span class="token key atrule">add-host-header</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>   <span class="token key atrule">dashboard</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 允许能监控的列表</span>     <span class="token key atrule">proxy-stream-allow-list</span><span class="token punctuation">:</span> <span class="token string">"*"</span></code></pre></li><li><p>Zuul 配置。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:30  * @Description zuul 配置  */</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZuulConfig</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * zuul 跨域配置      * @return FilterRegistrationBean&lt;CorsFilter>      */</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> FilterRegistrationBean<span class="token operator">&lt;</span>CorsFilter<span class="token operator">></span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         CorsConfiguration corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         corsConfiguration<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span>3600L<span class="token punctuation">)</span><span class="token punctuation">;</span>         source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> corsConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>         CorsFilter corsFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>         FilterRegistrationBean<span class="token operator">&lt;</span>CorsFilter<span class="token operator">></span> filterRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>corsFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>         filterRegistrationBean<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> filterRegistrationBean<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>开启 Zuul 网关和 Hystrix 监控器。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:30  * @Description Zuul 网关  */</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token annotation punctuation">@EnableZuulProxy</span> <span class="token annotation punctuation">@EnableHystrixDashboard</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZuulGatewayApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ZuulGatewayApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h3 id="provider-服务提供者-熔断"><a href="#provider-服务提供者-熔断" class="headerlink" title="provider 服务提供者(熔断)"></a>provider 服务提供者(熔断)</h3><ol><li><p>引入依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>provider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用<code>bootstrap.yml</code>访问本地 Config Server 获取配置信息。</p><p> 本地<code>bootstrap.yml</code>配置:</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">cloud</span><span class="token punctuation">:</span>     <span class="token key atrule">config</span><span class="token punctuation">:</span>       <span class="token key atrule">name</span><span class="token punctuation">:</span> provider       <span class="token key atrule">label</span><span class="token punctuation">:</span> master       <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev       <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">10000</span></code></pre><p> 代码托管仓库的配置文件:</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">profiles</span><span class="token punctuation">:</span>     <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token punctuation">---</span> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev   <span class="token key atrule">application</span><span class="token punctuation">:</span>     <span class="token key atrule">name</span><span class="token punctuation">:</span> provider   <span class="token key atrule">devtools</span><span class="token punctuation">:</span>     <span class="token key atrule">livereload</span><span class="token punctuation">:</span>       <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">21001</span> <span class="token key atrule">server</span><span class="token punctuation">:</span>   <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">11001</span> <span class="token key atrule">eureka</span><span class="token punctuation">:</span>   <span class="token key atrule">instance</span><span class="token punctuation">:</span>     <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>     <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token key atrule">client</span><span class="token punctuation">:</span>     <span class="token key atrule">service-url</span><span class="token punctuation">:</span>       <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>10001/eureka/</code></pre></li><li><p>Hystrix 监控器配置。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:36  * @Description Hystrix 监控配置  */</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixMetricsConfig</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> ServletRegistrationBean<span class="token operator">&lt;</span>HystrixMetricsStreamServlet<span class="token operator">></span> <span class="token function">hystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         ServletRegistrationBean<span class="token operator">&lt;</span>HystrixMetricsStreamServlet<span class="token operator">></span> servletRegistrationBean <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/actuator/hystrix.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         servletRegistrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"provider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> servletRegistrationBean<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>提供的服务。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:37  * @Description provider 服务接口  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProviderService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 取票      * @return String      */</span>     String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:38  * @Description provider 服务实现类  */</span> <span class="token annotation punctuation">@Service</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ProviderService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"取票"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:40  * @Description provider 控制层  */</span> <span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderController</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> ProviderService providerService<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">ProviderController</span><span class="token punctuation">(</span>ProviderService providerService<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>providerService <span class="token operator">=</span> providerService<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 取票      * @return 取票 String      */</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>     <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"getTicketHystrix"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> providerService<span class="token punctuation">.</span><span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * getTicket 服务熔断方法      * @return String      */</span>     <span class="token keyword">public</span> String <span class="token function">getTicketHystrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"出票失败，服务熔断"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>开启熔断机制和 Eureka 客户端。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:32  * @Description Provider 服务提供者  */</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token annotation punctuation">@EnableCircuitBreaker</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProviderApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h3 id="consumer-服务使用者"><a href="#consumer-服务使用者" class="headerlink" title="consumer 服务使用者"></a>consumer 服务使用者</h3><p>Feign 和 Ribbon 二选一。</p><h4 id="Feign-版本"><a href="#Feign-版本" class="headerlink" title="Feign 版本"></a>Feign 版本</h4><ol><li><p>引入依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>consumer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用<code>bootstrap.yml</code>访问本地 Config Server 获取配置信息。平时不需要注册 consumer，但是使用网关时需要向注册中心注册 consumer。</p><p> 本地<code>bootstrap.yml</code>配置:</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">cloud</span><span class="token punctuation">:</span>     <span class="token key atrule">config</span><span class="token punctuation">:</span>       <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer       <span class="token key atrule">label</span><span class="token punctuation">:</span> master       <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev       <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">10000</span></code></pre><p> 代码托管仓库的配置文件:</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">profiles</span><span class="token punctuation">:</span>     <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token punctuation">---</span> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev   <span class="token key atrule">application</span><span class="token punctuation">:</span>     <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer   <span class="token key atrule">devtools</span><span class="token punctuation">:</span>     <span class="token key atrule">livereload</span><span class="token punctuation">:</span>       <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">22001</span> <span class="token key atrule">server</span><span class="token punctuation">:</span>   <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">12001</span> <span class="token key atrule">eureka</span><span class="token punctuation">:</span>   <span class="token key atrule">instance</span><span class="token punctuation">:</span>     <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>     <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token key atrule">client</span><span class="token punctuation">:</span>     <span class="token key atrule">service-url</span><span class="token punctuation">:</span>       <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>10001/eureka/ <span class="token key atrule">feign</span><span class="token punctuation">:</span>   <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>     <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre></li><li><p>调用服务并且编写服务降级代码。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:34  * @Description provider 服务提供者 Feign  */</span> <span class="token annotation punctuation">@Service</span> <span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"PROVIDER"</span><span class="token punctuation">,</span>     fallbackFactory <span class="token operator">=</span> ProviderClientServiceFallBackFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProviderClientService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 取票      * @return 取票 String      */</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>     String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:35  * @Description provider 服务提供者 Feign  */</span> <span class="token annotation punctuation">@Component</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderClientServiceFallBackFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span><span class="token operator">&lt;</span>ProviderClientService<span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> ProviderClientService <span class="token function">create</span><span class="token punctuation">(</span>Throwable cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// new ProviderClientService 并实现</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"出票失败，服务降级"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:36  * @Description provider feign 控制器  */</span> <span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderClientController</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> ProviderClientService providerClientService<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">ProviderClientController</span><span class="token punctuation">(</span>ProviderClientService providerClientService<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>providerClientService <span class="token operator">=</span> providerClientService<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 取票      * @return 取票 String      */</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>     String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> providerClientService<span class="token punctuation">.</span><span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>开启 Feign 客户端(包含了开启服务降级和 Eureka 客户端)。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:37  * @Description consumer 入口  */</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token annotation punctuation">@EnableFeignClients</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h4 id="Ribbon-版本"><a href="#Ribbon-版本" class="headerlink" title="Ribbon 版本"></a>Ribbon 版本</h4><ol><li><p>引入依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>consumer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用<code>bootstrap.yml</code>访问本地 Config Server 获取配置信息。</p><p> 本地<code>bootstrap.yml</code>配置:</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">cloud</span><span class="token punctuation">:</span>     <span class="token key atrule">config</span><span class="token punctuation">:</span>       <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer       <span class="token key atrule">label</span><span class="token punctuation">:</span> master       <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev       <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">10000</span></code></pre><p> 代码托管仓库的配置文件:</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">profiles</span><span class="token punctuation">:</span>     <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token punctuation">---</span> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev   <span class="token key atrule">application</span><span class="token punctuation">:</span>     <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer   <span class="token key atrule">devtools</span><span class="token punctuation">:</span>     <span class="token key atrule">livereload</span><span class="token punctuation">:</span>       <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">22001</span> <span class="token key atrule">server</span><span class="token punctuation">:</span>   <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">12001</span> <span class="token key atrule">eureka</span><span class="token punctuation">:</span>   <span class="token key atrule">instance</span><span class="token punctuation">:</span>     <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>     <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token key atrule">client</span><span class="token punctuation">:</span>     <span class="token key atrule">service-url</span><span class="token punctuation">:</span>       <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>10001/eureka/</code></pre></li><li><p>调用服务并且编写 Ribbon 配置类。Ribbon 的降级和服务提供者的熔断一样，需要在程序入口使用<code>@EnableHystrix</code>，并在方法上使用<code>@HystrixCommand</code>。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:39  * @Description Ribbon 配置  */</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonConfig</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 给 RestTemplate 配置 Ribbon 的负载均衡      * @return RestTemplate      */</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token annotation punctuation">@LoadBalanced</span>     <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:40  * @Description provider feign 控制器  */</span> <span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderClientController</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> RestTemplate restTemplate<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * 服务提供者的服务名，Ribbon 通过服务名查找服务      */</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PROVIDER_SERVER_NAME <span class="token operator">=</span> <span class="token string">"http://PROVIDER/"</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">ProviderClientController</span><span class="token punctuation">(</span>RestTemplate restTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate <span class="token operator">=</span> restTemplate<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 取票      * @return 取票 String      */</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>     String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>PROVIDER_SERVER_NAME <span class="token operator">+</span> <span class="token string">"/get"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>开启 Eureka 客户端。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/6 10:38  * @Description consumer 入口  */</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot(九):安全</title>
      <link href="/posts/3a6ce76f/"/>
      <url>/posts/3a6ce76f/</url>
      
        <content type="html"><![CDATA[<h2 id="安全机制"><a href="#安全机制" class="headerlink" title="安全机制"></a>安全机制</h2><p>安全机制主要包含认证(注册主体)和授权(访问权限控制)两个区域的控制。</p><ol><li>认证: 是建立一个声明主体的过程(主体通常指用户、设备或一些可以在应用程序中执行动作的其他系统)。</li><li>授权: 确定一个主体是否允许在应用程序中执行一个动作的过程(授权前主体的身份必须通过了认证过程的建立)。</li></ol><h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><h3 id="Security-简介"><a href="#Security-简介" class="headerlink" title="Security 简介"></a>Security 简介</h3><p>Spring Security 是针对 Spring 项目的安全框架，也是 Spring Boot 底层安全模块默认的技术选型。它可以实现强大的 Web 安全控制，对于安全控制，只需引入<code>spring-boot-starter-security</code>模块并进行少量的配置即可实现安全管理。</p><h3 id="Security-主要部分"><a href="#Security-主要部分" class="headerlink" title="Security 主要部分"></a>Security 主要部分</h3><p>主要由<code>WebSecurityConfigurerAdapter</code>、<code>AuthenticationManagerBuilder</code>和<code>@EnableWebSecurity</code>三部分组成。</p><ul><li><code>WebSecurityConfigurerAdapter</code>: 自定义安全策略。</li><li><code>AuthenticationManagerBuilder</code>: 自定义认证策略。</li><li><code>@EnableWebSecurity</code>: 开启 Spring Security 支持。</li></ul><h3 id="Spring-Boot-集成-Security"><a href="#Spring-Boot-集成-Security" class="headerlink" title="Spring Boot 集成 Security"></a>Spring Boot 集成 Security</h3><ol><li><p>引入依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 注意 security 版本 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-springsecurity5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写自定义安全策略配置类，并通过<code>@EnableWebSecurity</code>注解开启 Spring Security 支持。</p><blockquote><ol><li>OAuth 2.0 是一个安全框架，用于控制对受保护资源(例如应用程序或文件集)的授权。</li><li>OpenID Connect 建立在 OAuth 2.0协议的基础上，并使用附加的JSON Web令牌(JWT)来标准化OAuth 2.0可以选择的区域，例如范围和端点发现。它专门针对用户身份验证，并广泛用于启用用户在消费者网站和移动应用程序上的登录。</li><li>与 JWT 相比，SAML 独立于 OAuth，它依赖于消息交换以 XML SAML 格式进行身份验证。它更常用于帮助企业用户使用一次登录登录多个应用程序。</li></ol></blockquote><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/4 19:22  * @Description Security 配置类  */</span> <span class="token annotation punctuation">@EnableWebSecurity</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> UserDetailsService userDetailsService<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">SecurityConfig</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userDetailsServiceImpl"</span><span class="token punctuation">)</span> UserDetailsService userDetailsService<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService <span class="token operator">=</span> userDetailsService<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 授权      * @param http http 安全控制      * @throws Exception 异常      */</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">/*          * 1. 放行静态资源          *    antMatchers("/static/**").permitAll()          * 2. 拥有角色才能访问 hasAnyRole(其中的任意角色)，此处数据库中角色名必须使用 ROLE_XX 的格式，并且此处只需填写 XX          *    antMatchers("/index").hasRole("ADMIN")          * 3. 拥有权限才能访问 hasAnyAuthority(其中的任意权限)          *    antMatchers("/user/add").hasAuthority("USER:ADD")          * 4. formLogin().loginPage("/login")          *    使用表单登录方式，默认登录页面，没有权限默认跳转至登陆页面(其它可选openidLogin、saml2Login、oauth2Login)          * 5. 注销操作          *    logout().logoutSuccessUrl("/login")          * 6. 开启记住我功能          *    rememberMe()          * 7. 关闭跨站请求伪造(不关闭可能导致 get、post 登出出现问题)          *    csrf().disable()          */</span>         http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/static/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"ADMIN"</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token string">"USER:ADD"</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>      <span class="token operator">*</span> 认证      <span class="token operator">*</span> <span class="token annotation punctuation">@param</span> auth AuthenticationManagerBuilder      <span class="token operator">*</span> @<span class="token keyword">throws</span> Exception 异常      <span class="token operator">*</span><span class="token operator">/</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 使用 jdbc 获取用户权限信息并设置加密方式</span>         auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userDetailsService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>实现自定义加载数据库权限方式。<a id="UserDetailsService"></a></p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/4 19:26  * @Description 从数据库加载用户信息  */</span> <span class="token annotation punctuation">@Service</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> UserDAO userDAO<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> PermissionDAO permissionDAO<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> RoleDAO roleDAO<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">UserDetailsServiceImpl</span><span class="token punctuation">(</span>UserDAO userDAO<span class="token punctuation">,</span> PermissionDAO permissionDAO<span class="token punctuation">,</span> RoleDAO roleDAO<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>userDAO <span class="token operator">=</span> userDAO<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>permissionDAO <span class="token operator">=</span> permissionDAO<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>roleDAO <span class="token operator">=</span> roleDAO<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> UsernameNotFoundException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 此处传递过来的 username 实际为 account</span>         UserDO userDO <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">getUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>userDO <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span>username <span class="token operator">+</span> <span class="token string">"账号不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 获取用户权限信息</span>         List<span class="token operator">&lt;</span>RoleDO<span class="token operator">></span> roleList <span class="token operator">=</span> roleDAO<span class="token punctuation">.</span><span class="token function">listRolesByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>         List<span class="token operator">&lt;</span>GrantedAuthority<span class="token operator">></span> grantedAuthorities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 提取 userPermissionList 中的权限名</span>         roleList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>role <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 添加角色</span>             grantedAuthorities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             List<span class="token operator">&lt;</span>PermissionDO<span class="token operator">></span> permissionList <span class="token operator">=</span> permissionDAO<span class="token punctuation">.</span><span class="token function">listPermissionByRoleId</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             permissionList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>permission <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 添加权限</span>                 String permissionDescription <span class="token operator">=</span> permission<span class="token punctuation">.</span><span class="token function">getPermissionCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 GrantedAuthority grantedAuthority <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>permissionDescription<span class="token punctuation">)</span><span class="token punctuation">;</span>                 grantedAuthorities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>grantedAuthority<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 返回 UserDetails 信息</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>             userDO<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             userDO<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             userDO<span class="token punctuation">.</span><span class="token function">getEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             userDO<span class="token punctuation">.</span><span class="token function">getNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             userDO<span class="token punctuation">.</span><span class="token function">getCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             userDO<span class="token punctuation">.</span><span class="token function">getAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             grantedAuthorities         <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>在 HTML 界面显示授权信息。</p><pre class=" language-html"><code class="language-html"> <span class="token doctype">&lt;!DOCTYPE html></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>sec</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org/extras/spring-security<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/bootstrap.min.css}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 是否认证，如果认证成功了则不显示登陆超链接 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登陆页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 是否认证，如果认证成功了则显示注销超链接和认证信息 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>账号: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">sec:</span>authentication</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>所有身份信息: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">sec:</span>authentication</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>principal.authorities<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/logout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注销<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 是否拥有管理员权限，有则显示管理员功能 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hasRole(<span class="token punctuation">'</span>ADMIN<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hasAuthority(<span class="token punctuation">'</span>USER:ADD<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/add}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hasAuthority(<span class="token punctuation">'</span>USER:DELETE<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/delete}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="Security-OAuth2-JWT"><a href="#Security-OAuth2-JWT" class="headerlink" title="Security OAuth2 + JWT"></a>Security OAuth2 + JWT</h3><p>Spring Boot 集成 Security OAuth2 认证框架，并使用 JWT 作为安全令牌。</p><ol><li><p>引入依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-oauth2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置 <code>WebSecurityConfigurerAdapter</code>。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2020/8/20 0:04  * @Description web 安全配置，全部移交网关进行配置，包括资源服务安全配置  */</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 加密机制      * @return BCryptPasswordEncoder      */</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> PasswordEncoder <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> AuthenticationManager <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 安全拦截机制（登出由客户端自行删除 token）      * @param http http 信息      * @throws Exception 异常      */</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         http             <span class="token comment" spellcheck="true">// session 设置无状态</span>             <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span>SessionCreationPolicy<span class="token punctuation">.</span>STATELESS<span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 关闭 csrf 攻击保护并开启 cors 跨域共享</span>             <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 缓存控制</span>             <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>配置 <code>TokenConfig</code>。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2020/8/19 21:05  * @Description 令牌配置  */</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenConfig</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 令牌存储策略：Jwt 令牌存储方案      * @return InMemoryTokenStore      */</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> TokenStore <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtTokenStore</span><span class="token punctuation">(</span><span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 获取 security 认证服务配置文件信息      * @return AuthorizationServerProperties      */</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> AuthorizationServerProperties <span class="token function">authorizationServerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationServerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customizeJwtAccessTokenConverter"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> JwtAccessTokenConverter <span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         JwtAccessTokenConverter jwtAccessTokenConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置对称密钥，资源服务器使用该密钥来验证，从 YAML 配置文件中获取数据</span>         jwtAccessTokenConverter<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token function">authorizationServerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKeyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> jwtAccessTokenConverter<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">security</span><span class="token punctuation">:</span>   <span class="token key atrule">oauth2</span><span class="token punctuation">:</span>     <span class="token key atrule">authorization</span><span class="token punctuation">:</span>       <span class="token key atrule">jwt</span><span class="token punctuation">:</span>         <span class="token key atrule">key-value</span><span class="token punctuation">:</span> <span class="token string">"输入你的对称密钥"</span></code></pre></li><li><p>配置 <code>WebResponseExceptionTranslator&lt;OAuth2Exception&gt;</code>。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2020/8/23 16:18  * @Description OAuth 异常处理  */</span> <span class="token annotation punctuation">@Component</span> <span class="token annotation punctuation">@Slf4j</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityWebResponseExceptionTranslator</span> <span class="token keyword">implements</span> <span class="token class-name">WebResponseExceptionTranslator</span><span class="token operator">&lt;</span>OAuth2Exception<span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>OAuth2Exception<span class="token operator">></span> <span class="token function">translate</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         ResponseResult<span class="token operator">&lt;</span>String<span class="token operator">></span> result<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">AccountExpiredException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"账号过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             result <span class="token operator">=</span> ResponseResultUtil<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>ErrorCodeEnum<span class="token punctuation">.</span>USER_ACCOUNT_EXPIRED<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             result <span class="token operator">=</span> ResponseResultUtil<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>ErrorCodeEnum<span class="token punctuation">.</span>USER_CREDENTIALS_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">CredentialsExpiredException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"密码过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             result <span class="token operator">=</span> ResponseResultUtil<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>ErrorCodeEnum<span class="token punctuation">.</span>USER_CREDENTIALS_EXPIRED<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">DisabledException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"账号不可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             result <span class="token operator">=</span> ResponseResultUtil<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>ErrorCodeEnum<span class="token punctuation">.</span>USER_ACCOUNT_DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">LockedException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"账号锁定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             result <span class="token operator">=</span> ResponseResultUtil<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>ErrorCodeEnum<span class="token punctuation">.</span>USER_ACCOUNT_LOCKED<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">InternalAuthenticationServiceException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             result <span class="token operator">=</span> ResponseResultUtil<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>ErrorCodeEnum<span class="token punctuation">.</span>USER_ACCOUNT_NOT_EXIST<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"认证错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             result <span class="token operator">=</span> ResponseResultUtil<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>ErrorCodeEnum<span class="token punctuation">.</span>INTERNAL_AUTHENTICATION_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>             OAuth2Exception<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             HttpStatus<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>配置 <code>AuthorizationServerConfigurerAdapter</code>(此处<a href="#UserDetailsService"><code>UserDetailsService</code></a>使用集成 Security 中的类)。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2020/8/19 20:49  * @Description 认证服务配置  */</span> <span class="token annotation punctuation">@Configuration</span> <span class="token annotation punctuation">@EnableAuthorizationServer</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationServerConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizationServerConfigurerAdapter</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * Jwt 令牌值和 OAuth 身份验证信息转换器      */</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> JwtAccessTokenConverter jwtAccessTokenConverter<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * 数据源      */</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> DataSource dataSource<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * 令牌存储策略      */</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> TokenStore tokenStore<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * 异常处理      */</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> SecurityWebResponseExceptionTranslator securityWebResponseExceptionTranslator<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * 认证服务      */</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> UserDetailsService userDetailsService<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * 密码模式      */</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> AuthenticationManager authenticationManager<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">AuthorizationServerConfig</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">,</span>                                     TokenStore tokenStore<span class="token punctuation">,</span>                                     <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"customizeJwtAccessTokenConverter"</span><span class="token punctuation">)</span> JwtAccessTokenConverter jwtAccessTokenConverter<span class="token punctuation">,</span>                                     <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userDetailsServiceImpl"</span><span class="token punctuation">)</span> UserDetailsService userDetailsService<span class="token punctuation">,</span>                                     SecurityWebResponseExceptionTranslator securityWebResponseExceptionTranslator<span class="token punctuation">,</span>                                     AuthenticationManager authenticationManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>tokenStore <span class="token operator">=</span> tokenStore<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>jwtAccessTokenConverter <span class="token operator">=</span> jwtAccessTokenConverter<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService <span class="token operator">=</span> userDetailsService<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>securityWebResponseExceptionTranslator <span class="token operator">=</span> securityWebResponseExceptionTranslator<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>authenticationManager <span class="token operator">=</span> authenticationManager<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 存取客户端详情信息配置      * @param clients 客户端信息      * @throws Exception 异常      */</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>ClientDetailsServiceConfigurer clients<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 数据库存取客户端详情</span>         clients<span class="token punctuation">.</span><span class="token function">withClientDetails</span><span class="token punctuation">(</span><span class="token function">clientDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 设置令牌访问端点      * @param endpoints 端点信息      */</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthorizationServerEndpointsConfigurer endpoints<span class="token punctuation">)</span> <span class="token punctuation">{</span>         endpoints             <span class="token punctuation">.</span><span class="token function">accessTokenConverter</span><span class="token punctuation">(</span>jwtAccessTokenConverter<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 开启密码授权类型</span>             <span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span>authenticationManager<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 关闭令牌刷新</span>             <span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span>tokenStore<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 设置令牌配置服务</span>             <span class="token punctuation">.</span><span class="token function">tokenServices</span><span class="token punctuation">(</span><span class="token function">authorizationServerTokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 使用 refresh_token 额外配置 userDetailsService</span>             <span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userDetailsService<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 允许端点请求的方法</span>             <span class="token punctuation">.</span><span class="token function">allowedTokenEndpointRequestMethods</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// OAuth2 异常处理</span>             <span class="token punctuation">.</span><span class="token function">exceptionTranslator</span><span class="token punctuation">(</span>securityWebResponseExceptionTranslator<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 配置令牌访问端点时的安全策略      * @param security 令牌安全      */</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthorizationServerSecurityConfigurer security<span class="token punctuation">)</span> <span class="token punctuation">{</span>         security             <span class="token comment" spellcheck="true">// 是否提供公有密钥端点：/oauth/token_key，用于 Jwt 验证签名</span>             <span class="token punctuation">.</span><span class="token function">tokenKeyAccess</span><span class="token punctuation">(</span><span class="token string">"permitAll()"</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 是否提供资源服务访问的令牌解析端点：/oauth/check_token isAuthenticated</span>             <span class="token punctuation">.</span><span class="token function">checkTokenAccess</span><span class="token punctuation">(</span><span class="token string">"permitAll()"</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 允许表单认证</span>             <span class="token punctuation">.</span><span class="token function">allowFormAuthenticationForClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 客户端详情信息存储值数据库      * @return ClientDetailsService      */</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customizeClientDetailsService"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> ClientDetailsService <span class="token function">clientDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcClientDetailsService</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 令牌配置服务      * @return AuthorizationServerTokenServices      */</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customAuthorizationServerTokenServices"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> AuthorizationServerTokenServices <span class="token function">authorizationServerTokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         DefaultTokenServices defaultTokenServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 客户端详情信息服务</span>         defaultTokenServices<span class="token punctuation">.</span><span class="token function">setClientDetailsService</span><span class="token punctuation">(</span><span class="token function">clientDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 是否支持刷新令牌</span>         defaultTokenServices<span class="token punctuation">.</span><span class="token function">setSupportRefreshToken</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 令牌存储策略</span>         defaultTokenServices<span class="token punctuation">.</span><span class="token function">setTokenStore</span><span class="token punctuation">(</span>tokenStore<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置令牌有效期 2 小时(秒)</span>         defaultTokenServices<span class="token punctuation">.</span><span class="token function">setAccessTokenValiditySeconds</span><span class="token punctuation">(</span><span class="token number">7200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 默认刷新令牌有效期 3 天(秒)</span>         defaultTokenServices<span class="token punctuation">.</span><span class="token function">setRefreshTokenValiditySeconds</span><span class="token punctuation">(</span><span class="token number">259200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 令牌增强器，在原令牌基础上增加 Jwt 令牌功能</span>         TokenEnhancerChain tokenEnhancerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenEnhancerChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         tokenEnhancerChain<span class="token punctuation">.</span><span class="token function">setTokenEnhancers</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>jwtAccessTokenConverter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         defaultTokenServices<span class="token punctuation">.</span><span class="token function">setTokenEnhancer</span><span class="token punctuation">(</span>tokenEnhancerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> defaultTokenServices<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>可重写<code>postAccessToken()</code>方法实现返回 JSON 格式的信息。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2020/10/20 9:45  * @Description 登录控制器  */</span> <span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> TokenEndpoint tokenEndpoint<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">LoginController</span><span class="token punctuation">(</span>TokenEndpoint tokenEndpoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>tokenEndpoint <span class="token operator">=</span> tokenEndpoint<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/oauth/token"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> ResponseResult<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> <span class="token function">login</span><span class="token punctuation">(</span>Principal principal<span class="token punctuation">,</span>                                                     <span class="token annotation punctuation">@RequestParam</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> parameters<span class="token punctuation">)</span>         <span class="token keyword">throws</span> HttpRequestMethodNotSupportedException <span class="token punctuation">{</span>         String token <span class="token operator">=</span>             Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>tokenEndpoint<span class="token punctuation">.</span><span class="token function">postAccessToken</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> ResponseResultUtil<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h2 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h2><h3 id="Shiro-简介"><a href="#Shiro-简介" class="headerlink" title="Shiro 简介"></a>Shiro 简介</h3><ul><li>Apache Shiro 是 Java 的一个安全（权限）框架。</li><li>Shiro 可以完成认证、授权、加密、会话管理、Web 集成、缓存等功能。</li></ul><h3 id="Shiro-主要部分"><a href="#Shiro-主要部分" class="headerlink" title="Shiro 主要部分"></a>Shiro 主要部分</h3><p>主要由 Subject、Shiro SecurityManager 和 Realm 三部分组成。</p><ul><li>Subject: 代表当前用户。</li><li>Security Manager: Shiro 安全管理器，它管理着所有的 Subject 并且可以与其他组件进行交互。</li><li>Realm: 存储安全数据（如用户、角色、权限等）。</li></ul><h3 id="Spring-Boot-集成-Shiro"><a href="#Spring-Boot-集成-Shiro" class="headerlink" title="Spring Boot 集成 Shiro"></a>Spring Boot 集成 Shiro</h3><ol><li><p>引入依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- thymeleaf 集成 shiro --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.theborakompanioni<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置 AuthorizingRealm，即配置验证和授权信息。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2020/10/27 20:37  * @Description 自定义授权和验证  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 用户服务，可以查询用户，角色，权限</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> UserService userService<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">CustomRealm</span><span class="token punctuation">(</span>UserService userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principals<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 授权</span>         SimpleAuthorizationInfo simpleAuthorizationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 获取当前用户账号</span>         Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         UserDO userDO <span class="token operator">=</span> <span class="token punctuation">(</span>UserDO<span class="token punctuation">)</span> subject<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 获取角色</span>         List<span class="token operator">&lt;</span>RoleDO<span class="token operator">></span> roleList <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">listRoleByUsername</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         roleList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>roleDO <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>             simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">addRole</span><span class="token punctuation">(</span>roleDO<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 获取角色权限</span>             List<span class="token operator">&lt;</span>PermissionDO<span class="token operator">></span> permissionList <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">listPermissionByRoleName</span><span class="token punctuation">(</span>roleDO<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             permissionList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>                 permissionDO <span class="token operator">-</span><span class="token operator">></span> simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">addStringPermission</span><span class="token punctuation">(</span>permissionDO<span class="token punctuation">.</span><span class="token function">getPermissionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> simpleAuthorizationInfo<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken token<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 验证</span>         UsernamePasswordToken usernamePasswordToken <span class="token operator">=</span> <span class="token punctuation">(</span>UsernamePasswordToken<span class="token punctuation">)</span> token<span class="token punctuation">;</span>         UserDO user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserByUsername</span><span class="token punctuation">(</span>usernamePasswordToken<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 数据库中查询 user，如果 user 为空直接返回</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> null<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 将用户信息，用户密码，用户账号传值授权进行权限设置，且设置密码加密算法为 MD5,将账号作为盐</span>         ByteSource salt <span class="token operator">=</span> ByteSource<span class="token punctuation">.</span>Util<span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         SimpleAuthenticationInfo authenticationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>             user<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> salt<span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 成功后设置 session，去除 user 的密码</span>         Session session <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> authenticationInfo<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>配置 ShiroConfig，主要配置 ShiroFilterFactoryBean（过滤器工厂）、DefaultWebSecurityManager（Web 安全管理）、AuthorizingRealm（安全数据、授权和验证） 和 HashedCredentialsMatcher（加密算法）。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2020/10/27 20:44  * @Description Shiro 配置  */</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 用户服务，可以查询用户，角色，权限</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> UserService userService<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">ShiroConfig</span><span class="token punctuation">(</span>UserService userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 配置自定义 Shiro 过滤器工厂      * @param defaultWebSecurityManager DefaultWebSecurityManager      * @return ShiroFilterFactoryBean      */</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customShiroFilterFactoryBean"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">getShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"customDefaultWebSecurityManager"</span><span class="token punctuation">)</span> DefaultWebSecurityManager defaultWebSecurityManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>         ShiroFilterFactoryBean shiroFilterFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 配置 web 应用安全管理</span>         shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/*          * 访问权限          * anon: 匿名无需认证          * authc: 必须认证          * user: 必须拥有“记住我”功能才可使用          * perms: 拥有对某个资源的权限          * role: 拥有某个角色          */</span>         Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">,</span> <span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">,</span> <span class="token string">"perms[USER:ADD]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/delete"</span><span class="token punctuation">,</span> <span class="token string">"perms[USER:DELETE]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置登录页面</span>         shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置未授权页面</span>         shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setUnauthorizedUrl</span><span class="token punctuation">(</span><span class="token string">"/noauth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> shiroFilterFactoryBean<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 配置自定义 web 应用安全管理      * @param authorizingRealm CustomRealm      * @return DefaultWebSecurityManager      */</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customDefaultWebSecurityManager"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> DefaultWebSecurityManager <span class="token function">getDefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"customAuthorizingRealm"</span><span class="token punctuation">)</span> AuthorizingRealm authorizingRealm<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span>authorizingRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 配置自定义授权和验证      * @return CustomRealm      */</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customAuthorizingRealm"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> AuthorizingRealm <span class="token function">getAuthorizingRealm</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"customHashedCredentialsMatcher"</span><span class="token punctuation">)</span> HashedCredentialsMatcher hashedCredentialsMatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>         CustomRealm customRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomRealm</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>         customRealm<span class="token punctuation">.</span><span class="token function">setCredentialsMatcher</span><span class="token punctuation">(</span>hashedCredentialsMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> customRealm<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 设置加密算法      * @return HashedCredentialsMatcher      */</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customHashedCredentialsMatcher"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> HashedCredentialsMatcher <span class="token function">getHashedCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         HashedCredentialsMatcher hashedCredentialsMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashedCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         hashedCredentialsMatcher<span class="token punctuation">.</span><span class="token function">setHashAlgorithmName</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> hashedCredentialsMatcher<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 用于整合 Shiro 和 Thymeleaf      * @return ShiroDialect      */</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customShiroDialect"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> ShiroDialect <span class="token function">getShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>登录控制。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 获取当前用户</span>     Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 封装用户的登录信息</span>     UsernamePasswordToken usernamePasswordToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 进行登录</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>usernamePasswordToken<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AccountException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token string">"redirect:index"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><p>Thymeleaf 集成 Shiro 权限控制。</p><pre class=" language-html"><code class="language-html"> <span class="token doctype">&lt;!DOCTYPE html></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>shiro</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.pollix.at/thymeleaf/shiro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user!<span class="token punctuation">=</span>null?session.user.username:<span class="token punctuation">'</span><span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>USER:ADD<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/add}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>USER:DELETE<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/delete}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot(八):任务、监控管理与热部署</title>
      <link href="/posts/133cbc57/"/>
      <url>/posts/133cbc57/</url>
      
        <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><p>Spring 提供了异步任务的功能。</p><ol><li><p>在主程序类上开启异步注解支持<code>@EnableAsync</code>。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@EnableAsync</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootStudyApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootStudyApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>在方法上使用异步注解<code>@Async</code>。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/4 14:20  * @Description 异步任务 service  */</span> <span class="token annotation punctuation">@Service</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Async</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理数据中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>Spring 通过<code>TaskExecutor</code>和<code>TaskScheduler</code>接口提供了异步执行任务调度的方式。</p><ol><li><p>在主程序类上开启定时任务注解支持<code>@EnableScheduling</code>。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@EnableScheduling</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootStudyApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootStudyApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>在方法上使用异步注解<code>@Scheduled</code>。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/4 14:52  * @Description 定时任务 service  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 * * * * MON-FRI"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>cron 表达式一共有六个字段，分别为秒，分，时，日，月和周几，每个字段之间通过空格来间隔。</p><table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒</td><td>0-59</td><td>, - * /</td></tr><tr><td>分</td><td>0-59</td><td>, - * /</td></tr><tr><td>时</td><td>0-23</td><td>, - * /</td></tr><tr><td>日</td><td>1-31</td><td>, - * ? / L W C</td></tr><tr><td>月</td><td>1-12</td><td>, - * /</td></tr><tr><td>星期</td><td>0-7 或 SUN-SAT(0和7都是周日)</td><td>, - * ? / L C #</td></tr></tbody></table><table><thead><tr><th>特殊字符</th><th>含义</th></tr></thead><tbody><tr><td>,</td><td>枚举，例如<code>0,1,2</code>代表这几个值都会被匹配。</td></tr><tr><td>-</td><td>区间，例如<code>0-2</code>代表0,1,2这几个值都会被匹配。</td></tr><tr><td>*</td><td>任意，所有允许值都会被匹配。</td></tr><tr><td>/</td><td>步长，例如<code>0-2</code>，在秒字段代表从0开始每2秒就会被匹配。</td></tr><tr><td>?</td><td>日和星期冲突时，在日或者星期上标<code>?</code>表示按照另一个未标<code>?</code>的时间来匹配。</td></tr><tr><td>L</td><td>最后，具体看标识字段。例如<code>0 0 2 ? * 6L</code>表每个月最后一个周六，<code>0 0 2 LW * ?</code>表每个月最后一个工作日。</td></tr><tr><td>W</td><td>工作日，匹配工作日，只能标识在日上。</td></tr><tr><td>C</td><td>和 calendar 联系后计算过的值</td></tr><tr><td>#</td><td>第几个星期，如4#2表示第二个星期四，只能标识在星期上。</td></tr></tbody></table></li></ol><h3 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h3><p>Spring Boot 使用了<code>jakarta-mail</code>作为默认的邮件模块。</p><ol><li><p>引入 mail 依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>application.yml</code>中配置 mail 相关配置(此处使用 QQ 邮件)。</p><pre class=" language-xml"><code class="language-xml"> spring: mail:     username: 账号     password: 授权码     host: smtp.qq.com     # 如果不加 port 则无需配置 properties。(此处为使用 SSL 加密方式发送邮件)     port: 465     properties:     mail:         smtp:         ssl:             enable: true</code></pre></li><li><p>简单邮件发送。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> JavaMailSender javaMailSender<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     SimpleMailMessage simpleMailMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     simpleMailMessage<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"邮件标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     simpleMailMessage<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"邮件内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     simpleMailMessage<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"目标邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     simpleMailMessage<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"发送邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>simpleMailMessage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><p>复杂邮件发送</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> JavaMailSender javaMailSender<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException <span class="token punctuation">{</span>     MimeMessage mimeMessage <span class="token operator">=</span> javaMailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 第二个参数为是否要上传文件编码。</span>     MimeMessageHelper mimeMessageHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"邮件标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 第二个参数为是否开启 html 支持。</span>     mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"&lt;b style='color: red'>邮件内容&lt;/b>"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"目标邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"发送邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 上传附件</span>     mimeMessageHelper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"附件地址"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     mimeMessageHelper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">"2.jpg"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"附件地址"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li></ol><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>在开发中修改一个 Java 文件后想要看到效果不得不重启应用，这将导致花费大量的时间，因此希望在不重启应用的情况下，程序可以自动部署(热部署)。</p><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><ol><li>在 Spring Boot 中开发情况下禁用模板引擎的 cache。</li><li>页面模板改变时重新编译当前页面生效。</li></ol><h3 id="Spring-Loaded"><a href="#Spring-Loaded" class="headerlink" title="Spring Loaded"></a>Spring Loaded</h3><p>Spring 官方提供的热部署程序，实现修改类文件的热部署。</p><ol><li>下载 <a href="https://github.com/spring-projects/spring-loaded" target="_blank" rel="noopener">Spring Loaded</a>。</li><li>添加运行时参数: <code>-javaagent:[热部署程序jar包所在位置] -noverify</code>。</li></ol><h3 id="JRebel"><a href="#JRebel" class="headerlink" title="JRebel"></a>JRebel</h3><p><a href="https://www.jrebel.com/products/jrebel" target="_blank" rel="noopener">JRebel</a> 是收费的一个热部署软件，在 IDEA 或 Eclipse 安装相应插件即可使用。</p><h3 id="Spring-Boot-Devtools"><a href="#Spring-Boot-Devtools" class="headerlink" title="Spring Boot Devtools"></a>Spring Boot Devtools</h3><ol><li><p>引入依赖</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>修改编辑器的运行应用程序更新策略(此处以 IDEA 为例)。<br> <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/ideaPolicies.png"></p><ul><li><code>update resources</code>: 更新资源(如果引入了依赖则为热部署更新)。</li><li><code>update classes and resources</code>: 更新类文件和资源(如果引入了依赖则为热部署更新)。</li><li><code>hot swap classes and uodate trigger file if failed</code>: 热部署更新类和目标文件，当热部署更新失败时重启应用。</li></ul></li></ol><h2 id="监控管理"><a href="#监控管理" class="headerlink" title="监控管理"></a>监控管理</h2><p>Spring Boot 通过引入 actuator 依赖，可以获得应用监控和管理功能。通过 HTTP、JMX 和 SSH 协议来进行操作，自动得到审计、健康及指标信息等。监控和管理端点信息如下:</p><table><thead><tr><th>端点名</th><th>描述</th></tr></thead><tbody><tr><td>autoconfig</td><td>所有自动配置信息</td></tr><tr><td>auditevents</td><td>审计事件</td></tr><tr><td>beans</td><td>所有 Bean 的信息</td></tr><tr><td>configprops</td><td>所有配置属性(<code>application.yml</code>中的配置)</td></tr><tr><td>dump</td><td>线程状态信息</td></tr><tr><td>env</td><td>当前环境信息(服务器设置，系统环境变量等)</td></tr><tr><td>health</td><td>应用健康信息</td></tr><tr><td>info</td><td>当前应用信息(内存大小，剩余用量等)</td></tr><tr><td>metrics</td><td>应用的各项指标</td></tr><tr><td>mappings</td><td>应用<code>@RequestMapping</code>映射路径</td></tr><tr><td>shutdown</td><td>关闭当前应用(默认关闭)</td></tr><tr><td>trace</td><td>追踪信息(获取最新的 HTTP 请求)</td></tr></tbody></table><h3 id="Spring-Boot-整合监控管理"><a href="#Spring-Boot-整合监控管理" class="headerlink" title="Spring Boot 整合监控管理"></a>Spring Boot 整合监控管理</h3><ol><li><p>引入 actuator 依赖</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>通过 HTTP 方式访问监控端点，如<code>http://localhost:8080/actuator/</code>获取可访问地址列表。</p></li></ol><h3 id="定制端点信息"><a href="#定制端点信息" class="headerlink" title="定制端点信息"></a>定制端点信息</h3><p>定制端点一般通过 endpoints + 原端点名 + 属性名来设置。</p><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td><code>endpoints.beans.id=myBean</code></td><td>修改端点 id。</td></tr><tr><td><code>endpoints.shutdown.enabled=true</code></td><td>开启远程应用关闭功能。</td></tr><tr><td><code>endpoints.beans.enabled=false</code></td><td>关闭端点。</td></tr><tr><td><code>endpoints.enabled=false</code></td><td>关闭所有端点访问。</td></tr><tr><td><code>endpoints.beans.enabled=true</code></td><td>开启所需端点(如关闭所有端点访问，该开启端点可以进行访问)。</td></tr><tr><td><code>management.context-path=/manage</code></td><td>定制端点访问路径。</td></tr><tr><td><code>management.port=-1</code></td><td>修改 HTTP 端点访问，若参数为 -1 则代表关闭 HTTP 端点。</td></tr></tbody></table><h3 id="自定义-healthIndicator"><a href="#自定义-healthIndicator" class="headerlink" title="自定义 healthIndicator"></a>自定义 healthIndicator</h3><p>实现 healthIndicator 接口，指示器名必须为<code>xxxHealthIndicator</code>。代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/12/6 16:31 * @Description 自定义状态监测 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomHealthIndicator</span> <span class="token keyword">implements</span> <span class="token class-name">HealthIndicator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Health <span class="token function">health</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * 自定义检查方法:         * Health.up().build() 表健康。         * Health.down().withDetail("message", "服务异常").build() 表关闭，附带关闭信息。         */</span>        <span class="token keyword">return</span> Health<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withDetail</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"服务异常"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot(七):检索</title>
      <link href="/posts/97acd6e5/"/>
      <url>/posts/97acd6e5/</url>
      
        <content type="html"><![CDATA[<h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><ul><li>Elasticsearch 是一个开源的分布式搜索服务，且提供 Restful API，底层基于 Lucene，采用多 shard(分片)的方式保证数据安全，并且提供自动 Resharding 的功能。Spring Boot 通过整合 Spring Data Elasticsearch 提供了便捷的检索功能支持。</li><li>Elasticsearch 概念<ol><li>它是面向文档的，意味着它存储整个对象或文档，并索引每个文档的内容使之可以被检索。</li><li>将 JSON 作为文档的序列化格式。</li><li>将存储数据至 Elasticsearch 的行为称之为索引。一个 Elasticsearch 集群可以包含多个索引，每个索引可以包含多个类型，每个类型可以包含多个文档，而每个文档又可以有多个属性(例如雇员文档，一个文档代表一个雇员)。索引文档前需要确定文档存储位置。<br> <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/elasticSearch.png"></li><li>在 Elasticsearch 中通过<code>PUT</code>、<code>DELETE</code>、<code>PUT</code>和<code>HEAD</code>请求来对文档进行增删改查(增加修改都用<code>PUT</code>)。</li><li>Elasticsearch 采用 Restful 风格请求处理数据(例如<code>GET /index/type/id</code>)。</li><li>Elasticsearch 相关文档查看<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">Elasticsearch 官方权威指南</a>。</li></ol></li></ul><h2 id="Spring-Boot-整合-Elasticsearch"><a href="#Spring-Boot-整合-Elasticsearch" class="headerlink" title="Spring Boot 整合 Elasticsearch"></a>Spring Boot 整合 Elasticsearch</h2><p>Spring Boot 默认支持两种技术来和 Elasticsearch 交互: JEST(需要引入依赖) 和 Spring Data Elasticsearch(默认使用)。</p><h3 id="JEST"><a href="#JEST" class="headerlink" title="JEST"></a>JEST</h3><ol><li><p>引入 JEST 依赖</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.searchbox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>存储和查询数据</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/4 12:49  * @Description 文章 entity(JestId标识主键)  */</span> <span class="token annotation punctuation">@Data</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@JestId</span>     <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>     <span class="token keyword">private</span> String title<span class="token punctuation">;</span>     <span class="token keyword">private</span> String author<span class="token punctuation">;</span>     <span class="token keyword">private</span> String content<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> JestClient jestClient<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Article article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     article<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     article<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"新闻标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     article<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     article<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"新闻内容！！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 构建一个索引功能。索引构建器，索引位置，类型，[.id()文档id]，构建</span>     Index index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Index<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"news"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 执行存储操作(出现读取时间超时，在application.yml中设置读取时间)</span>         jestClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     String json <span class="token operator">=</span> <span class="token string">"{\n"</span> <span class="token operator">+</span>         <span class="token string">"    \"query\": {\n"</span> <span class="token operator">+</span>         <span class="token string">"        \"match\": {\n"</span> <span class="token operator">+</span>         <span class="token string">"            \"content\": \"内容\"\n"</span> <span class="token operator">+</span>         <span class="token string">"        }\n"</span> <span class="token operator">+</span>         <span class="token string">"    }\n"</span> <span class="token operator">+</span>         <span class="token string">"}"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 构建一个检索功能。检索构建器，索引位置，类型，[.id()文档id]，构建</span>     Search search <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Search<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIndex</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span><span class="token string">"news"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         SearchResult searchResult <span class="token operator">=</span> jestClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>searchResult<span class="token punctuation">.</span><span class="token function">getJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h3 id="Spring-Data-Elasticsearch"><a href="#Spring-Data-Elasticsearch" class="headerlink" title="Spring Data Elasticsearch"></a>Spring Data Elasticsearch</h3><ol><li><p>引入 Spring Data Elasticsearch 依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>通过 ElasticsearchRepository 调用 Elasticsearch。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/4 12:32  * @Description 书本 entity  */</span> <span class="token annotation punctuation">@Data</span> <span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>indexName <span class="token operator">=</span> <span class="token string">"kuukokawaii"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"book"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>     <span class="token keyword">private</span> String bookName<span class="token punctuation">;</span>     <span class="token keyword">private</span> String author<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> BookRepository bookRepository<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Book book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     book<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     book<span class="token punctuation">.</span><span class="token function">setBookName</span><span class="token punctuation">(</span><span class="token string">"书本名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     book<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"书本作者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     bookRepository<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>Book book <span class="token operator">:</span> bookRepository<span class="token punctuation">.</span><span class="token function">findBooksByBookNameLike</span><span class="token punctuation">(</span><span class="token string">"书"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>通过 ElasticsearchTemplate 调用 Elasticsearch。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/4 12:32  * @Description 书本 entity  */</span> <span class="token annotation punctuation">@Data</span> <span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>indexName <span class="token operator">=</span> <span class="token string">"kuukokawaii"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"book"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>     <span class="token keyword">private</span> String bookName<span class="token punctuation">;</span>     <span class="token keyword">private</span> String author<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> ElasticsearchRestTemplate elasticsearchRestTemplate<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Book book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     book<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     book<span class="token punctuation">.</span><span class="token function">setBookName</span><span class="token punctuation">(</span><span class="token string">"书本名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     book<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"书本作者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 构建索引构建器</span>     IndexQuery indexQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withObject</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 存储数据</span>     elasticsearchRestTemplate<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>indexQuery<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 查询语句</span>     MatchQueryBuilder matchQueryBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"bookName"</span><span class="token punctuation">,</span> <span class="token string">"书本"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 根据查询语句构建查询构建器</span>     SearchQuery searchQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NativeSearchQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withQuery</span><span class="token punctuation">(</span>matchQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 进行查询，查询构建器，查询的类</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>Book book <span class="token operator">:</span> elasticsearchRestTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>searchQuery<span class="token punctuation">,</span> Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot(六):消息队列</title>
      <link href="/posts/64ac92d0/"/>
      <url>/posts/64ac92d0/</url>
      
        <content type="html"><![CDATA[<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>大多应用中可通过消息服务中间件来提升系统异步通信、扩展解耦能力。在消息服务中有消息代理和目的地两个重要的概念，即当消息发送者发送消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地。在消息队列中主要拥有两种形式的目的地，分别为队列和主题，前者用于点对点消息通信，后者用于发布/订阅消息通信。</p><h3 id="JMS-和-AMQP-比对"><a href="#JMS-和-AMQP-比对" class="headerlink" title="JMS 和 AMQP 比对"></a>JMS 和 AMQP 比对</h3><table><thead><tr><th></th><th>JMS</th><th>AMQP</th></tr></thead><tbody><tr><td>定义</td><td>Java api</td><td>网络线级协议</td></tr><tr><td>跨语言</td><td>否</td><td>是</td></tr><tr><td>跨平台</td><td>否</td><td>是</td></tr><tr><td>Model</td><td>提供两种消息模型: <br>1.Peer-2-Peer<br>2.Pub/Sub</td><td>提供五种消息模型: <br>1.direct exchange<br>2.fanout exchange<br>3.topic exchange<br>4.headers exchange<br>5.system exchange<br>本质来讲，后四种和 JMS 的 Pub/Sub 模型没有太大差别，仅是在路由机制上做了更详细的划分。</td></tr><tr><td>支持消息类型</td><td>多种消息类型: <br>1.TextMessage<br>2.MapMessage<br>3.BytesMessage<br>4.StreamMessage<br>5.ObjectMessage<br>6.Message(只有消息头和属性)</td><td>byte[]<br>当实际应用时，有复杂的消息，可以将消息序列化后发送。</td></tr><tr><td>综合评价</td><td>JMS 定义了 Java API 层面的标准。<br>在 Java 体系中，多个 client 均可以通过 JMS 进行交互，不需要应用修改代码，但是其对跨平台的支持较差。</td><td>AMQP 定义了 wire-level 层的协议标准，天然具有跨平台、跨语言特性。</td></tr></tbody></table><h3 id="Spring-Boot-中的消息队列"><a href="#Spring-Boot-中的消息队列" class="headerlink" title="Spring Boot 中的消息队列"></a>Spring Boot 中的消息队列</h3><ol><li>spring-jms 提供了对 JMS 的支持。</li><li>spring-rabbit 提供了对 AMQP 的支持。</li><li>需要<code>ConnectionFactory</code>的实现来连接消息代理。</li><li>提供<code>JmsTemplate</code>和<code>RabbitTemplate</code>来发送消息。</li><li>将<code>@JmsListener</code>(JMS)和<code>@RabbitListener</code>(AMQP)注解在方法上监听消息代理发布的消息。</li><li><code>@EnableJms</code>和<code>@EnableRabbit</code>开启注解支持。</li></ol><h2 id="RabbitMQ-简介"><a href="#RabbitMQ-简介" class="headerlink" title="RabbitMQ 简介"></a>RabbitMQ 简介</h2><p>RabbitMQ 是一个由 erlang 开发的 AMQP(Advanced Message Queue Protocol) 的开源实现。</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><table><thead><tr><th>组件</th><th>作用</th></tr></thead><tbody><tr><td>Message</td><td>消息由消息头和消息体组成。其中消息体是不透明的，消息头则由一系列的可选属性组成，这些属性包括<code>routing-key</code>(路由键，决定消息目的地)、<code>priority</code>(相对于其他消息的优先权)和<code>delivery-mode</code>(标明该消息是否需要持久性存储)等。</td></tr><tr><td>Publisher</td><td>消息的生产者，用于向交换器发布消息，即向消息代理发送消息。</td></tr><tr><td>Exchange</td><td>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列(根据路由键选择队列)。</td></tr><tr><td>Queue</td><td>消息队列，用来保存消息直到发送给消费者，一个消息可投入一个或多个队列。</td></tr><tr><td>Binding</td><td>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列l连接起来的又有规则，Exchange 和 Queue 的绑定可以是多对多的关系。</td></tr><tr><td>Connection</td><td>网络连接，比如一个 TCP 连接。</td></tr><tr><td>Channel</td><td>信道是建立在真实的 TCP 连接内的虚拟连接，AMQP 的命令都是通过信道发送出去。因为对于操作系统来说建立和销毁 TCP 都是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接(类似线程与进程)。</td></tr><tr><td>Consumer</td><td>消息的消费者，用于从消息队列中获取消息。</td></tr><tr><td>Virtual Host</td><td>虚拟主机(简称 vhost)，是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个缩小版的 RabbitMQ 服务器，消息代理中可以有多个 vhost 。在连接时，必须指定具体的 vhost，RabbitMQ 默认的 vhost 是 <code>/</code>。</td></tr><tr><td>Broker</td><td>消息代理，表示消息队列服务器的实体。</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/rabbitMQ.png"></p><h3 id="Exchange-类型"><a href="#Exchange-类型" class="headerlink" title="Exchange 类型"></a>Exchange 类型</h3><ol><li><p>direct: 当消息中的路由键和 Binding 中的 binding key 一致时，交换器就将消息发到对应的队列中。<br> <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/direct_exchange.jpg"></p></li><li><p>fanout: 交换器会将消息发送到所有与自己绑定的队列上，速度是交换器中最快的(类似广播)。<br> <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/fanout_exchange.jpg"></p></li><li><p>topic: 交换器通过模式匹配分配消息的路由键属性，将路由器和某一个模式进行匹配，此时队列需要绑定到一个模式上。通过识别两个通配符<code>#</code>和<code>*</code>对路由键和绑定键的字符串进行切分，其中前者匹配0个或多个单词，后者匹配一个单词。</p><p> <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/topic_exchange.jpg"></p></li><li><p>header: header 匹配 AMQP 消息的 header 而不是路由键，与 direct 交换器类似但性能差许多，通常不用。</p></li></ol><h2 id="整合-RabbitMQ"><a href="#整合-RabbitMQ" class="headerlink" title="整合 RabbitMQ"></a>整合 RabbitMQ</h2><ol><li><p>引入 RabbitMQ 依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>application.yml</code>中配置 RabbitMQ 相关配置。</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>     <span class="token key atrule">username</span><span class="token punctuation">:</span> 账号     <span class="token key atrule">password</span><span class="token punctuation">:</span> 密码     <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> <span class="token string">"/"</span></code></pre></li><li><p>RabbitTemplate 用于发送和接收消息。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 自动序列化发送消息(使用send方法不会自动序列化)</span>     rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"study.direct"</span><span class="token punctuation">,</span> <span class="token string">"study.news"</span><span class="token punctuation">,</span> <span class="token string">"消息体可以是对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 自动反序列化转化接收的消息</span>     Object message <span class="token operator">=</span> rabbitTemplate<span class="token punctuation">.</span><span class="token function">receiveAndConvert</span><span class="token punctuation">(</span><span class="token string">"study.news"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><p>配置消息转换器序列化方式。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/2 22:04  * @Description AMQP 配置  */</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmqpConfig</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> MessageConverter <span class="token function">messageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p><code>@EnableRabbit</code>+<code>@RabbitListener</code>注解用于监听消息队列。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/11/21 22:07  * @Description SpringBoot应用主程序  */</span> <span class="token annotation punctuation">@EnableRabbit</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootStudyApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootStudyApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/12/2 22:14  * @Description 书 service  */</span> <span class="token annotation punctuation">@Service</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"study.news"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到的消息: "</span> <span class="token operator">+</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"study"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 获取消息体</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 获取消息头</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>AmqpAdmin 系统管理功能组件，用于创建删除 exchange，queue 和 binding。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> AmqpAdmin amqpAdmin<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">createExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 创建 exchange</span>     amqpAdmin<span class="token punctuation">.</span><span class="token function">declareExchange</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"study.direct"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 创建 queue，是否开启持久化</span>     amqpAdmin<span class="token punctuation">.</span><span class="token function">declareQueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"study.queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 创建 binding (绑定目的地名[此处队列名]，绑定目的地类型[此处队列]，交换名，路由键，参数)</span>     amqpAdmin<span class="token punctuation">.</span><span class="token function">declareBinding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"study.queue"</span><span class="token punctuation">,</span> Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>         <span class="token string">"study.direct"</span><span class="token punctuation">,</span> <span class="token string">"study"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot(五):数据访问</title>
      <link href="/posts/6de5b65a/"/>
      <url>/posts/6de5b65a/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><ol><li><p>引入 JdbcTemplate 依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>application.yml 配置数据源。</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">datasource</span><span class="token punctuation">:</span>     <span class="token key atrule">username</span><span class="token punctuation">:</span> 账号     <span class="token key atrule">password</span><span class="token punctuation">:</span> 密码     <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/表名<span class="token punctuation">?</span>serverTimezone=UTC     <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> 数据库驱动     <span class="token comment" spellcheck="true"># 表初始化，默认加载schema.sql(冒号后无空格，可省略)</span>     <span class="token key atrule">schema</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> classpath<span class="token punctuation">:</span>sql/department.sql     <span class="token comment" spellcheck="true"># 数据初始化，默认加载data.sql(冒号后无空格，可省略)</span>     <span class="token key atrule">data</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> classpath<span class="token punctuation">:</span>sql/department_data.sql     <span class="token comment" spellcheck="true"># 初始化模式(可省略)</span>     <span class="token key atrule">initialization-mode</span><span class="token punctuation">:</span> always</code></pre></li><li><p>使用 JdbcTemplate 进行查询(<a href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/jdbc.html" target="_blank" rel="noopener">其他操作</a>)。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/11/27 14:50  * @Description 查询 controller  */</span> <span class="token annotation punctuation">@Controller</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryController</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Autowired</span>     <span class="token keyword">public</span> <span class="token function">QueryController</span><span class="token punctuation">(</span>JdbcTemplate jdbcTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcTemplate <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/query"</span><span class="token punctuation">)</span>     <span class="token annotation punctuation">@ResponseBody</span>     <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">"SELECT id, departmentName FROM department"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><ol><li><p>引入 MyBatis 依赖(包含了 JdbcTemplate 依赖)。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>与 SSM 框架中使用 MyBatis 的<a href="https://blog.kuukokawaii.com/posts/c27c399e/">操作</a>相同，可以在 DAO 接口上使用<code>@Mapper</code>注解并在<code>application.yml</code>中配置扫描或者在程序入口处添加<code>@MapperScan</code>注解批量扫描包。<code>application.yml</code>配置信息如下:</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">mybatis</span><span class="token punctuation">:</span>   <span class="token key atrule">configuration</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 下划线转驼峰命名</span>     <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment" spellcheck="true"># 开启二级缓存</span>     <span class="token key atrule">cache-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment" spellcheck="true"># 配置 resultMap 中所用到的类的目录，多个目录可以使用逗号分隔</span>   <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.kuukokawaii.springbootstudy.pojo   <span class="token comment" spellcheck="true"># mapper.xml 配置文件路径</span>   <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> com/kuukokawaii/springbootstudy/**/dao/**.xml</code></pre></li><li><p>如果将<code>mapper.xml</code>放在其他目录下(非 resources 目录下)则需要在 pom 文件中配置如下信息，让项目启动时编译其下的<code>mapper.xml</code>文件。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 此处编译 java 目录下包括子目录的所有 .xml 文件 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>Redis 是一个开源的，内存中的数据结构存储系统，可以用作数据库、缓存和消息中间件。</p><ol><li><p>引入 Redis 依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>application.yml</code>中配置 Redis 相关配置。</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">redis</span><span class="token punctuation">:</span>     <span class="token key atrule">host</span><span class="token punctuation">:</span> xxx.xxx.xxx.xxx</code></pre></li><li><p>使用<code>RedisTemplate</code>或<code>StringRedisTemplate</code>操作 Redis:</p><ol><li><code>RedisTemplate</code>使用的是<code>JdkSerializationRedisSerializer</code>。</li><li><code>StringRedisTemplate</code>使用的是<code>StringRedisSerializer</code>。</li><li>Redis 常见的五大数据类型: String(字符串)、List(列表)、Set(集合)、Hash(散列)和ZSet(有序集合)。分别通过五类方法操作: <code>opsForValue()</code>、<code>opsForList()</code>、<code>opsForSet()</code>、<code>opsForHash()</code>和<code>opsForZSet()</code>。</li><li><a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">Redis 命令查询</a></li></ol></li><li><p>配置<code>RedisConfig</code>。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2020/10/30 20:29  * @Description Redis 配置  */</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 自定义 redis 模板，设置序列化方式。      * @param redisConnectionFactory redisConnectionFactory      * @return RedisTemplate&lt;String, Object>      */</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customRedisTemplate"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>         RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 1. 序列化配置</span>         Jackson2JsonRedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> jackson2JsonRedisSerializer <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// ObjectMapper 用于转义</span>         ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 更改自动检测某种属性的详细信息</span>         objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 对多态类型进行适当反序列化</span>         objectMapper<span class="token punctuation">.</span><span class="token function">activateDefaultTyping</span><span class="token punctuation">(</span>LaissezFaireSubTypeValidator<span class="token punctuation">.</span>instance<span class="token punctuation">,</span>             ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>         jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 2. 序列化 String 类型</span>         StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置序列化方式，key 都用 string 序列化， value 都用 jackson 序列化</span>         template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>         template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>         template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>         template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置 bean 的 properties</span>         template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> template<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>配置<code>RedisCacheManager</code>，并修改 Key 和 Value 的保存格式。之后便可使用 Spring 缓存抽象操作 Redis。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> RedisCacheManager <span class="token function">cacheManager</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Key 使用 StringRedisSerializer 的方式保存</span>         RedisSerializer<span class="token operator">&lt;</span>String<span class="token operator">></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Value 使用 Jackson2JsonRedisSerializer 的方式保存</span>         Jackson2JsonRedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> jackson2JsonRedisSerializer <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 解决查询缓存反序列化出错问题</span>         ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>         objectMapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>         jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// entryTtl(Duration.ofHours(1))设置生存周期</span>         RedisCacheConfiguration redisCacheConfiguration <span class="token operator">=</span> RedisCacheConfiguration<span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> RedisCacheManager<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>redisCacheConfiguration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>为了简化开发，Spring 定义了 Cache 和 CacheManager 接口来统一不同的缓存技术，同时 Spring 也支持使用 JCache(JSR-107) 注解简化开发。</p><ul><li><p>Spring 缓存注解:</p><table><thead><tr><th>注解及参数</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td><code>@Cacheable</code></td><td>根据方法的请求参数对其结果进行缓存，常用于创建。</td><td>1.<code>cacheNames/value</code>: 指定缓存组件名(可以多个)。<br>2.<code>key</code>: 缓存数据使用的 Key(默认使用方法参数的值，可以使用 SpEL 表达式)。<br>3.<code>keyGenerator</code>: Key 的生成器，可以指定 Key 生成器的组件 id(与<code>key</code>二选一)。<br>4.<code>cacheManager</code>: 指定缓存管理器。<br>5.<code>cacheResolver</code>: 指定获取解析器(与<code>cacheManager</code>二选一)。<br>6.<code>condition</code>: 指定符合条件的情况下才缓存。<br><code>unless</code>: 指定符合条件的情况下不进行缓存，并且可以获取缓存结果进行判断。<br>7.<code>sync</code>: 是否使用异步模式，此时不支持<code>unless</code>参数。</td></tr><tr><td><code>@CachePut</code></td><td>保证方法一定会被调用且结果会被缓存，常用于更新，如果指定 key 被更新则需要同时更新 key。</td><td></td></tr><tr><td><code>@CacheEvict</code></td><td>清空缓存，常用于删除，需要指定删除的 key。</td><td>1.<code>key</code>: 如未指定则会使用默认策略生成的 key。<br>2.<code>allEntries</code>: 是否删除指定 cache 中的所有数据。<br>3.<code>beforeInvocation</code>: 缓存的清除是否在方法之前执行(默认 false)。</td></tr><tr><td><code>@EnableCaching</code></td><td>开启基于注解的缓存。</td><td></td></tr><tr><td><code>@Caching</code></td><td>是<code>@Cacheable</code>、<code>@CachePut</code>和<code>@CacheEvict</code>的组合注解。</td><td></td></tr><tr><td><code>@CacheConfig</code></td><td>抽取缓存的公共配置，标注于类上，类中的缓存注解会默认使用公共配置的参数。</td><td></td></tr><tr><td><code>keyGenerator</code></td><td>缓存数据时 Key 的生成策略。</td><td></td></tr><tr><td><code>serialize</code></td><td>缓存数据时 Value 序列化策略。</td><td></td></tr></tbody></table></li><li><p><code>@Cacheable</code>可用 SpEL 表达式:</p><table><thead><tr><th>名字</th><th>位置</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>methodName</td><td>root object</td><td>当前被调用的方法名。</td><td><code>#root.methodName</code></td></tr><tr><td>method</td><td>root object</td><td>当前被调用的方法。</td><td><code>#root.method.name</code></td></tr><tr><td>target</td><td>root object</td><td>当前被调用的目标对象。</td><td><code>#root.target</code></td></tr><tr><td>targetClass</td><td>root object</td><td>当前被调用的目标对象类。</td><td><code>#root.targetClass</code></td></tr><tr><td>args</td><td>root object</td><td>当前被调用的方法的参数列表。</td><td><code>#root.args[0]</code></td></tr><tr><td>caches</td><td>root object</td><td>当前方法调用的缓存列表(如<code>@Cacheable(cacheNames={"cache1","cache2"})</code>)。</td><td><code>#root.caches[0].name</code></td></tr><tr><td>argument name</td><td>evaluation context</td><td>方法参数的名字，可以直接<code>#参数名</code>，也可以使用<code>#p0</code>或<code>#a0</code>的形式，其中0代表参数的的索引。</td><td><code>#iban</code>、<code>#a0</code>、<code>#p0</code></td></tr><tr><td>result</td><td>evaluation context</td><td>方法执行后的返回值(仅当方法执行之后的判断有效)。</td><td><code>#result</code></td></tr></tbody></table></li><li><p>缓存使用注意事项:</p><ol><li>缓存注解不能定义在接口上。</li><li>加缓存注解的方法必须为公有(public)的。</li><li><code>@Cahcheable</code>必须指定至少一个<code>cacheNames</code>。</li></ol></li><li><p>注解使用示例:</p><ol><li><p><code>@Cacheable</code></p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span> <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> Employee <span class="token function">getEmployee</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">getEmployeeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><p><code>@CachePut</code></p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span> <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#result.id"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> Employee <span class="token function">updateEmployee</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Employee employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">updateEmployee</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><p><code>@CacheEvict</code></p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span> <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeEmployee</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">removeEmployeeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><p><code>@Caching</code></p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span> <span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>     cacheable <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#lastName"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     put <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#result.id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#result.email"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">)</span> <span class="token keyword">public</span> Employee <span class="token function">getEmployee</span><span class="token punctuation">(</span>String lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">getEmployeeByLastName</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><p><code>@CacheConfig</code></p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Service</span> <span class="token annotation punctuation">@CacheConfig</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmployeeService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Resource</span>     <span class="token keyword">private</span> EmployeeMapper employeeMapper<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token annotation punctuation">@Cacheable</span>     <span class="token keyword">public</span> Employee <span class="token function">getEmployee</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">getEmployeeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol></li></ul><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><h3 id="alibaba-Druid"><a href="#alibaba-Druid" class="headerlink" title="alibaba Druid"></a>alibaba Druid</h3><p>Druid 是 alibaba 提供的 Java 语言数据库连接池，它能够提供强大的监控和扩展功能。</p><ol><li><p>引入 Druid 依赖。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置 Druid 连接池。</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">datasource</span><span class="token punctuation">:</span>     <span class="token key atrule">druid</span><span class="token punctuation">:</span>       <span class="token key atrule">username</span><span class="token punctuation">:</span> 账号       <span class="token key atrule">password</span><span class="token punctuation">:</span> 密码       <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/表名<span class="token punctuation">?</span>serverTimezone=UTC       <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> 数据库驱动       <span class="token comment" spellcheck="true"># 初始化大小，最小，最大</span>       <span class="token key atrule">initial-size</span><span class="token punctuation">:</span> <span class="token number">5</span>       <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>       <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">20</span>       <span class="token comment" spellcheck="true"># 配置获取连接等待超时的时间</span>       <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">60000</span>       <span class="token comment" spellcheck="true"># 配置一个连接在池中最小生存的时间，单位是毫秒</span>       <span class="token key atrule">min-evictable-idle-time-millis</span><span class="token punctuation">:</span> <span class="token number">300000</span>       <span class="token comment" spellcheck="true"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span>       <span class="token key atrule">time-between-eviction-runs-millis</span><span class="token punctuation">:</span> <span class="token number">600000</span>       <span class="token key atrule">validation-query</span><span class="token punctuation">:</span> SELECT 1       <span class="token key atrule">test-while-idle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token key atrule">test-on-borrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token key atrule">test-on-return</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment" spellcheck="true"># 打开PSCache，并且指定每个连接上PSCache的大小</span>       <span class="token key atrule">pool-prepared-statements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token key atrule">max-pool-prepared-statement-per-connection-size</span><span class="token punctuation">:</span> <span class="token number">20</span>       <span class="token comment" spellcheck="true"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙。(stat,wall,log4j)</span>       <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall       <span class="token comment" spellcheck="true"># 通过connection-properties属性来打开mergeSql功能；慢SQL记录</span>       <span class="token key atrule">connection-properties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500       <span class="token key atrule">use-global-data-source-stat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token comment" spellcheck="true"># 配置DruidStatFilter</span>       <span class="token key atrule">web-stat-filter</span><span class="token punctuation">:</span>         <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>         <span class="token key atrule">url-pattern</span><span class="token punctuation">:</span> <span class="token string">"/*"</span>         <span class="token key atrule">exclusions</span><span class="token punctuation">:</span> <span class="token string">"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"</span>       <span class="token comment" spellcheck="true"># 配置DruidStatViewServlet</span>       <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>         <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>         <span class="token key atrule">url-pattern</span><span class="token punctuation">:</span> <span class="token string">"/druid/*"</span>         <span class="token comment" spellcheck="true"># IP白名单(没有配置或者为空，则允许所有访问)</span>         <span class="token key atrule">allow</span><span class="token punctuation">:</span> 127.0.0.1         <span class="token comment" spellcheck="true"># IP黑名单 (存在共同时，deny优先于allow)</span>         <span class="token key atrule">deny</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 禁用HTML页面上的“Reset All”功能</span>         <span class="token key atrule">reset-enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>         <span class="token comment" spellcheck="true"># 登录名</span>         <span class="token key atrule">login-username</span><span class="token punctuation">:</span> root         <span class="token comment" spellcheck="true"># 登录密码</span>         <span class="token key atrule">login-password</span><span class="token punctuation">:</span> root</code></pre></li></ol><h3 id="HikariCP"><a href="#HikariCP" class="headerlink" title="HikariCP"></a>HikariCP</h3><p>HikariCP 是轻量级的数据库连接池，功能没有 alibaba Druid 多，但是速度比它要快。</p><ol><li><p>引入依赖</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.zaxxer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>HikariCP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置 HikariCP 连接池。</p><pre class=" language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">datasource</span><span class="token punctuation">:</span>     <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource     <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.postgresql.Driver     <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>postgresql<span class="token punctuation">:</span>//118.31.15.147<span class="token punctuation">:</span>5432/security     <span class="token key atrule">username</span><span class="token punctuation">:</span> postgres     <span class="token key atrule">password</span><span class="token punctuation">:</span> qwe123     <span class="token key atrule">hikari</span><span class="token punctuation">:</span>       <span class="token key atrule">maximum-pool-size</span><span class="token punctuation">:</span> <span class="token number">20</span>       <span class="token key atrule">minimum-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>       <span class="token key atrule">idle-timeout</span><span class="token punctuation">:</span> <span class="token number">60000</span>       <span class="token key atrule">auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token key atrule">max-lifetime</span><span class="token punctuation">:</span> <span class="token number">60000</span>       <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">60000</span>       <span class="token key atrule">connection-test-query</span><span class="token punctuation">:</span> SELECT 1       <span class="token key atrule">pool-name</span><span class="token punctuation">:</span> SecurityHikariCP</code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/posts/f5f9fa9b/"/>
      <url>/posts/f5f9fa9b/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h2><p>Docker 是基于 Go 语言并遵从 Apache 协议开源的一个开源的应用容器引擎，支持将软件编译成一个镜像并设置镜像中各软件的配置，获得镜像的其他使用者可以直接使用镜像。Docker 容器是完全使用沙箱机制的，相互之间不会有任何接口，更重要的是容器性能开销极低。</p><h2 id="Docker-核心概念"><a href="#Docker-核心概念" class="headerlink" title="Docker 核心概念"></a>Docker 核心概念</h2><p>Docker 主机从仓库下载所需镜像并通过 daemon 运行镜像产生容器之后，Docker 客户端就可以连接主机进行操作。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/coreConceptsOfDocker.png"></p><ol><li>Docker 镜像（Images）：Docker 镜像是用于创建 Docker 容器的模板。</li><li>Docker 容器（Container）：容器是独立运行的一个或一组应用。</li><li>Docker 客户端（Client）：客户端通过命令行或者其他工具使用 Docker。</li><li>Docker 主机（Host）：一个物理或虚拟的机器用于执行 Docker 守护进程和容器。</li><li>Docker 仓库（Registry）：Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。<a href="https://hub.docker.com" target="_blank" rel="noopener">Docker Hub</a>提供了庞大的镜像集合供使用。</li></ol><h2 id="Docker-常用操作"><a href="#Docker-常用操作" class="headerlink" title="Docker 常用操作"></a>Docker 常用操作</h2><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker search 关键字</td><td>常用于检索镜像的详细信息，或镜像版本。</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td><code>:tag</code>是可选的，tag 表示标签，多为软件的版本，默认是 latest。</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有本地镜像。</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像。</td></tr></tbody></table><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>运行</td><td>docker run –name container-name <br> -d image-name</td><td><code>--name</code>：自定义容器名; <br><code>-d</code>：后台运行; <br><code>image-name</code>：指定镜像模板（推荐加上版本号）。</td></tr><tr><td>列表</td><td>docker ps</td><td>查看运行中容器，加上<code>-a</code>可以查看所有容器。</td></tr><tr><td>停止</td><td>docker stop container-name/container-id</td><td>停止指定的运行中容器。</td></tr><tr><td>启动</td><td>docker start container-name/container-id</td><td>启动指定的容器。</td></tr><tr><td>删除</td><td>docker rm container-id</td><td>删除指定容器。</td></tr><tr><td>端口映射</td><td>输入运行容器命令时添加<code>-p</code>命令 <br>例：docker run -d -p 6379:6379 镜像名</td><td><code>-p</code>主机端口映射至容器内部的端口。</td></tr><tr><td>容器日志</td><td>docker logs container-name/container-id</td><td>查看容器日志。</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot(四):WEB 开发</title>
      <link href="/posts/bb82a974/"/>
      <url>/posts/bb82a974/</url>
      
        <content type="html"><![CDATA[<h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><h3 id="映射规则"><a href="#映射规则" class="headerlink" title="映射规则"></a>映射规则</h3><p>Spring Boot 的静态资源与 SSM 框架整合的静态资源所在位置不同，SSM 框架静态资源存储于 webapp 的 static 中，而 Spring Boot 的静态资源存储于 resources 中。Spring Boot 默认有两种静态资源映射模式:</p><ol><li>webjars 模式<br> 应用使用 MAVEN 导入 <a href="https://www.webjars.org/" target="_blank" rel="noopener">webjars</a> 的静态资源依赖，则所有通过该方法导入的静态资源都存储于<code>classpath:/META-INF/resources/webjars/</code>中。需要访问时，只需要通过类似<code>http://localhost:8080/webjars/所需资源名</code>的方式即可完成调用。</li><li>自定义模式<br> 通过查看 Spring Boot 源码中的<code>WebMvcAutoConfiguration</code>和<code>ResourceProperties</code>类的<code>SERVLET_LOCATIONS</code>和<code>CLASSPATH_RESOURCE_LOCATIONS</code>常量，可以得出静态资源的默认存储位置为<code>classpath:/META-INF/resources/</code>、<code>classpath:/resources/</code>、<code>classpath:/static/</code>、<code>classpath:/public/</code>和<code>/</code>。调用方式与 webjars 模式类似，例如静态文件存储于<code>classpath:/static/</code>，则调用方式如<code>http://localhost:8080/所需资源名</code>即可。</li></ol><h3 id="欢迎页"><a href="#欢迎页" class="headerlink" title="欢迎页"></a>欢迎页</h3><p>静态资源文件夹下的所有<code>index.html</code>页面都会被映射为<code>/</code>，也就是说当你输入<code>http://localhost:8080/</code>时，就会自动跳转至<code>index.html</code>页面。</p><h3 id="修改静态资源位置"><a href="#修改静态资源位置" class="headerlink" title="修改静态资源位置"></a>修改静态资源位置</h3><p>可以在<code>application.yml</code>中通过<code>spring.resources.static-locations</code>设置默认的静态资源位置，使用该条命令会使 Spring Boot 本身的默认静态资源位置失效，因此不推荐修改。也可以通过<code>@Configuration</code>+继承<code>WebMvcConfigurerAdapter</code>并覆写<code>addResourceHandlers()</code>实现静态资源与路径的映射。</p><h3 id="修改静态资源访问路径"><a href="#修改静态资源访问路径" class="headerlink" title="修改静态资源访问路径"></a>修改静态资源访问路径</h3><p>Spring Boot 访问放在 static 下的 css 文件夹默认是通过<code>/css/**</code>的方式，如果想将该路径改成<code>/static/css/**</code>可以通过如下配置方式。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">static-path-pattern</span><span class="token punctuation">:</span> /static/**</code></pre><h2 id="Thymeleaf-模板引擎"><a href="#Thymeleaf-模板引擎" class="headerlink" title="Thymeleaf 模板引擎"></a>Thymeleaf 模板引擎</h2><h3 id="模板引擎简介"><a href="#模板引擎简介" class="headerlink" title="模板引擎简介"></a>模板引擎简介</h3><p>模板引擎用于将视图和数据进行整合解析，而不同的模板引擎之间的区别仅在于模板引擎获取数据的语法不同。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/templateEngine.png"></p><h3 id="Spring-Boot-集成-Thymeleaf"><a href="#Spring-Boot-集成-Thymeleaf" class="headerlink" title="Spring Boot 集成 Thymeleaf"></a>Spring Boot 集成 Thymeleaf</h3><ol><li><p>引入依赖(如需修改 Thymeleaf 版本需注意<code>thymeleaf-layout-dialect.version</code>)。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>Thymeleaf 将<code>classpath:/templates/</code>作为默认的视图存储位置，只需将 HTML 页面放入该文件夹中，Thymeleaf 就能自动渲染。</p></li></ol><h3 id="Thymeleaf-使用-amp-语法"><a href="#Thymeleaf-使用-amp-语法" class="headerlink" title="Thymeleaf 使用&amp;语法"></a>Thymeleaf 使用&amp;语法</h3><ol><li><p>导入 Thymeleaf 的命名空间。(不导入不会出错，但是 HTML 页面不会有 Thymeleaf 语法提示。)</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>后端通过<code>Model</code>、<code>ModelMap</code>、<code>ModelAndView</code>或<code>Map</code>向前端传输数据。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/helloPage"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>ModelMap modelMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>     modelMap<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"helloValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><p>在对应的 HTML 中使用 <a href="https://www.thymeleaf.org/documentation.html" target="_blank" rel="noopener">Thymeleaf 语法</a>。</p><pre class=" language-html"><code class="language-html"> <span class="token doctype">&lt;!DOCTYPE html></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${hello}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="Web-MVC-扩展与全面接管"><a href="#Web-MVC-扩展与全面接管" class="headerlink" title="Web MVC 扩展与全面接管"></a>Web MVC 扩展与全面接管</h2><p>Spring Boot 在自动配置组件时，会先扫描容器中是否有用户自定义的配置，如果有则使用用户自定义的配置文件或将用户自定义的配置文件与默认的自动配置文件组合起来，没有则执行 Spring Boot 的自动配置。例如<code>&lt;mvc:view-controller path="/hello" view-name="hello"/&gt;</code>映射<code>/hello</code>至<code>hello.html</code>页面。而在 Spring Boot 中可以通过<code>@Configuration</code>注解 + 实现<code>WebMvcConfigurer</code>接口中<code>addViewControllers</code>方法的形式实现该功能，Spring Boot 不仅保留了所有的自动配置，而且还加载了自定义的扩展功能。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当需要对 Web MVC 进行全面接管时(即使得 Spring Boot 不进行自动配置，而是按照自定义的配置加载)，通过使用<code>@EnableWebMvc</code>注解即可实现该效果，此时 Spring Boot 自动配置将失效且仅保留 Spring MVC 最新版的效果。</p><h2 id="错误处理机制"><a href="#错误处理机制" class="headerlink" title="错误处理机制"></a>错误处理机制</h2><p>Spring Boot 错误的默认处理机制是通过<code>ErrorMvcAutoConfiguration</code>为容器添加了<code>DefaultErrorAttributes</code>、<code>BasicErrorController</code>、<code>ErrorPageCustomizer</code>和<code>DefaultErrorViewResolver</code>组件。一旦应用出现错误，<code>ErrorPageCustomizer</code>就会向<code>/error/</code>控制器发起请求(类似<code>web.xml</code>注册错误页面的规则)，此时会进入<code>BasicErrorController</code>控制器。该控制器根据请求头向用户发送错误 HTML 页面或 JSON 数据，最终通过<code>DefaultErrorAttributes</code>中的错误状态码响应至特定的页面。</p><h3 id="定制错误-HTML-页面"><a href="#定制错误-HTML-页面" class="headerlink" title="定制错误 HTML 页面"></a>定制错误 HTML 页面</h3><ul><li>在拥有模板引擎的情况下，将<code>错误状态码.html</code>放置在模板引擎文件夹下的 error 文件夹中，Spring Boot 就会自动进行错误页面的配置。也可以将错误页面命名为<code>4xx.html</code>或<code>5xx.html</code>等，表示匹配所有 4 开头或者 5 开头的错误状态码，当项目下同时拥有类似<code>4xx.html</code>和<code>404.html</code>时，则会按精确优先的方式响应至<code>404.html</code>的错误页面。</li><li>在没有模板引擎的情况下，Spring Boot 将会在静态资源文件夹下的 error 文件夹中寻找错误页面。</li><li>如上述两处都没有发现错误页面，将跳转至 Spring Boot 默认的错误提示页面。</li><li>使用模板引擎的错误页面可以通过语法获取页面的错误信息(如获取不到<code>exception</code>，则需要在<code>application.yml</code>中将<code>server.error.include-exception</code>开启)。</li></ul><h3 id="定制错误-JSON-数据"><a href="#定制错误-JSON-数据" class="headerlink" title="定制错误 JSON 数据"></a>定制错误 JSON 数据</h3><ul><li><p>自定义异常处理数据，浏览器和客户端返回的都是 JSON 数据。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/26 16:42   * @Description 异常处理器   */</span>  <span class="token annotation punctuation">@ControllerAdvice</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionHandler</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@ResponseBody</span>      <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>UserNotExistException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">handleException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token string">"userNotExist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> map<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>将异常请求转发至<code>/error</code>页面，通过 Spring Boot 自行产生自适应。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/26 16:42   * @Description 异常处理器   */</span>  <span class="token annotation punctuation">@ControllerAdvice</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionHandler</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@ResponseBody</span>      <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>UserNotExistException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">handleException</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 设置错误状态码</span>          request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.error.status_code"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"/error"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>拥有自适应效果且能携带定制数据。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/26 16:36   * @Description 自定义 ErrorAttributes   */</span>  <span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyErrorAttributes</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultErrorAttributes</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>WebRequest webRequest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> includeStackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> errorAttributes <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> includeStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>          errorAttributes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"customError"</span><span class="token punctuation">,</span> webRequest<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"customError"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> errorAttributes<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/26 16:42   * @Description 异常处理器   */</span>  <span class="token annotation punctuation">@ControllerAdvice</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionHandler</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>UserNotExistException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">handleException</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 设置错误状态码</span>          request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.error.status_code"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token string">"userNotExist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"customError"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"/error"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="Spring-Boot-嵌入式-Servlet-容器"><a href="#Spring-Boot-嵌入式-Servlet-容器" class="headerlink" title="Spring Boot 嵌入式 Servlet 容器"></a>Spring Boot 嵌入式 Servlet 容器</h2><h3 id="默认容器"><a href="#默认容器" class="headerlink" title="默认容器"></a>默认容器</h3><p>Spring Boot 默认使用 Tomcat 作为嵌入式的 Servlet 容器，需要对 Servlet 容器进行修改可以通过如下两种方式:</p><ol><li><p>在<code>application.yml</code>中通过<code>server.xxxx</code>修改，如需修改 Tomcat 配置则通过<code>server.tomcat.xxx</code>进行修改。</p></li><li><p>编写一个嵌入式的 Servlet 容器定制器<code>WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;</code>来修改 Servlet 容器的配置(优先级高于配置文件)。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> WebServerFactoryCustomizer<span class="token operator">&lt;</span>ConfigurableServletWebServerFactory<span class="token operator">></span> <span class="token function">webServerFactoryCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token operator">&lt;</span>ConfigurableServletWebServerFactory<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>ConfigurableServletWebServerFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>             factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li></ol><p>Spring Boot 默认时以 Jar 包的方式启动嵌入式的 Servlet 容器来启动 Web 应用，没有 web.xml 文件，因此提供<code>ServletRegistrationBean</code>、<code>FilterRegistrationBean</code>和<code>ServletListenerRegistrationBean</code>三大组件用于注册 Servlet、Filter 和Listener。</p><ul><li><p>ServletRegistrationBean</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/26 17:17   * @Description 自定义 servlet   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>          resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello Servlet！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> ServletRegistrationBean<span class="token operator">&lt;</span>MyServlet<span class="token operator">></span> <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/myServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>FilterRegistrationBean</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/26 17:31   * @Description 自定义 filter   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span>          ServletException <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyFilter process..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> FilterRegistrationBean<span class="token operator">&lt;</span>MyFilter<span class="token operator">></span> <span class="token function">filterFilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      FilterRegistrationBean<span class="token operator">&lt;</span>MyFilter<span class="token operator">></span> filterFilterRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      filterFilterRegistrationBean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 设置要拦截的请求</span>      filterFilterRegistrationBean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> filterFilterRegistrationBean<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>ServletListenerRegistrationBean</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**      * @Author 喵粮都输光了      * @Date 2019/11/26 17:40      * @Description 自定义 listener      */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"web 应用启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"web 应用销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> ServletListenerRegistrationBean<span class="token operator">&lt;</span>MyListener<span class="token operator">></span> <span class="token function">servletListenerRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBean</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="其他容器"><a href="#其他容器" class="headerlink" title="其他容器"></a>其他容器</h3><ol><li>Jetty 适用于长连接应用。</li><li>Undertow 高性能非阻塞，并发性能非常强，但不支持 JSP。</li></ol><p>内嵌式的 Servlet 容器切换方法: 只需将默认的 Tomcat 依赖排除，然后引入其他内嵌式 Servlet 容器依赖即可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot(三):日志</title>
      <link href="/posts/770cd4b7/"/>
      <url>/posts/770cd4b7/</url>
      
        <content type="html"><![CDATA[<h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><p>市场上存在多种日志框架，日志接口有 JCL、SLF4J 和 jboss-logging，日志具体实现有 Log4j、Logback、JUL 和 Log4j2。其中 JUL 是 Java 官方日志；JCL 和 Log4j2 是 Apache 开发的日志接口；SLF4J、Log4j 和 Logback 是由同一作者开发完成，所以适配性较好，当中的 Log4j 存在性能问题，其升级版为 Logback。</p><h2 id="SLF4J"><a href="#SLF4J" class="headerlink" title="SLF4J"></a>SLF4J</h2><ol><li>SLF4J 是针对日志框架开发的一个统一接口层，因此只需实现 SLF4J 即可使用日志功能，这样分层的好处是更改日志接口的实现框架依赖便可完成日志框架的升级。</li><li>Spring Boot 的底层是 Spring 框架，而 Spring 框架默认是用 JCL 日志接口，但是 Spring Boot 默认排除了 JCL 依赖，使用 SLF4J 和 Logback 作为自己的日志框架。</li><li>SLF4J 针对按自己接口实现的日志框架只需导入日志实现框架依赖即可，而针对不是按自己接口的日志实现框架则需要额外导入一个适配依赖，才能完成日志功能。适配依赖的原理即实现 SLF4J 接口，实现方式就是包装对应的日志实现框架方法。<br> <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/concreteBindings.png"></li><li>每个日志实现框架都有自己的配置文件，即使使用了 SLF4J，配置文件还是使用日志实现框架的配置文件。</li></ol><h2 id="统一日志框架"><a href="#统一日志框架" class="headerlink" title="统一日志框架"></a>统一日志框架</h2><p>Spring Boot 整合了许多框架，而每一个框架使用的可能都不是同一个日志框架，因此需要对这些框架的日志框架进行统一。将日志框架统一成 SLF4J 的步骤如下:</p><ol><li>先排除系统中其他日志实现框架的依赖。</li><li>用中间包来替换排除的日志实现框架依赖，否则会报错。中间包的原理即覆写排除了的日志实现框架，将其所有方法的原有调用都转为调用 SLF4J 的方法，这样即可防止报错并实现功能。</li><li>之后导入 SLF4J 和日志实现框架依赖(根据日志实现框架选择是否需要添加适配依赖)。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/legacy.png"></p><h2 id="日志默认配置"><a href="#日志默认配置" class="headerlink" title="日志默认配置"></a>日志默认配置</h2><h3 id="全局常规设置"><a href="#全局常规设置" class="headerlink" title="全局常规设置"></a>全局常规设置</h3><p>Spring Boot 自配配置了默认的日志配置，可以在<code>application.yml</code>中修改部分配置。</p><h3 id="修改日志输出文件位置"><a href="#修改日志输出文件位置" class="headerlink" title="修改日志输出文件位置"></a>修改日志输出文件位置</h3><p>在<code>application.yml</code>中可以通过<code>logging.file</code>和<code>logging.path</code>指定配置文件位置(只能二选一，两个都写默认生效<code>logging.file</code>)。</p><ol><li><code>logging.file</code>在不指定路径时则在当前项目下生成 springboot.log 日志文件，指定路径时则按指定的完整路径存放日志文件。例如: <code>logging.file: G:/springboot.log</code>。</li><li><code>logging.path</code>在指定路径下创建文件夹并使用 spring.log 作为默认日志文件。例如: <code>logging.path: /spring/log</code>则表示在项目所在磁盘的根目录下创建 spring 文件夹和其中的 log 文件夹并生成一个 spring.log 的日志文件。</li></ol><h3 id="自定义日志配置文件"><a href="#自定义日志配置文件" class="headerlink" title="自定义日志配置文件"></a>自定义日志配置文件</h3><p>当要使用自定义日志配置文件而非 Spring Boot 的默认日志配置时，可以通过在类路径下放上相应的日志实现框架的配置文件即可。</p><table><thead><tr><th>日志系统</th><th>自定义配置文件</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>或<code>logback.xml</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code>或<code>log4j2.xml</code></td></tr><tr><td>JUL</td><td><code>logging.properties</code></td></tr></tbody></table><p>其中没有加<code>spring</code>尾缀的配置会跳过 Spring Boot 直接被日志实现框架识别；增加了尾缀的日志实现框架不直接加载日志配置，而是由 Spring Boot 解析日志配置，因此可以在日志的配置文件中使用 Spring Boot 的高级 Profile 功能。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 可以指定该日志配置只在 dev 应该环境下才被加载。修改 dev 可以修改为其它应用环境。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot(二):配置文件</title>
      <link href="/posts/8996d24c/"/>
      <url>/posts/8996d24c/</url>
      
        <content type="html"><![CDATA[<h2 id="YAML-配置文件"><a href="#YAML-配置文件" class="headerlink" title="YAML 配置文件"></a>YAML 配置文件</h2><p>Spring Boot 可以使用 YAML 进行全局配置。YAML 是以数据为中心的标记语言，比 JSON、XML 等更适合做配置文件。YAML 通过缩进表示层级关系，且支持三种数据结构：对象(键值对集合)、数组和字面量(单个、不可再分的值)。</p><ul><li><p>字面量: 即数字、字符串和布尔值。通过<code>k: v</code>的方式书写，字符串默认不用加上引号。也可以使用单引号或双引号，其中单引号会转义特殊字符。字符串也可以写成多行，但从第二行开始必须有一个空格缩进，换行符会被转义为空格。</p></li><li><p>对象: 假设有一对象为 student，其中有 lastName 和 age 的属性，其 YAML 写法如下：</p><pre class=" language-yaml"><code class="language-yaml">  <span class="token key atrule">student</span><span class="token punctuation">:</span>    <span class="token key atrule">lastName</span><span class="token punctuation">:</span> xx    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">12</span></code></pre><p>  也可以采用行内写法：<code>student: {lastName: xx, age: 12}</code></p></li><li><p>数组: 用连线词<code>-</code>来表示数组中的一个元素，一组<code>-</code>开头的行构成一个数组，其写法如下:</p><pre class=" language-yaml"><code class="language-yaml">  <span class="token key atrule">pets</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> cat    <span class="token punctuation">-</span> dog    <span class="token punctuation">-</span> pig</code></pre><p>  也可以采用行内写法：<code>pets: [cat, dog, pig]</code></p></li><li><p>复合结构: 即字面量、对象和数组的复合使用。</p></li><li><p>将配置文件中的属性值映射至 bean。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/22 10:50   * @Description dog entity   */</span>  <span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-yaml"><code class="language-yaml">  <span class="token key atrule">person</span><span class="token punctuation">:</span>    <span class="token key atrule">lastName</span><span class="token punctuation">:</span> LaoZhang    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">11</span>    <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2019/5/5    <span class="token key atrule">map</span><span class="token punctuation">:</span>      <span class="token key atrule">key1</span><span class="token punctuation">:</span> value1      <span class="token key atrule">key2</span><span class="token punctuation">:</span> value2    <span class="token key atrule">list</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> LaoWang      <span class="token punctuation">-</span> LaoLi    <span class="token key atrule">dog</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> 小狗      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">2</span></code></pre><p>  可以在 resources 下新建 META-INF 文件夹，并新建 additional-spring-configuration-metadata.json 输入如下代码为 YAML 添加 person。</p><pre class=" language-yaml"><code class="language-yaml">  <span class="token punctuation">{</span>    <span class="token key atrule">"properties"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"person.dog.name"</span><span class="token punctuation">,</span>        <span class="token key atrule">"type"</span><span class="token punctuation">:</span> <span class="token string">"java.lang.String"</span><span class="token punctuation">,</span>        <span class="token key atrule">"description"</span><span class="token punctuation">:</span> <span class="token string">"Description for person.dog.name."</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"person.dog.age"</span><span class="token punctuation">,</span>        <span class="token key atrule">"type"</span><span class="token punctuation">:</span> <span class="token string">"java.lang.Integer"</span><span class="token punctuation">,</span>        <span class="token key atrule">"description"</span><span class="token punctuation">:</span> <span class="token string">"Description for person.dog.age."</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><p>  方法一: 使用<code>@ConfigurationProperties</code>注解，需要添加依赖<code>spring-boot-configuration-processor</code>。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/22 10:45   * @Description Person entity   */</span>  <span class="token annotation punctuation">@Data</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>      <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>      <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">;</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list<span class="token punctuation">;</span>      <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>  方法二: 使用<code>@Value()</code>注解获取值，其中可以用 SpEL 表达式获取值，不支持复杂类型封装。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/22 10:45   * @Description Person entity   */</span>  <span class="token annotation punctuation">@Data</span>  <span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${person.lastName}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{11*2}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>      <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>      <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">;</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list<span class="token punctuation">;</span>      <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>  方法三: <code>@ConfigurationProperties</code>支持 JSR303 数据校验。在类上添加注解<code>@validated</code>用于支持 JSR303，在需要接收的数据上加上需要校验格式的注解，例如<code>@Email</code>。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/22 10:45   * @Description Person entity   */</span>  <span class="token annotation punctuation">@Data</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@validated</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Email</span>      <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>      <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>      <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">;</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list<span class="token punctuation">;</span>      <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="自定义配置文件加载"><a href="#自定义配置文件加载" class="headerlink" title="自定义配置文件加载"></a>自定义配置文件加载</h2><ul><li><p><code>@PropertySource</code>: 通过组合<code>@PropertySource</code>和<code>@ConfigurationProperties</code>可以读取指定 properties 文件中的属性值并映射至 bean。</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">  person.lastName</span><span class="token punctuation">=</span><span class="token attr-value">LaoZhang</span><span class="token attr-name">  person.age</span><span class="token punctuation">=</span><span class="token attr-value">11</span><span class="token attr-name">  person.boss</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">  person.birth</span><span class="token punctuation">=</span><span class="token attr-value">2019/5/5</span><span class="token attr-name">  person.map.key1</span><span class="token punctuation">=</span><span class="token attr-value">value1</span><span class="token attr-name">  person.map.key2</span><span class="token punctuation">=</span><span class="token attr-value">value2</span><span class="token attr-name">  person.list</span><span class="token punctuation">=</span><span class="token attr-value">LaoWang, LaoLi</span><span class="token attr-name">  person.dog.name</span><span class="token punctuation">=</span><span class="token attr-value">小狗</span><span class="token attr-name">  person.dog.age</span><span class="token punctuation">=</span><span class="token attr-value">2</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/22 10:45   * @Description Person entity   */</span>  <span class="token annotation punctuation">@Data</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:person.properties"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>      <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>      <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">;</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list<span class="token punctuation">;</span>      <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p><code>@ImportResource</code>: 该注解用于导入自定义的 Spring 的配置文件，将注解添加至 Spring Boot 应用主程序类上即可，可添加多个 Spring 配置文件。</p><pre class=" language-xml"><code class="language-xml">  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.springbootstudy.service.HelloService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@SpringBootApplication</span>  <span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootStudyApplication</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootStudyApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p><code>@Configuration</code>: Spring Boot 推荐使用全注解的方式添加组件代替配置文件，只需要在类上加<code>@Configuration</code>的注解即可指明该类是配置类。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/11/22 12:42   * @Description 应用注解配置   */</span>  <span class="token annotation punctuation">@Configuration</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplicationConfig</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 将方法的返回值添加到容器中，容器中这个组件默认的id就是方法名。相当于&lt;bean id="helloService", clas=="">&lt;/bean>       * @return 返回 HelloService 对象。       */</span>      <span class="token annotation punctuation">@Bean</span>      <span class="token keyword">public</span> HelloService <span class="token function">helloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h2><p>配置文件中可以使用随机数和占位符，且占位符可设置默认值。例如: <code>person.dog.name</code>引用了<code>person.lastName</code>的值，而<code>person.dog.age</code>引用了<code>hello.age</code>的值，因没有定义<code>hello.age</code>的值，会使用默认值<code>10</code>，最终<code>person.dog.age</code>的值为10。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">lastName</span><span class="token punctuation">:</span> LaoZhang$<span class="token punctuation">{</span>random.uuid<span class="token punctuation">}</span>  <span class="token key atrule">age</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.int<span class="token punctuation">}</span>  <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2019/5/5  <span class="token key atrule">map</span><span class="token punctuation">:</span>    <span class="token key atrule">key1</span><span class="token punctuation">:</span> value1    <span class="token key atrule">key2</span><span class="token punctuation">:</span> value2  <span class="token key atrule">list</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> $<span class="token punctuation">{</span>random.value<span class="token punctuation">}</span>    <span class="token punctuation">-</span> LaoLi  <span class="token key atrule">dog</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>person.lastName<span class="token punctuation">}</span>的小狗    <span class="token key atrule">age</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>hello.age<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">}</span></code></pre><h2 id="环境配置选择"><a href="#环境配置选择" class="headerlink" title="环境配置选择"></a>环境配置选择</h2><h3 id="多文件形式"><a href="#多文件形式" class="headerlink" title="多文件形式"></a>多文件形式</h3><p>Spring Boot 可以在<code>application.yml/properties</code>中通过<code>spring.profiles.active = {profile}</code>来选择应用环境，其中其他配置文件名应为<code>application-{profile}.yml/properties</code>的形式。例如此处应用的主配置应用端口号为 8080，dev 配置文件中应用端口号为 8081，在主配制中激活 dev 配置，则应用端口号变为 8081。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#application-dev.yml</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span></code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#application.yml</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev</code></pre><h3 id="多文档块形式-仅-YAML-支持"><a href="#多文档块形式-仅-YAML-支持" class="headerlink" title="多文档块形式(仅 YAML 支持)"></a>多文档块形式(仅 YAML 支持)</h3><p>在<code>application.yml</code>中可以通过三横杠<code>---</code>的方式划分文档块，每一个文档块相当于一个自定义的配置文件，可以通过<code>spring.profiles = {profile}</code>定义文档块的名字，并使用<code>spring.profiles.active = {profile}</code>的形式激活选定的文档块。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> prod</code></pre><h3 id="激活-profile"><a href="#激活-profile" class="headerlink" title="激活 profile"></a>激活 profile</h3><ol><li>通过配置文件指定，如上。</li><li>通过命令行参数指定，如在<code>Program arguments</code>中输入<code>--spring.profiles.active=dev</code>或<code>java -jar xxx.jar --spring.profiles.active=dev</code></li><li>通过虚拟机参数指定，如在<code>VM options</code>中输入<code>-Dspring.profiles.active=dev</code>。</li></ol><h2 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h2><p>Spring Boot 会自定扫描如下位置的<code>application.properties/yml</code>文件作为默认配置文件。配置加载优先级高低从上至下，其中高优先级的配置会覆盖低优先级的内容。所有位置的文件都会被加载，当配置项相同时会按优先级进行覆盖，而配置项不同时则会全部加载，也就是所谓的配置互补。</p><ol><li><code>file:./config/</code>即项目根目录下的<code>config</code>文件夹。</li><li><code>file:./</code>即项目根目录。</li><li><code>classpath:/config/</code>即<code>resources</code>文件夹下的<code>config</code>文件夹。</li><li><code>classpath:/</code>即<code>resources</code>文件夹。</li></ol><p>Spring Boot 允许通过<code>spring.config.location</code>来改变默认的配置文件位置。如<code>java -jar xxx.jar --spring.config.location=G:/application.yml</code>。(只能在命令行运行 JAR 包时通过该参数改变默认的配置文件位置，会遵循优先级和互补原则)</p><h2 id="配置文件加载顺序"><a href="#配置文件加载顺序" class="headerlink" title="配置文件加载顺序"></a>配置文件加载顺序</h2><p>Spring Boot 也可以从以下位置加载配置(优先级从高到低)，会遵循优先级和互补原则。</p><ol><li>命令行参数。</li><li>来自<code>java:comp/env</code>的 JNDI 属性。</li><li>JAVA 系统属性。</li><li>操作系统环境变量。</li><li>RandomValuePropertySource 配置的<code>random.*</code>属性值。</li><li>JAR 包外部的<code>application-{profile}.properties</code>或<code>application.yml</code>(带<code>Spring.profile</code>)配置文件。</li><li>JAR 包内部的<code>application-{profile}.properties</code>或<code>application.yml</code>(带<code>Spring.profile</code>)配置文件。</li><li>JAR 包外部的<code>application.properties</code>或<code>application.yml</code>(带<code>Spring.profile</code>)配置文件。</li><li>JAR 包内部的<code>application.properties</code>或<code>application.yml</code>(带<code>Spring.profile</code>)配置文件。</li><li><code>@Configuration</code>注解类上的<code>@PropertySource</code>。</li><li>通过 SpringApplication.setDefaultProperties 指定的默认属性。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot(一):简介</title>
      <link href="/posts/5a81c7ce/"/>
      <url>/posts/5a81c7ce/</url>
      
        <content type="html"><![CDATA[<h2 id="服务架构"><a href="#服务架构" class="headerlink" title="服务架构"></a>服务架构</h2><ol><li>传统 WEB 应用服务架构是单体应用模式，即一个 WAR 包包含了项目所有功能，其所带来的优势是使得项目的开发，测试和部署极其方便。但是所带来的缺陷也是极其明显的，当某一功能进行修改时，项目需要重新进行部署。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/singleApplicationMode.png"></li><li>微服务架构即一个应用便是一组小型服务的集合，并且各个服务之间可以通过 HTTP 协议进行互通。当使用微服务架构时，每一个功能元素最终都是一个可独立替换或独立升级的软件单元，而 Spring Boot 可以快速的开发每一个软件单元，之后可通过 Spring Cloud 将所开发软件单元联系起来。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/microservices.png"></li></ol><h2 id="Spring-Boot-优点"><a href="#Spring-Boot-优点" class="headerlink" title="Spring Boot 优点"></a>Spring Boot 优点</h2><ul><li><strong>无需手动管理依赖 JAR 包的版本</strong></li><li><strong>无须配置XML，自动配置，简化开发且可修改默认值</strong></li><li><strong>使用嵌入式的 Servlet 容器，应用无需达成 WAR 包</strong></li><li><strong>外部化配置</strong><br>  Spring Boot 可以使用 properties 文件，YAML文件，环境变量，命令行参数等来外部化配置。</li><li><strong>无缝集成 Spring 技术栈</strong><br>  Spring Boot 通过 stater pom 来导入这些依赖，且自动进行配置。</li><li><strong>devtools提供的开发时特性</strong><br>  Spring Boot 的 devtools 模块可以为应用增加开发时特性，例如开发环境属性默认值。</li><li><strong>Actuator提供的生产特性</strong><br>  Actuator 提供准生产环境的运行时应用监控。</li><li><strong>天然集成云计算</strong></li></ul><h2 id="Spring-Boot-配置原理"><a href="#Spring-Boot-配置原理" class="headerlink" title="Spring Boot 配置原理"></a>Spring Boot 配置原理</h2><p>Spring Boot 将所有的功能场景抽取成为一个个 Starter，只需要在项目中引入这些 Starters，其相关环境的所有依赖都会导入进来。</p><ul><li><strong>@SpringBootApplication</strong><br>  该注解应用于某一个 Java 类上是指该类是 Spring Boot 的主配置类，Spring Boot 将会运行该类的 main 方法来启动 Spring Boot 应用。</li><li><strong>@SpringBootConfiguration</strong><br>  该注解是<code>@SpringBootApplication</code>所包含的注解之一，标注在某一个 Java 类上是指该类是 Spring Boot 的配置类。该注解中包含<code>@Configuration</code>用于表明该类是一个配置类(即配置文件)，通过<code>@Component</code>注解表明配置类是一个组件并能被 Spring 容器扫描到。</li><li><strong>@EnableAutoConfiguration</strong><br>  该注解是<code>@SpringBootApplication</code>所包含的注解之一，用于扫描组件并进行自动配置。该注解通过<code>@AutoConfigurationPackage</code>中的<code>@Import("AutoConfigurationPackages.Registrar.class")</code>将<code>@SpringBootApplication</code>标注的类所在包及其下所有子包内的所有组件扫描入 Spring 容器中，最后通过<code>@Import(EnableAutoConfigurationImportSelector.class)</code>获取需要导入组件的选择器全限定类名添加入 Spring 容器中，并通过自动配置类(xxxAutoConfiguration)为组件自动配置。自动配置类文件包含在 spring-boot-autoconfiguration.jar 包下。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM 整合</title>
      <link href="/posts/f1b3dc5f/"/>
      <url>/posts/f1b3dc5f/</url>
      
        <content type="html"><![CDATA[<h2 id="目录层级"><a href="#目录层级" class="headerlink" title="目录层级"></a>目录层级</h2><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/directoryLevel.png"></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="pom-xml-配置文件"><a href="#pom-xml-配置文件" class="headerlink" title="pom.xml 配置文件"></a>pom.xml 配置文件</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuukokawaii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ssm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>ssm Maven Webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://www.example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Spring --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- SpringMVC --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Mybatis --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- thymeleaf --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.11.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.11.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- alibaba --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.61<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- junit --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13-beta-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- lombok --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- servlet --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- log --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0-alpha0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0-alpha0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>ssm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 编译java目录下的mapper文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-clean-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.22.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-war-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-install-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-deploy-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h3 id="web-xml-配置文件"><a href="#web-xml-配置文件" class="headerlink" title="web.xml 配置文件"></a>web.xml 配置文件</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring容器监听器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 前端控制器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 加载springMVC配置文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springMVC.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 服务器启动时初始化该servlet --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 编码过滤器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h3 id="Spring-配置文件"><a href="#Spring-配置文件" class="headerlink" title="Spring 配置文件"></a>Spring 配置文件</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/tx       http://www.springframework.org/schema/tx/spring-tx.xsd       http://www.springframework.org/schema/aop       https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 注解扫描 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 不扫描controller --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- aop --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 事务管理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mybatis start --></span>    <span class="token comment" spellcheck="true">&lt;!-- 加载jdbc.properties --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- alibaba druid --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClassName}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置初始化大小、最小、最大 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置获取连接等待超时的时间 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxWait<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeBetweenEvictionRunsMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minEvictableIdleTimeMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 这里建议配置为TRUE，防止取到的连接不可用 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnBorrow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnReturn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 这里配置提交方式，默认就是TRUE，可以不用配置 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultAutoCommit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 验证连接有效与否的SQL，不同的数据配置不同 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>validationQuery<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${validationQuery}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filters<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 打开removeAbandoned功能 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>removeAbandoned<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 1800s --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>removeAbandonedTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 关闭abandoned链接时输出错误日志 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logAbandoned<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- sqlSessionFactory --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/kuukokawaii/**/**.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- dao接口所在包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.**.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mybatis end --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/数据库名?serverTimezone=UTC</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">账号</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">密码</span><span class="token attr-name">validationQuery</span><span class="token punctuation">=</span><span class="token attr-value">SELECT 1</span></code></pre><h3 id="Spring-MVC-配置文件"><a href="#Spring-MVC-配置文件" class="headerlink" title="Spring MVC 配置文件"></a>Spring MVC 配置文件</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 注解扫描 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 只扫描controller --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 视图解析器 thymeleaf start --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/views/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.html<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateMode<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTML<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheable<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.SpringTemplateEngine<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.view.ThymeleafViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 视图解析器 thymeleaf end --></span>    <span class="token comment" spellcheck="true">&lt;!-- 过滤静态资源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/css/<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/css/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/js/<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/js/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/images/<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/images/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- FAST_JSON解析 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>text/html;charset=UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>application/json;charset=UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 注解支持 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="Log4j-配置文件"><a href="#Log4j-配置文件" class="headerlink" title="Log4j 配置文件"></a>Log4j 配置文件</h3><pre class=" language-xml"><code class="language-xml">#######################################         log4j配置相关说明#######################################%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL#%r 输出自应用启动到输出该log信息耗费的毫秒数#%c 输出所属的类目，通常就是所在类的全名#%t 输出产生该日志事件的线程名#%m 输出代码中指定的信息#%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MM dd HH:mm:ss,SSS}，输出类似： 2002年10月18日 22：10：28，921#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)#log4j提供4种布局:#org.apache.log4j.HTMLLayout（以HTML表格形式布局）#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息#log4j中有五级logger 输出级别:#FATAL 0#ERROR 3#WARN 4#INFO 6#DEBUG 7#######################################          log4j相关配置#######################################日志输出级别log4j.rootLogger=INFO,stdout,other#设置stdout的日志输出控制台log4j.appender.stdout=org.apache.log4j.ConsoleAppender#输出日志到控制台的方式，默认为System.outlog4j.appender.stdout.Target=System.out#设置使用灵活布局log4j.appender.stdout.layout=org.apache.log4j.PatternLayout#灵活定义输出格式log4j.appender.stdout.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n#设置other的日志输出控制台(RollingFileAppender)/每天生产一个日志文件(DailyRollingFileAppender)log4j.appender.other=org.apache.log4j.DailyRollingFileAppender#设置other的输出日志log4j.appender.other.File=src/main/webapp/WEB-INF/logs/ssm.log#设置other的日志最大限制log4j.appender.other.MaxFileSize=1024KB#最多只保存20个备份文件log4j.appender.other.MaxBackupIndex=1000#输出INFO级别以上的日志log4j.appender.other.Threshold=INFO#设置使用灵活布局log4j.appender.other.layout=org.apache.log4j.PatternLayout#灵活定义输出格式log4j.appender.other.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %t %m %n###显示SQL语句部分log4j.logger.com.mybatis=DEBUGlog4j.logger.com.mybatis.common.jdbc.SimpleDataSource=DEBUGlog4j.logger.com.mybatis.common.jdbc.ScriptRunner=DEBUGlog4j.logger.com.mybatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUGlog4j.logger.java.sql.Connection=DEBUGlog4j.logger.java.sql.Statement=DEBUGlog4j.logger.java.sql.PreparedStatement=DEBUGlog4j.logger.java.sql.ResultSet=DEBUG</code></pre><h2 id="Java-类"><a href="#Java-类" class="headerlink" title="Java 类"></a>Java 类</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/11/20 13:28 * @Description 账户Controller */</span><span class="token annotation punctuation">@Controller</span><span class="token punctuation">(</span><span class="token string">"accountController"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AccountService accountService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">AccountController</span><span class="token punctuation">(</span>AccountService accountService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountService <span class="token operator">=</span> accountService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">findAll</span><span class="token punctuation">(</span>ModelMap modelMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modelMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> accountService<span class="token punctuation">.</span><span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"list"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/11/20 13:21 * @Description 账户dao */</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查找所有账户     * @return 账户集合     */</span>    List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.account.dao.AccountMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.account.entity.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DOUBLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account_column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--@sql SELECT --></span>        account.id, account.name, account.money        <span class="token comment" spellcheck="true">&lt;!--@sql FROM account --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAllAccount<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account_column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        FROM account    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/11/20 13:19 * @Description 账户实体 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> money<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/11/20 13:25 * @Description 账号Service */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查找所有账户     * @return 账户集合     */</span>    List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/11/20 13:27 * @Description 账号Service实现 */</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AccountMapper accountMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">AccountServiceImpl</span><span class="token punctuation">(</span>AccountMapper accountMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountMapper <span class="token operator">=</span> accountMapper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountMapper<span class="token punctuation">.</span><span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="HTML-页面"><a href="#HTML-页面" class="headerlink" title="HTML 页面"></a>HTML 页面</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--/*@thymesVar id="list" type="java.util.List"*/--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account : ${list}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${account.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${account.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${account.money}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之策略模式</title>
      <link href="/posts/99c8c8b1/"/>
      <url>/posts/99c8c8b1/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。即将各个功能拆分封装成模块，最终通过组合的方式实现效果。</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ol><li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</li><li>针对接口编程，而不是针对实现编程。</li><li>多用组合，少用继承。</li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>案例实现过程：</p><ol><li>根据 OO 标准，设计一个鸭子超类，并让各类鸭子继承此超类。</li><li>当需要新增飞行功能时在超类上新增功能飞行，会导致子类不能飞行的鸭子也能够飞行。</li><li>如果仅抽取飞行功能会导致每次新增子类时都需要实现一次飞行接口，这造成了大量代码的重复。</li><li>对飞行接口进行实现，让能飞、不能飞的鸭子在初始化实例变量时调用所需接口即可。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/strategyUML.jpg"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis 概述</title>
      <link href="/posts/c27c399e/"/>
      <url>/posts/c27c399e/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis-概述"><a href="#MyBatis-概述" class="headerlink" title="MyBatis 概述"></a>MyBatis 概述</h2><ol><li>MyBatis 封装了 JDBC，让开发无需花费精力去处理加载驱动、创建连接、创建 Statement 等繁杂的过程。</li><li>MyBatis 通过 XML 或注解的方式将要执行的各种 Statement 配置起来，并通过 Java 对象 和 Statement 中 SQL 的动态参数进行映射生成最终执行的 SQL 语句，最后由 MyBatis 框架执行 SQL 并将结果映射为 Java 对象并返回。</li><li>MyBatis 采用 ORM 思想解决了实体和数据库映射的问题，因此不需要直接操作 JDBC API 便可以完成对数据库的持久化操作。</li></ol><h2 id="mapper-xml-常用标签"><a href="#mapper-xml-常用标签" class="headerlink" title="mapper.xml 常用标签"></a>mapper.xml 常用标签</h2><p>mapper.xml 映射文件是 MyBatis 的核心文件，它存储了操作数据库的 sql 语句。</p><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p><code>resultMap</code> 可以实现将查询结果映射为复杂类型的 POJO。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>用于定义 resultMap 的 id。</td></tr><tr><td>type</td><td>复杂类型的实体全限定名。</td></tr><tr><td>result</td><td>对数据库字段和 Java 变量进行映射。<br> <code>column</code>: 数据库字段。<br><code>jdbcType</code>: 数据库字段类型。<br><code>property</code>：java 变量。</td></tr><tr><td>collection</td><td>关联另一个 resultMap，常用于一对多查询。</td></tr><tr><td>association</td><td>关联另一个 resultMap，常用于一对一查询。</td></tr></tbody></table><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DATE<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><p><code>sql</code> 被用来定义可重用的 sql 代码段，可以通过<code>&lt;include refid='sql 的 id' /&gt;</code>标签进行调用。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--@sql select --></span>    user.id, name, birthday, sex, address    <span class="token comment" spellcheck="true">&lt;!--@sql from user --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p><code>if</code> 提供了一种可选的查找文本功能，符合条件即执行。</p><blockquote><ol><li>#{} 是指引用传入的 Java 变量，jdbcType 可以省略。</li><li>test=”” 也是指传入的 Java 变量。</li></ol></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    from user    where name = #{name, jdbcType=VARCHAR}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and sex = #{sex}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h3><p><code>choose</code> 从多个条件中挑选一个，类似于 switch 语句。<code>when</code> 是条件判断，<code>otherwise</code> 不匹配 <code>when</code> 的其他选项。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    from user    where name = #{name}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and sex = #{sex}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and birthday = #{birthday}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>            and address = #{address}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim, where, set"></a>trim, where, set</h3><p>当使用 <code>if</code> 进行条件匹配时，如果一个条件都不匹配则语句末尾可能以 <code>where</code> 结尾导致 SQL 报错。若匹配的条件非第一项而是其他项则会导致 <code>where and xxx</code> 的语句情况同样会报错。因此 MyBatis 的 <code>where</code> 标签会自动处理该情况，<code>set</code> 标签与 <code>where</code> 标签作用相同。当 <code>where</code> 和 <code>set</code> 标签没有发挥作用时可以通过 <code>trim</code> 自定义格式执行。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            name = #{name}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and sex = #{sex}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--     where 等价于 trim 的如下情形    prefixOverrides: 会移除所有 prefixOverrides 属性中指定的内容(注意此例中的空格是必要的)--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WHERE<span class="token punctuation">"</span></span> <span class="token attr-name">prefixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AND |OR <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            user.id = #{id},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            name = #{name},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            birthday = #{birthday},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            sex = #{sex},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            address = #{address},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    where user.id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- set 等价于 trim 的如下情形 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SET<span class="token punctuation">"</span></span> <span class="token attr-name">prefixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span></code></pre><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p><code>foreach</code> 用于对一个集合进行遍历操作。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>item</td><td>表示集合中每一个元素进行迭代时的别名。</td></tr><tr><td>index</td><td>指定一个别名，用于获取迭代过程中的位置(从下标 0 开始)。</td></tr><tr><td>open</td><td>迭代开始以什么符号开始。</td></tr><tr><td>separator</td><td>迭代时以什么符号作为分隔符。</td></tr><tr><td>close</td><td>迭代结束以什么符号结束。</td></tr></tbody></table><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUserIn<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user    where user.id in    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        #{item}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p><code>bind</code> 元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUsersLike<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 假设传入一个 user 对象，其中有 name 字段 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>%<span class="token punctuation">'</span> + name + <span class="token punctuation">'</span>%<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    select * from user    where name like #{pattern}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="select-delete-update-insert"><a href="#select-delete-update-insert" class="headerlink" title="select, delete, update, insert"></a>select, delete, update, insert</h3><p>insert、select、update 和 delete 分别是 MyBatis 的 CRUD 语句。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>id 需要与 DAO 中的方法名对应。</td></tr><tr><td>parameterType</td><td>表传入的参数类型。</td></tr><tr><td>resultType</td><td>表示返回类型(与 resultMap 二选一)，如果返回的是集合则填写集合所包含的类型。</td></tr><tr><td>resultMap</td><td>表示返回类型(与 resultType 二选一)，返回定义的 resultMap。</td></tr><tr><td>useGeneratedKeys</td><td>更新后返回主键(默认 false)</td></tr><tr><td>keyProperty</td><td>指定在 Java 实体中对应的主键变量名。</td></tr><tr><td>keyColumn</td><td>当主键列不是表中的第一列的时候需要设置，用于指定数据库的主键（默认数据库第一列为主键）。</td></tr></tbody></table><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>,    from user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete    from user, account    using user, account    where user.id = account.id    and user.id = #{id};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            user.id = #{id},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            name = #{name},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    where user.id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            name,        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>values (<span class="token punctuation">"</span></span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #{name},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><h2 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h2><ol><li>一个用户拥有多个账号(一对多使用<code>collection</code>标签)。</li><li>一个账号只能属于一个用户(一对一使用<code>association</code>标签)。</li><li>一个用户可以有多个角色，一个角色可以有多个用户(多对多在各自的 mapper.xml 文件中使用 <code>collection</code> 关联对方的 resultMap 即可)。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/23 16:28 * @Description 用户实体 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accounts<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/30 14:53 * @Description 账户实体 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> User user<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserMapper.xml 一对多设置。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><p>AccountMapper.xml 一对一设置。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><p>查询用户时，如果不需要查询该用户相关联的账号则可以使用延迟加载(懒加载、按需加载)。如果需要查询关联的账号则使用立即加载。</p><blockquote><p>一对多，多对多: 通常情况下都是采用延迟加载。<br>一对一: 通常情况下都是采用立即加载。</p></blockquote><ol><li><p>在 MyBatis 配置文件中开启延迟加载开关。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 开启延迟加载开关 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 用于控制具有懒加载特性的对象的属性的加载情况 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre></li><li><p>一对多延迟加载: 在需要延迟加载的 <code>collection</code> 标签中设置需要延迟加载的 <code>select</code> 方法。例如此处为查询用户延迟加载用户关联的账号。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!--         延迟加载一对多。         select：表示调用其他查询（可以是其他mapper中的查询），此处为查询用户的唯一标识。         column：用户根据 id 查询时，所需要的参数的值。即为 select 中查询提供所需的 id 进行查询。     --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.dao.AccountDao.getAccount<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre></li><li><p>一对一延迟加载：与一对多延迟加载类似。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AccountResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.entity.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!--         延迟加载一对一（多对一）。         select：表示调用其他查询（可以是其他mapper中的查询），此处为查询用户的唯一标识。         column：用户根据 id 查询时，所需要的参数的值。即为 select 中查询提供所需的 id 进行查询。     --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.user.dao.UserDao.getUser<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>缓存适用于经常查询且不经常改变的数据，且数据的正确与否对最终结果影响不大。MyBatis 默认定义了一级缓存和二级缓存，极大的提升了查询效率。</p><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>MyBatis 的一级缓存指的是 SqlSession 对象的缓存。当执行查询之后，查询的结果会同时存入到 SqlSession 中的一块 Map 结构的存储区域中。当我们再次执行查询同样的数据时，MyBatis 会先去 SqlSession 中查询是否拥有该数据，有则直接从缓存中获取。需要注意的是当调用 SqlSession 对象的修改、添加、删除、<code>commit()</code>、<code>close()</code>等方法时，MyBatis 的一级缓存将会被清空。</p><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>MyBatis 的二级缓存指的是 SqlSessionFactory 对象的缓存。由同一个 SqlSessionFactory 对象创建的 SqlSession 对象将共享该缓存。不同于一级缓存，二级缓存需要手动配置，分为三个步骤:</p><ol><li><p>MyBatis 框架开启二级缓存支持。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 开启二级缓存支持。（可以不进行配置，默认 true。） --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre></li><li><p>开启当前映射文件的二级缓存支持。<code>&lt;cache-ref/&gt;</code>可以引用其它映射文件的缓存。</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 在 mapper 标签下开启二级缓存支持， --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/></span></span></code></pre></li><li><p>开启当前方法的二级缓存支持。</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 通过 userCache 属性开启二级缓存 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">useCache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     select     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     from user <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>在 MyBatis 中如果使用注解进行开发(代替了 mapper.xml)，那么就不能使用 XML 的方式进行开发。</p><h3 id="select-注解开发"><a href="#select-注解开发" class="headerlink" title="select 注解开发"></a>select 注解开发</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查询指定的用户 * @param id 需要查询的 user id * @return 返回查找到的 user */</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id};"</span><span class="token punctuation">)</span>User <span class="token function">getUser</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="insert-注解开发"><a href="#insert-注解开发" class="headerlink" title="insert 注解开发"></a>insert 注解开发</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 插入一个用户 * @param user 需要插入的 user * @return 返回插入结果 */</span><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into user (id, name) values (#{id}, #{name});"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">createUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="update-注解开发"><a href="#update-注解开发" class="headerlink" title="update 注解开发"></a>update 注解开发</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 更新已给用户 * @param user 需要更新的 user * @return 返回更新结果 */</span><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update user set id = #{id}, name = #{name} where id = #{id};"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="delete-注解开发"><a href="#delete-注解开发" class="headerlink" title="delete 注解开发"></a>delete 注解开发</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 删除指定用户 * @param id 需要删除用户的 id * @return 返回删除结果 */</span><span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from user where id = #{id};"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="resultMap-注解开发"><a href="#resultMap-注解开发" class="headerlink" title="resultMap 注解开发"></a>resultMap 注解开发</h3><p>MyBatis 提供了<code>@Results</code>、<code>@Result</code>和<code>@ResultMap</code>三个注解用于调用和实现 XML 配置中的 ResultMap 标签。</p><ol><li><code>@Results</code>: 相当于 XML 配置中的<code>ResultMap</code>标签；</li><li><code>@Result</code>: 相当于 XML 配置中<code>ResultMap</code>的子标签<code>result</code>；</li><li><code>@ResultMap</code>: 相当于 XML 配置中方法的<code>resultMap</code>属性，通过填入<code>ResultMap</code>的<code>id</code>与之对应。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查找所有用户 * @return 返回 User 集合 */</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"UserResultMap"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>INTEGER<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">listUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查询指定的用户 * @param id 需要查询的 user id * @return 返回查找到的 user */</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id};"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span><span class="token string">"UserResultMap"</span><span class="token punctuation">)</span>User <span class="token function">getUser</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="多表查询及延迟加载注解开发"><a href="#多表查询及延迟加载注解开发" class="headerlink" title="多表查询及延迟加载注解开发"></a>多表查询及延迟加载注解开发</h3><p>MyBatis 提供了<code>@One</code>和<code>@Many</code>两个注解用于实现 XML 配置中的<code>association</code>标签和<code>collection</code>标签。其中<code>fetchType</code>属性可以选择快速加载或延迟加载。</p><p>一对一查询:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查找所有 Account(立即加载) * @return 返回Account集合 */</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from account"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"AccountResultMap"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>INTEGER<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>INTEGER<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">,</span> one <span class="token operator">=</span> <span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>        select <span class="token operator">=</span> <span class="token string">"com.kuukokawaii.user.dao.UserDao.getUser"</span><span class="token punctuation">,</span> fetchType <span class="token operator">=</span> FetchType<span class="token punctuation">.</span>EAGER    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">listAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一对多查询:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查找所有 User(延迟加载) * @return 返回User集合 */</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"UserResultMap"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>INTEGER<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">,</span> jdbcType <span class="token operator">=</span> JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"accounts"</span><span class="token punctuation">,</span> many <span class="token operator">=</span> <span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>        select <span class="token operator">=</span> <span class="token string">"com.kuukokawaii.user.dao.AccountDao.getAccount"</span><span class="token punctuation">,</span> fetchType <span class="token operator">=</span> FetchType<span class="token punctuation">.</span>LAZY    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">listUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="二级缓存注解开发"><a href="#二级缓存注解开发" class="headerlink" title="二级缓存注解开发"></a>二级缓存注解开发</h3><p>MyBatis 提供了<code>@CacheNamespace</code>用于实现 XML 配置中<code>cache</code>标签的功能，需要注意的是该注解使用于<code>Dao</code>接口上而非方法上。二级缓存可以在 MyBatis 配置文件中进行开启(默认开启)。</p><blockquote><p><code>@CacheNamespaceRef</code>相当于实现 XML 配置中<code>&lt;cache-ref/&gt;</code>标签的功能。</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>readWrite</td><td>读写模式，若为 True 则必须实现序列化接口。</td></tr><tr><td>flushInterval</td><td>刷新时间(单位是毫秒)，这里的刷新是指缓存数据的有效期。</td></tr><tr><td>implementation</td><td>缓存实现自定义对象。</td></tr><tr><td>eviction</td><td>缓存策略的算法。<br><code>LRU</code>(默认): 最近最少使用，移除最长时间不被使用的对象。<br><code>FIFO</code>: 先进先出，按对象进入缓存的顺序来移除它们。<br><code>SOFT</code>: 软引用，移除基于垃圾回收器状态和软引用规则的对象。<br><code>WEAK</code>:  弱引用，更积极地移除基于垃圾收集器和弱引用规则的对象。<br></td></tr><tr><td>size</td><td>设置缓存存放多少个元素。</td></tr><tr><td>blocking</td><td>防止<a href="https://blog.csdn.net/kongtiao5/article/details/82771694" target="_blank" rel="noopener">缓存击穿</a>，对应的实现类为 BlockingCache.putObject。</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@CacheNamespace</span><span class="token punctuation">(</span>blocking <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 内容省略</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC(六):拦截器</title>
      <link href="/posts/a6383749/"/>
      <url>/posts/a6383749/</url>
      
        <content type="html"><![CDATA[<h2 id="Filter-与-Interceptor-的区别"><a href="#Filter-与-Interceptor-的区别" class="headerlink" title="Filter 与 Interceptor 的区别"></a>Filter 与 Interceptor 的区别</h2><ul><li>Filter: 依赖于 Servlet 容器，它的实现基于函数回调，几乎可以对所有的请求进行过滤，通常于容器初始化时调用。</li><li>Interceptor: 依赖于 Spring MVC 框架，它的实现基于 Java 的反射机制，属于 AOP 的一种运用。通常对处理器方法进行预处理和后处理。</li></ul><h2 id="拦截器创建"><a href="#拦截器创建" class="headerlink" title="拦截器创建"></a>拦截器创建</h2><ol><li><p>创建拦截器 MyInterceptor。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/21 19:44 * @Description 自定义拦截器类1 */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor1</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1拦截器预处理，controller 方法执行前运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span>                         ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1拦截器后处理，controller 方法执行后运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span>                                 Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1在视图渲染之后运行，还要再拦截器后处理方法运行之后。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>配置拦截器。</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 配置拦截器 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 配置需要拦截的方法。&lt;mvc:mapping>表需要拦截的方法，&lt;mvc:exclude-mapping>表不需要拦截的方法。path 填写需要拦截的 URI --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 配置拦截器对象 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myInterceptor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.springmvc.interceptor.MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>拦截器的预处理方法中返回值为布尔型，作用为:<ul><li>true: 表放行，执行下一个拦截器，没有则执行 controller 中的方法。</li><li>false: 表不放行，会执行 preHandle() 和 afterCompletion() 方法，但不对 controller 中的方法和 postHandle() 进行执行。</li></ul></li><li>如若有两个拦截器实现 HandlerInterceptor 接口，则其执行顺序为 <code>1pre()→2pre()→controller方法→2post()→1post()→2after()→1after()</code>。<br> <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/executeSequence.jpg"></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC(五):异常处理</title>
      <link href="/posts/6c94e374/"/>
      <url>/posts/6c94e374/</url>
      
        <content type="html"><![CDATA[<h2 id="异常处理方式"><a href="#异常处理方式" class="headerlink" title="异常处理方式"></a>异常处理方式</h2><p>Spring MVC 常用的异常处理方式有两种:</p><ol><li>使用 SpringMVC 提供的 HandlerExceptionResolver 接口自定义异常处理器。</li><li>使用 @ControllerAdvice + @ExceptionHandler 注解实现异常处理。</li></ol><h2 id="接口方式"><a href="#接口方式" class="headerlink" title="接口方式"></a>接口方式</h2><ol><li><p>编写自定义异常种类。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/21 17:06  * @Description 自定义异常  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 存储提示信息(此处省略了 get 和 set)      */</span>     <span class="token keyword">private</span> String message<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">CustomException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>编写异常处理器并配置。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/21 17:14  * @Description 自定义异常处理器  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> ModelAndView <span class="token function">resolveException</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 获取异常对象</span>         CustomException customException<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">CustomException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             customException <span class="token operator">=</span> <span class="token punctuation">(</span>CustomException<span class="token punctuation">)</span> ex<span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             customException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">"系统维护中。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 创建 ModelAndView 存储异常信息并设置返回页面。</span>         ModelAndView modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">,</span> customException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 配置异常处理器 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customExceptionResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.springmvc.exception.CustomExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li></ol><h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><p>使用 @ControllerAdvice + @ExceptionHandler(xx.class) 注解编写全局异常处理器。其中有 @ControllerAdvice 这个注解的类中的方法的某些注解会应用到所有的 Controller 里，例如 @ExceptionHandler。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/21 17:37 * @Description 基于 @ExceptionHandler 处理异常。 */</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 基于 @ExceptionHandler 的异常处理。     * @param exception 异常信息     * @return 返回视图模型     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    ModelAndView <span class="token function">exceptionHandler</span><span class="token punctuation">(</span>Exception exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取异常对象</span>        CustomException customException<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">CustomException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            customException <span class="token operator">=</span> <span class="token punctuation">(</span>CustomException<span class="token punctuation">)</span> exception<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            customException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">"系统维护中。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建 ModelAndView 存储异常信息并设置返回页面。</span>        ModelAndView modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">,</span> customException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC(四):文件上传</title>
      <link href="/posts/5d4b2943/"/>
      <url>/posts/5d4b2943/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>当 form 表单的 enctype 取值不是默认值后，request.getParameter()将失效。</li><li>当<code>enctype="application/x-www-form-urlencoded"</code>时，form 表单的正文内容是: <code>key=value&amp;key=value</code>。</li><li>当<code>enctype="multipart/form-data"</code>时， form 表单的正文内容就变成每一部分都是 MIME 类型描述的正文。</li><li>后端解析请求体获取 MIME 类型描述的正文(即上传的文件)，并将上传文件写回磁盘存储。</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>form 表单的 enctype 取值必须是 multipart/form-data(enctype 默认值为 application/x-www-form-urlencoded)。</li><li>method 取值必须是 Post。</li><li>提供文件选择域<code>&lt;input type="file" name=""&gt;</code>，该标签 name 属性必须有，否者会导致 fileItem 获取不到值。</li></ol><h2 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h2><p>使用到的 Jar 包: commons-fileupload.jar(原生 API 解析请求体)。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/testOldFileUpload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    选择文件: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/20 15:07 * @Description 文件上传 */</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 利用 fileupload 解析请求体。     * @param request 请求     * @return 返回到 success 页面。     * @throws Exception 异常     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testOldFileUpload"</span><span class="token punctuation">)</span>    String <span class="token function">testOldFileUpload</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.上传位置创建文件夹。</span>        String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/uploads/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 2.创建 DiskFileItemFactory 存储大于 10kb 的临时文件。</span>        DiskFileItemFactory diskFileItemFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.创建 ServletFileUpload 负责处理上传的文件数据。</span>        ServletFileUpload servletFileUpload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>diskFileItemFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>FileItem<span class="token operator">></span> fileItems <span class="token operator">=</span> servletFileUpload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileItem fileItem <span class="token operator">:</span> fileItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断当前 fileItem 对象是否是上传文件项,true 不是，false 是。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileItem<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置文件名称为唯一值 uuid。</span>                String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 获取上传文件的名称，并与 uuid 组合。</span>                String fileName <span class="token operator">=</span> uuid <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 上传文件</span>                fileItem<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 删除临时 fileItem 文件。</span>                fileItem<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Spring-MVC-方式"><a href="#Spring-MVC-方式" class="headerlink" title="Spring MVC 方式"></a>Spring MVC 方式</h2><ol><li><p>在 SpringMVC 的配置文件中配置文件解析器，要求 id 名称必须为 multipartResolver。</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 文件解析器，要求 id 名称必须为 multipartResolver --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10485760<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>SpringMVC 框架提供了 MultipartFile 对象表示上传的对象，该对象要求变量名称和表单 file 标签的 name 属性名称相同。</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/testSpringMvcFileUpload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     选择文件: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/20 15:07  * @Description 文件上传  */</span> <span class="token annotation punctuation">@Controller</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 使用 MultipartFile 对象上传文件。      * @param upload 参数名称必须与文件上传 input 标签的 name 相同。      * @return 返回到 success 页面。      * @throws IOException io 异常      */</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testSpringMvcFileUpload"</span><span class="token punctuation">)</span>     String <span class="token function">testSpringMvcFileUpload</span><span class="token punctuation">(</span>MultipartFile upload<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 1.上传位置创建文件夹。</span>         String path <span class="token operator">=</span> <span class="token string">"D:\\JetBrains\\IdeaProjects\\springmvc\\target\\springmvc\\uploads\\"</span><span class="token punctuation">;</span>         File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 设置文件名称为唯一值 uuid。</span>         String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 获取上传文件的名称，并与 uuid 组合。</span>         String fileName <span class="token operator">=</span> uuid <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> upload<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 上传文件</span>         upload<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h2 id="跨服务器上传文件"><a href="#跨服务器上传文件" class="headerlink" title="跨服务器上传文件"></a>跨服务器上传文件</h2><ol><li><p>新建一个 maven 的 webapp 项目，在 webapp 目录下新建 uploads 目录，启动该项目的 Tomcat(注意端口不要重复)。</p></li><li><p>在客户端项目下导入 com.sun.jersey 下的 jersey-core.jar 和 jersey-client.jar 包，编写服务程序并启动 Tomcat。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/20 15:07  * @Description 文件上传  */</span> <span class="token annotation punctuation">@Controller</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 跨服务器上传文件。      * @param upload 参数名称必须与文件上传 input 标签的 name 相同。      * @return 返回到 success 页面。      * @throws IOException io 异常      */</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testCrossServerFileUpload"</span><span class="token punctuation">)</span>     String <span class="token function">testCrossServerFileUpload</span><span class="token punctuation">(</span>MultipartFile upload<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 1.定义上传文件服务器路径。</span>         String path <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8081/uploads/"</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置文件名称为唯一值 uuid。</span>         String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 获取上传文件的名称，并与 uuid 组合。</span>         String fileName <span class="token operator">=</span> uuid <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> upload<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 创建客户端对象</span>         Client client <span class="token operator">=</span> Client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 和图片服务器进行连接(文件名可能中文转码)</span>         WebResource webResource <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>path <span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 上传文件</span>         webResource<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>upload<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/testCrossServerFileUpload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     选择文件: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li></ol><blockquote><p>如果报错的话，需要注意第一个项目的 Tomcat 中的 webapp 中以及 target 或 out 目录下适当位置是否有创建 uploads 目录。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC(三):响应数据和结果视图</title>
      <link href="/posts/4ea6b495/"/>
      <url>/posts/4ea6b495/</url>
      
        <content type="html"><![CDATA[<h2 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h2><ul><li><p>返回值类型 String</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/19 13:40   * @Description 响应数据和结果视图控制器   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试返回字符串       * @param model 模型       * @return 返回       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testString"</span><span class="token punctuation">)</span>      String <span class="token function">testString</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 模拟从数据库中查询出 User 对象</span>          User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 设置返回携带的参数</span>          model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 返回到的页面</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">isELIgnored</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>success 界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>跳转成功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  账户: ${user.username}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  密码: ${user.password}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  年龄: ${user.age}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>返回值类型 void</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/19 13:40   * @Description 响应数据和结果视图控制器   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试无返回值类型。1、转发 2、重定向 3、直接响应       * @param request  Servlet 原生API request       * @param response Servlet 原生API response       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testVoid"</span><span class="token punctuation">)</span>      <span class="token keyword">void</span> <span class="token function">testVoid</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 1、转发(不会使用视图解析器)</span>          request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/pages/success2.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*           * // 2、重定向(无法跳转至 WEB-INF 下，且不会使用视图解析器)           * response.sendRedirect("/success2.jsp");           * // 3、直接响应，设置中文编码，防止中文乱码。           * response.setCharacterEncoding("UTF-8");           * response.setContentType("text/html;charset=UTF-8");           * response.getWriter().print("你好");           */</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>返回值类型 ModelAndView</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/19 13:40   * @Description 响应数据和结果视图控制器   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试 ModelAndView       * @param modelAndView 模型与视图       * @return 返回 modelAndView 对象       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testModelAndView"</span><span class="token punctuation">)</span>      ModelAndView <span class="token function">testModelAndView</span><span class="token punctuation">(</span>ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token punctuation">{</span>          User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 设置返回携带的参数</span>          modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 设置返回的页面</span>          modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>success 界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>跳转成功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  账号: ${user.username}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  密码: ${user.password}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  年龄: ${user.age}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用 forward 和 redirect 关键字</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/19 13:40   * @Description 响应数据和结果视图控制器   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 使用关键字的方式进行转发或重定向(不会使用视图解析器)。       * @return 转发或重定向的目标位置       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testForwardOrRedirect"</span><span class="token punctuation">)</span>      String <span class="token function">testForwardOrRedirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 1、转发(不会使用视图解析器)</span>          <span class="token keyword">return</span> <span class="token string">"forward:/WEB-INF/pages/success.jsp"</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*           * // 2、重定向(无法跳转至 WEB-INF 下，且不会使用视图解析器)           * return "redirect:success2.jsp";           */</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="JSON-数据处理"><a href="#JSON-数据处理" class="headerlink" title="JSON 数据处理"></a>JSON 数据处理</h2><ul><li><p>过滤静态资源</p><p>  由于 dispatcherServlet 会拦截所有的资源，导致在请求静态资源时也会被拦截。为此需要通过 SpringMVC 的配置文件配置对静态资源不进行拦截。</p><pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!-- 设置不拦截的资源(静态资源)，静态资源在 WEB-INF 的 static 文件夹下。 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>发送 AJAX 请求</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">taglib</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">uri</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/tags/form<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>index 界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>JSON 数据处理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testAjax<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送 AJAX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>static/js/jquery-3.4.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#testAjax"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                      url<span class="token punctuation">:</span> <span class="token string">"/user/testAjax"</span><span class="token punctuation">,</span>                      contentType<span class="token punctuation">:</span> <span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">,</span>                      data<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                          <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"你"</span><span class="token punctuation">,</span>                          <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"123"</span><span class="token punctuation">,</span>                          <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">11</span>                      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      dataType<span class="token punctuation">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>                      type<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>                      success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token comment" spellcheck="true">//此处 data 是服务器端响应的 json 格式的数据。</span>                          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"username:"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"password"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>                          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"age"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>返回 JSON 格式数据</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/19 13:40   * @Description 响应数据和结果视图控制器   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 模拟异步请求响应。       * @param user 获得封装好的 User 类数据。       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testAjax"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@ResponseBody</span>      User <span class="token function">testAjax</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 客户端发送 AJAX 请求传送的是 JSON 格式的数据，后端把 JSON 格式的数据封装到对应的对象中(此处为 User)。</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 将获得的对象修改其中姓名属性并返回。</span>          user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"我"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> user<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC(二):常用注解</title>
      <link href="/posts/a169086a/"/>
      <url>/posts/a169086a/</url>
      
        <content type="html"><![CDATA[<h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="RequestParam"></a>RequestParam</h2><ul><li><p>作用: 把请求中指定名称的参数赋值给控制器中的形参。</p></li><li><p>属性:</p><ol><li>value: 请求参数中的名称。</li><li>required: 请求参数中是否必须提供此参数。(默认 true)</li></ol></li><li><p>代码演示:</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/annotation/testRequestParam?username<span class="token punctuation">=</span>1&amp;pw<span class="token punctuation">=</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@requestParam<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/18 14:35   * @Description SpringMVC 常用注解测试   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/annotation"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试 @RequestParam       * @param username 账户名       * @param password 密码       * @return 返回到 success 页面       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestParam"</span><span class="token punctuation">)</span>      String <span class="token function">testRequestParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String username<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"pw"</span><span class="token punctuation">)</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 此处前端必须提供 username 和 pw 的值，此处将前端 username 的值传给 username，而 pw 的值传给 password。</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username="</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">";password="</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="RequestBody"></a>RequestBody</h2><ul><li><p>作用: 用于获取请求体内容，得到 key = value 格式的数据，不适用于 get 请求。</p></li><li><p>属性:</p><ol><li>required: 请求参数中是否必须提供此参数(默认 true)。为 true 时，get 请求方式报错；为 false 时，get 请求得到 null 值。</li></ol></li><li><p>代码演示:</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/annotation/testRequestBody<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>          账号: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>          密码: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/18 14:35   * @Description SpringMVC 常用注解测试   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/annotation"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试 @RequestBody       * @param requestBody 请求参数体       * @return 返回到 success 页面       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestBody"</span><span class="token punctuation">)</span>      String <span class="token function">testRequestBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> String requestBody<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="PathVariable"></a>PathVariable</h2><ul><li><p>作用: 用于绑定 URL 中的占位符，常用于 REST 风格 URL。例如: /delete/{id}，其中{id}就是 URL 占位符。</p></li><li><p>属性:</p><ol><li>value: 用于指定 URL 中占位符名称。</li><li>required: 是否必须提供占位符。</li></ol></li><li><p>代码演示:</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/annotation/testPathVariable/账号<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@PathVariable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/18 14:35   * @Description SpringMVC 常用注解测试   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/annotation"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试 @PathVariable       * @param username REST 风格 URL 参数       * @return 返回到 success 页面       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testPathVariable/{username}"</span><span class="token punctuation">)</span>      String <span class="token function">testPathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>衍生问题: form 只支持 GET 与 POST 请求，因此可以使用 HiddenHttpMethodFilter 过滤器更改指定的请求。如果 controller 方法上不添加 @ResponseBody 会报 jsp 不支持该方法，这是因为在tomcat8以上版本是不支持 delete 和 post 请求，此时可以通过 @ResponseBody 注解解决问题，但后端无法直接跳转页面。</p><pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!-- 支持更多的表单提交方式，出现 web-app 报错需要升级 xml 的头部信息 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>hiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>hiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/annotation/testPathVariable/账号<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DELETE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>          账号: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 测试 @PathVariable。   *   * @param username REST 风格 URL 参数   * @return 返回到 success 页面   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testPathVariable/{username}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span>  <span class="token annotation punctuation">@ResponseBody</span>  String <span class="token function">testPathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除: "</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="RequestHeader"></a>RequestHeader</h2><ul><li><p>作用: 用于获取请求消息头。</p></li><li><p>属性:</p><ol><li>提供消息头名称。</li><li>是否必须有此消息头。</li></ol></li><li><p>代码演示:</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/annotation/testRequestHeader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@RequestHeader<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 测试 @RequestHeader   * @param header 获取某个具体头属性的值。   * @return 返回到 success 页面。   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"testRequestHeader"</span><span class="token punctuation">)</span>  String <span class="token function">testRequestHeader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">)</span> String header<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="CookieValue"></a>CookieValue</h2><ul><li><p>作用: 用于把指定 cookie 名称的值传入控制器方法参数。</p></li><li><p>属性:</p><ol><li>value: 指定 cookie 的名称。</li><li>required: 是否必须有此 cookie。</li></ol></li><li><p>代码演示:</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/annotation/testCookieValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@CookieValue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">/**   * 测试 @CookieValue   * @param cookieValue 获取某个具体 cookie 的值。   * @return 返回到 success 页面。   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"testCookieValue"</span><span class="token punctuation">)</span>  String <span class="token function">testCookieValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">)</span> String cookieValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookieValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="ModelAttribute"></a>ModelAttribute</h2><ul><li><p>作用: 可以作用于参数和方法上。作用于参数上时，获取指定的数据给参数赋值；作用于方法上时，表示当前方法会在控制器的其它方法执行前执行。</p></li><li><p>属性:</p><ol><li>value: 用于获取数据的 key。key 可以是 POJO 的属性名称，也可以是 map 结构的 key。</li></ol></li><li><p>应用场景: 当表单提交的数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原有的数据。例如用户类拥有账号和密码两个字段，而对数据库用户进行更新时规定账号不能进行修改，只能对密码进行修改，因此一旦进行更新时账号字段就会变为 null，此时就可以使用此注解解决该问题。</p></li><li><p>案例说明: 提交的 User 类是没有被填充 Date 属性的，在 controller 方法中将 Date 属性进行填充。</p></li><li><p>代码演示:</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/16 22:03   * @Description 用户实体   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 省略了 get 和 set</span>      <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token keyword">private</span> Date date<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token string">"User{userName="</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", date="</span> <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/annotation/testModelAttribute<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>          姓名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>          年龄: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p> ModelAttribute 修饰方法带返回值: constUserName() 会先获得一个拥有 Date 属性的 User 类，然后将 testModelAttribute() 获得的 User 类其他属性填充入之前的 User 类。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 测试 @ModelAttribute   * @param user 获取用户设置好名字和年龄的 User 类属性，并将该 User 类的属性填充入之前 constUserName 的 User 类中，最终获得的是在 constUserName   *             返回的类上填充了名字和年龄的 User 类。   * @return 返回到 success 页面。   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"testModelAttribute"</span><span class="token punctuation">)</span>  String <span class="token function">testModelAttribute</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 提前获取到 User 类，并为 User 类填充 Date 属性。   * @param user 不带 Date 的 User 封装类。   * @return 将设置了 Date 的 User 封装类返回。   */</span>  <span class="token annotation punctuation">@ModelAttribute</span>  User <span class="token function">constUserName</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>      user<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> user<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>  ModelAttribute 修饰方法不带返回值</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 测试 @ModelAttribute   * @param user 从 map 获取 User 类，并将从请求中获得的 User 类属性封装入该 User 类中。   * @return 返回到 success 页面。   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"testModelAttribute"</span><span class="token punctuation">)</span>  String <span class="token function">testModelAttribute</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 提前获取到 User 类，并为 User 类填充 Date 属性，将封装好的 User 装入 map 中。   * @param user 不带 Date 的 User 封装类。   * @param map  用于存储封装好的 User 类。   */</span>  <span class="token annotation punctuation">@ModelAttribute</span>  <span class="token keyword">void</span> <span class="token function">constUserName</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>      user<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="SessionAttributes"></a>SessionAttributes</h2><ul><li><p>作用: 用于多次执行控制器方法间的参数共享，作用于类上。(SessionAttribute 作用于参数前，为形参赋值。)</p></li><li><p>属性:</p><ol><li>value: 用于指定存入的属性名称。</li><li>type: 用于指定存入的数据类型。</li></ol></li><li><p>代码演示:</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/annotation/testSessionAttributes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@SessionAttribute<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/annotation/testGetSessionAttributes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Get @SessionAttribute<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/annotation/testDeleteSessionAttributes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Delete @SessionAttribute<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/18 14:35   * @Description SpringMVC 常用注解测试。 @SessionAttributes("test") 表示将request 域中的 key 为 test 的值存一份在 session 域中。   */</span>  <span class="token annotation punctuation">@Controller</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/annotation"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试 @SessionAttribute       * @param model 可以将值存入 request 域，map 格式。       * @return 返回到 success 页面。       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"testSessionAttributes"</span><span class="token punctuation">)</span>      String <span class="token function">testSessionAttributes</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 此处将值存入 request 域。</span>          model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"测试用数据。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 测试获取 session 域中的值。       * @param modelMap 可以从 session 域获取值，map 格式。       * @return 返回到 success 页面。       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"testGetSessionAttributes"</span><span class="token punctuation">)</span>      String <span class="token function">testGetSessionAttributes</span><span class="token punctuation">(</span>ModelMap modelMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>          String test <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> modelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 清空 session 域。       * @param sessionStatus 获得 session 域的状态。       * @return 返回到 success 页面。       */</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"testDeleteSessionAttributes"</span><span class="token punctuation">)</span>      String <span class="token function">testDeleteSessionAttributes</span><span class="token punctuation">(</span>SessionStatus sessionStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>          sessionStatus<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!-- 获得 request 域中的值 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>${requestScope.get("test")}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 获得 session 域中的值 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>${sessionScope.get("test")}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven:No Archetype Found</title>
      <link href="/posts/693d333f/"/>
      <url>/posts/693d333f/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在创建 maven 项目时，选择 org.apache.maven.archetypes:maven-archetype-webapp 的 archetype 时，出现项目初始化失败的情况。报错情况如下:<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/maven_archetype_warning.png"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在创建项目时，配置 archetypeCatalog 的属性为 internal 即可解决问题。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/maven_archetype_resolve.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>给 maven 配置了阿里源导致了如上问题，可能是阿里源的 archetype-catalog.xml 文件出现了问题。其中 archetype-catalog.xml 能提供 Archetype 的信息，常用的属性有 internal、local 和 remote 三个属性。</p><ul><li>internal: maven-archetype-plugin 内置的 Archetype Catalog。</li><li>local: 指向本地的 Archetype Catalog ，其位置为~/.m2/archetype-catalog.xml。需要注意的是，该文件默认是不存在的。</li><li>remote: 指向了Maven中央仓库的Archetype Catalog。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Problem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC(一):简介</title>
      <link href="/posts/5b0307f9/"/>
      <url>/posts/5b0307f9/</url>
      
        <content type="html"><![CDATA[<h2 id="服务器三层架构"><a href="#服务器三层架构" class="headerlink" title="服务器三层架构"></a>服务器三层架构</h2><p>JavaEE 常基于 B/S 架构进行开发，而在 B/S 架构中系统标准的三层架构包括: 表现层、业务层和持久层。</p><ul><li>表现层(web 层)<br>  表现层用于接收客户端请求，并向客户端响应结果。它包括展示层和控制层，其中展示层负责展示结果，而控制层负责接收请求。因此表现层依赖于业务层，当接收到客户端的请求时一般会调用业务层进行处理，并将处理结果返回给客户端。</li><li>业务层(service 层)<br>  业务层负责业务逻辑的处理，当需要对数据进行持久化操作时需要保证事务的一致性，因此业务层可能依赖于持久层，且事务应该在业务层进行控制。</li><li>持久层(dao 层)<br>  持久层负责数据持久化操作，包括数据层即数据库和数据访问层，其中数据库是对数据进行持久化的载体，而数据访问层是业务层和持久层交互的接口。业务层需要通过数据访问层将数据持久化到数据库中。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/3-tierArchitecture.jpg"></p><h2 id="MVC-设计模型"><a href="#MVC-设计模型" class="headerlink" title="MVC 设计模型"></a>MVC 设计模型</h2><p>MVC(Model View Controller)是一种用于设计创建 Web 应用程序表现层的模式，它包括 Model、View 和 Controller 三部分:</p><ul><li>Model(模型): 常指数据模型，一般用于封装数据。例如 JavaBean。</li><li>View(视图): 常指前端视图，一般用于显示数据。例如 Html。</li><li>Controller(控制器): 是应用程序中处理用户交互的部分，一般用于处理程序逻辑。例如 Servlet。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/MVC.jpg"></p><h2 id="SpringMVC-架构"><a href="#SpringMVC-架构" class="headerlink" title="SpringMVC 架构"></a>SpringMVC 架构</h2><ul><li>Spring MVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架。它通过一套注解让一个简单的 Java 类成为处理请求的控制器，而无需实现任何接口。同时它还支持 RESTful 编程风格的请求。</li><li>Spring MVC 拥有诸多优势，例如:<ol><li>是基于模块化开发的架构，拥有清晰的角色划分。</li><li>可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。</li><li>可定制，通过 HandlerMapping、ViewResolver 等能够非常简单的进行定制。</li><li>功能强大的数据验证、格式化、绑定机制。</li><li>利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/springMVC.jpg"></p><h2 id="SpringMVC-工作流程"><a href="#SpringMVC-工作流程" class="headerlink" title="SpringMVC 工作流程"></a>SpringMVC 工作流程</h2><ul><li>概念<br>  DispatcherServlet: Spring 前端控制器(中央调度器)，它是整个请求响应的控制中心，组件的调用由它统一调度。<br>  HandlerMapping: 处理器映射器，它根据用户访问的 URL 映射到对应的后端处理器 Handler。<br>  HandlerAdapter: 处理器适配器，它调用 Handler 执行具体的业务操作并返回逻辑视图 ModelAndView 对象。<br>  Handler: Handler，对用户具体请求进行处理(相当于 controller 类)。<br>  ModelAndView 对象: 逻辑视图。<br>  ViewResolver: 视图解析器，将 ModelAndView 逻辑视图解析为具体的视图。</li><li>工作流程<br>  <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/SpringMVCWorkflow.jpg"><br>  如图工作流程可以大致划分为如下步骤:<ol><li>用户向服务器发送请求，请求被 DispatcherServlet 捕获。</li><li>DispatcherServlet 对请求的 URL 进行解析，得到 URI。然后根据 URI 调用 HandlerMapping 获得具体的处理器 Handler 并返回给 DispatcherServlet。</li><li>DispatcherServlet 根据获取的 Handler，选择一个合适的 HandlerAdapter。</li><li>提取 Request 中的模型数据作为 Handler 的参数并执行。(此处可做 HttpMessageConverter，数据转换、数据格式化和数据验证等操作。)</li><li>Handler 执行完成后，HandlerAdapter向 DispatcherServlet 返回一个 ModelAndView 对象，其中 view 是视图名称，并不是真正的视图对象。</li><li>根据返回的 ModelAndView 对象选择一个合适的 ViewResolver 返回给 DispatcherServlet(必须是已经注册到Spring容器中的 ViewResolver)。</li><li>DispatcherServlet 将 ModelAndView 对象传给 ViewResolver。</li><li>ViewResolver 解析后返回具体的 View(例如 html、JSP 等)。</li><li>DispatcherServlet 对 View 进行渲染视图，即将数据模型填充到视图中。</li><li>DispatcherServlet 对用户进行响应。</li></ol></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(六):Transaction</title>
      <link href="/posts/f1c9c4d/"/>
      <url>/posts/f1c9c4d/</url>
      
        <content type="html"><![CDATA[<h2 id="事务简介"><a href="#事务简介" class="headerlink" title="事务简介"></a>事务简介</h2><p>事务是逻辑上的一组操作，要么都执行，要么都不执行。例如某人要在商店使用电子货币购买100元的东西，当中至少包括两个操作: 1.该人账户减少100元；2.商店账户增加100元。这两操作需要同时进行，否则就会出现100元平白消失或出现的情况。因此可以得知事务具有 ACID 的性质。</p><ol><li>原子性(Atomicity): 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li><li>一致性(Consistency): 执行事务前后，数据保持一致；</li><li>隔离性(Isolation): 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li><li>持久性(Durability): 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li></ol><h2 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h2><ul><li><p>事务隔离级别即定义一个事务可能受其他并发时间事务影响的程度。例如多个用户对统一数据操作会导致如下问题的发生:</p><table><thead><tr><th>引发的问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>当一个事务读取到另一个事务正在进行修改却还没有提交到数据库中的数据便称为脏读。</td></tr><tr><td>丢失修改</td><td>两个事务同时读取修改同一数据，后提交事务的修改结果可能导致先提交事务的修改被丢失。</td></tr><tr><td>不可重复读</td><td>当事务 A 读取了数据还未进行提交操作时，而事务 B 也读取了该数据并对其数据进行了修改、提交，此时事务 A 再次读取数据时会发现第一次读取的数据可能与第二次读取的数据是不一样的。常发生于 update 操作之上。</td></tr><tr><td>幻读</td><td>幻读与不可重复读相似，其区别在于幻读发生于 insert 操作之上。</td></tr></tbody></table></li><li><p>事务隔离级别的出现就是为了解决如上四个问题的发生，常用事务隔离级别作用如下:</p><table><thead><tr><th>隔离级别</th><th>描述</th></tr></thead><tbody><tr><td>读未提交</td><td>一个事务可以读取另一个未提交事务的数据。没有解决上述任何问题。</td></tr><tr><td>读已提交</td><td>一个事务要等另一个事务提交后才能读取数据。解决了脏读的问题。</td></tr><tr><td>可重复读</td><td>在事务开始读取数据时不再允许修改操作。解决了丢失修改、不可重复读和脏读的问题。</td></tr><tr><td>序列化</td><td>序列化是最高的事务隔离级别，在该级别下事务串行化顺序执行。解决了上述所有问题。</td></tr></tbody></table></li></ul><h2 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h2><p>事务的传播行为规定了事务方法和事务方法发生嵌套调用时事务是如何进行传播，Spring 为其定义了七种类型的事务传播行为:</p><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRES(默认)</td><td>如果当前有事务则加入该事务(即支持当前事务);如果当前没事务则新建一个事务。</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没事务则以非事务方式执行。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>支持当前事务，如果当前没事务则抛出异常。</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>无论有无事务都新建一个事务且如果当前有事务则挂起该事务(即不支持当前事务)。</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>无论有无事务都以非事务方式执行且不支持当前事务。</td></tr><tr><td>PROPAGATION_NEVER</td><td>如果当前有事务则抛出异常；如果当前没事务则以非事务方式执行。</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前有事务则在该事务内嵌套一个事务执行；如果当前没事务则新建一个事务。</td></tr></tbody></table><h2 id="Spring-事务管理接口"><a href="#Spring-事务管理接口" class="headerlink" title="Spring 事务管理接口"></a>Spring 事务管理接口</h2><p>Spring 需要通过 PlatformTransactionManager(平台事务管理器)、TransactionDefinition(事务属性)和 TransactionStatus(事务运行状态)进行事务的管理。</p><ul><li>PlatformTransactionManager: Spring 必须使用事务管理器才能管理事务。<ul><li>DataSourceTransactionManager: Jdbc 或 Mybatis 开发使用，采用 JdbcTemplate 或 整合 Mybatis。</li><li>HibernateTransactionManager: Hibernate 开发使用，整合 Hibernate。</li></ul></li><li>TransactionDefinition: Spring 用于确定事务具体详情。例如事务隔离级别、传播行为、超时、只读、回滚规则等。当进行事务配置时必须配置详情，Spring 会将配置项封装到该对象实例。</li><li>TransactionStatus: Spring 用于记录当前事务运行状态。例如事务是否有保存点、是否回滚、是否完成等。Spring 底层会根据状态进行相应的操作。</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>使用到的 Jar 包:</p><ol><li>spring-tx.jar</li><li>spring-jdbc.jar</li><li>pring-orm.jar: Spring 提供对部分 ORM(对象关系映射将关系数据库中表的数据映射成为对象)框架的支持。</li></ol><p>公共代码:</p><ol><li><p>创建 AccountDao 接口和实现类。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/7 15:26  * @Description 账户持久层接口  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 支出      * @param outer 支出者      * @param money 支出金额      */</span>     <span class="token keyword">void</span> <span class="token function">expense</span><span class="token punctuation">(</span>String outer<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * 收入      * @param inner 收入者      * @param money 收入金额      */</span>     <span class="token keyword">void</span> <span class="token function">income</span><span class="token punctuation">(</span>String inner<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/7 15:22  * @Description 账户持久层实现类  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDaoImpl</span> <span class="token keyword">extends</span> <span class="token class-name">JdbcDaoSupport</span> <span class="token keyword">implements</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">expense</span><span class="token punctuation">(</span>String outer<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span> <span class="token punctuation">{</span>         Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"UPDATE account SET money = money - ? WHERE username = ?"</span><span class="token punctuation">,</span> money<span class="token punctuation">,</span> outer<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">income</span><span class="token punctuation">(</span>String inner<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span> <span class="token punctuation">{</span>         Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"UPDATE account SET money = money + ? WHERE username = ?"</span><span class="token punctuation">,</span> money<span class="token punctuation">,</span> inner<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>创建 AccountService 接口。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/7 15:34  * @Description Account Service  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 转账      * @param outer 支出者      * @param inner 收入者      * @param money 金额      */</span>     <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String outer<span class="token punctuation">,</span> String inner<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li></ol><h3 id="手动管理方式"><a href="#手动管理方式" class="headerlink" title="手动管理方式"></a>手动管理方式</h3><ol><li><p>创建 AccountDao 实现类。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/7 15:36  * @Description AccountService实现类  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> AccountDao accountDao<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccountDao</span><span class="token punctuation">(</span>AccountDao accountDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>accountDao <span class="token operator">=</span> accountDao<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">private</span> TransactionTemplate transactionTemplate<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTransactionTemplate</span><span class="token punctuation">(</span>TransactionTemplate transactionTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>transactionTemplate <span class="token operator">=</span> transactionTemplate<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String outer<span class="token punctuation">,</span> String inner<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span> <span class="token punctuation">{</span>         transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallbackWithoutResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token annotation punctuation">@Override</span>             <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doInTransactionWithoutResult</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 accountDao<span class="token punctuation">.</span><span class="token function">expense</span><span class="token punctuation">(</span>outer<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>                 accountDao<span class="token punctuation">.</span><span class="token function">income</span><span class="token punctuation">(</span>inner<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>配置事务管理。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                         https://www.springframework.org/schema/beans/spring-beans.xsd                         http://www.springframework.org/schema/context                         https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- jdbc properties --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- c3p0 datasource --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.jdbcUrl}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- dao --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account.dao.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- service --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account.service.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 创建 TransactionTemplate --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.transaction.support.TransactionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器，管理器管理事务，事务存在于 service、dao 等中，它们都可以从 Connection 中获得，而连接从连接池获得，所以需要配置的是连接池。 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>事务测试。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 09/07/2019  * @Description AccountServiceImpl test  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImplTest</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Test</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         String xml <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>         ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>         AccountService accountService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">,</span> AccountService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         accountService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"rose"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h3 id="创建代理方式"><a href="#创建代理方式" class="headerlink" title="创建代理方式"></a>创建代理方式</h3><ol><li><p>配置代理。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                         https://www.springframework.org/schema/beans/spring-beans.xsd                         http://www.springframework.org/schema/context                         https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- jdbc properties --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- c3p0 datasource --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.jdbcUrl}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- dao --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account.dao.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- service 实现类 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account.service.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--         service proxy:              proxyInterfaces: 目标类接口             target: 目标类             transactionManager: 事务管理器             transactionAttributes: 配置 transactionDefinition                 key: 确定哪些方法使用当前事务配置。（一般方法名）                 value: 用于配置事务属性。即 transactionDefinition                     格式: PROPAGATION, ISOLATION, readOnly, -Exception, +Exception（其中-Exception为发生这些异常就回滚，+Exception为发生这些异常仍然提交。）     --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>proxyAccountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.transaction.interceptor.TransactionProxyFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>proxyInterfaces<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account.service.AccountService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionAttributes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transfer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PROPAGATION_REQUIRED, ISOLATION_DEFAULT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- dataSourceTransactionManager --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>事务测试。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 09/07/2019 * @Description AccountServiceImpl test */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImplTest</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Test</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         String xml <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>         ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>         AccountService accountService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"proxyAccountService"</span><span class="token punctuation">,</span> AccountService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         accountService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"rose"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h3 id="AOP-配置基于-xml"><a href="#AOP-配置基于-xml" class="headerlink" title="AOP 配置基于 xml"></a>AOP 配置基于 xml</h3><ol><li><p>AOP 事务配置，手动配置切面。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                         https://www.springframework.org/schema/beans/spring-beans.xsd                         http://www.springframework.org/schema/context                         https://www.springframework.org/schema/context/spring-context.xsd                         http://www.springframework.org/schema/aop                         https://www.springframework.org/schema/aop/spring-aop.xsd                         http://www.springframework.org/schema/tx                         https://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- jdbc properties --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- c3p0 datasource --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.jdbcUrl}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- dao --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account.dao.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- service --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account.service.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- dataSourceTransactionManager --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 事务通知（事务属性）: &lt;tx:method name="transfer" propagation="REQUIRES_NEW" isolation="DEFAULT"/> --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transfer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- AOP --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span>                     <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.kuukokawaii.transaction.account.service.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>事务测试。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 09/07/2019 * @Description AccountServiceImpl test */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImplTest</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Test</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         String xml <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>         ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>         AccountService accountService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">,</span> AccountService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         accountService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h3 id="AOP-配置基于注解"><a href="#AOP-配置基于注解" class="headerlink" title="AOP 配置基于注解"></a>AOP 配置基于注解</h3><blockquote><p>此处Service层添加了@Service 注解，并且 Service 实现类中需要开启事务的方法上需要加上 @Transactional 注解（即 transfer 方法）。</p></blockquote><ol><li><p>AOP 事务配置，开启事务注解。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                         https://www.springframework.org/schema/beans/spring-beans.xsd                         http://www.springframework.org/schema/context                         https://www.springframework.org/schema/context/spring-context.xsd                         http://www.springframework.org/schema/tx                         https://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 包扫描 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.transaction.account<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- jdbc properties --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- c3p0 datasource --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.jdbcUrl}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- jdbcTemplate --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- dataSourceTransactionManager --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--         事务注解开启:              transaction-manager: 将事务管理器交予 Spring。             proxy-target-class:                  true: 底层强制使用 CGLIB 代理。                 false: 自动选择。     --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建 AccountDao 实现类。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/7 15:22  * @Description 账户持久层实现类  */</span> <span class="token annotation punctuation">@Repository</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Autowired</span>     <span class="token keyword">public</span> <span class="token function">AccountDaoImpl</span><span class="token punctuation">(</span>JdbcTemplate jdbcTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcTemplate <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">expense</span><span class="token punctuation">(</span>String outer<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span> <span class="token punctuation">{</span>         jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"UPDATE account SET money = money - ? WHERE username = ?"</span><span class="token punctuation">,</span> money<span class="token punctuation">,</span> outer<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">income</span><span class="token punctuation">(</span>String inner<span class="token punctuation">,</span> Integer money<span class="token punctuation">)</span> <span class="token punctuation">{</span>         jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"UPDATE account SET money = money + ? WHERE username = ?"</span><span class="token punctuation">,</span> money<span class="token punctuation">,</span> inner<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>事务测试。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 09/07/2019  * @Description AccountServiceImpl test  */</span> <span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImplTest</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>     <span class="token keyword">private</span> AccountService accountService<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Test</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         accountService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(五):AOP</title>
      <link href="/posts/fe46fc6a/"/>
      <url>/posts/fe46fc6a/</url>
      
        <content type="html"><![CDATA[<h2 id="AOP-简介"><a href="#AOP-简介" class="headerlink" title="AOP 简介"></a>AOP 简介</h2><p>面向切面编程(Aspect Oriented Programming，AOP)是面向对象程序设计(Object Oriented Programming，缩写为OOP)的延续，利用 AOP 可以对业务逻辑的各个部件进行隔离，从而使得业务逻辑之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>假设有一需求如下: 为 A 类中的所有方法开启事务且不修改 A 类的代码。为此需要再编写一个 B 类继承 A 类并且 B 类的所有方法都要调用 A 类的方法，且在调用方法的上下对事务进行开启和提交，这样做会发现一直在重复的编写开启提交事务的代码。而 AOP 采取横向抽取机制，取代了传统的纵向继承体系重复性代码，也就是说可以提取上述代码中的重复部分达到重复利用的效果。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/AOP.jpg"></p><h2 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h2><p>JDK 动态代理即对装饰器设计模式的简化，使用时需要注意以下几点:</p><ol><li>JDK 动态代理需要采用接口 + 实现类的方法完成，接口是必须的。</li><li>目标类: 需要被代理的类。</li><li>切面类: 用于存放通知 MyAspect。</li><li>工厂类: 用于生成代理。</li></ol><p>代码演示:</p><ol><li><p>创建 UserService 接口和实现类。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/2 15:44  * @Description UserService 接口类。  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 增加用户      */</span>     <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * 更新用户      */</span>     <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * 删除用户      */</span>     <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/2 15:46  * @Description UserService 实现类。  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>创建切面类和工厂类。<a id="MyAspect"></a></p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/2 15:47  * @Description 切面类。  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 代理目标方法前运行。      */</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法运行前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * 代理目标方法后运行。      */</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法运行后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/2 15:49  * @Description 工厂类，用于生成代理类。  */</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanFactory</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 生成代理过的 UserService 对象。      * @return 返回代理生成的 UserService 对象。      */</span>     <span class="token keyword">static</span> UserService <span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 目标类</span>         UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 切面类</span>         MyAspect myAspect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/*          * 代理类 = 目标类 + 切面类          * newProxyInstance参数:          *      1.loader: 类加载器一般情况使用当前类.class.getClassLoader()。          *      2.Class[] interfaces: 代理类需要实现的所有接口。          *          方式1: 目标类实例.getClass().getInterfaces。该方法只能获得自己的接口，无法获得父元素的接口。          *          方式2: new Class[]{UserService.class}。该方法可以获得自己和父元素的接口。          *      3.InvocationHandler: 调用处理接口一般采用匿名内部类进行实现。其中代理类的每一个方法执行时，都将调用一次 invoke。          *          1.proxy: 代理对象。          *          2.method: 代理对象当前执行的方法的描述对象（反射）。          *              执行方法名: method.getName()；          *              执行方法: method.invoke(目标对象，实际参数）；          *          3.Object[] args: 方法实际参数。          */</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>             MyBeanFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             userService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 前执行</span>                 myAspect<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 执行目标类的方法</span>                 Object obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>userService<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 后执行</span>                 myAspect<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> obj<span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>测试及测试结果。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 09/02/2019  * @Description UserServiceImpl test  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImplTest</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Test</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         UserService userService <span class="token operator">=</span> MyBeanFactory<span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         userService<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         userService<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p> <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/JdkResult.png"></p></li></ol><h2 id="CGLIB-字节码增强"><a href="#CGLIB-字节码增强" class="headerlink" title="CGLIB 字节码增强"></a>CGLIB 字节码增强</h2><p>CGLIB 代理主要通过对字节码进行操作以控制对象的访问。CGLIB 在运行时创建目标类的子类，从而对目标类进行增强，因此无需接口便可以实现代理，除此之外和 JDK 动态代理相同。</p><p>使用到的 Jar 包: cglib.jar 或 spring-core.jar(Spring 核心包中整合了 cglib)。</p><p>代码演示:</p><ol><li><p>创建 UserService 目标类(不是接口)。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/2 15:46  * @Description UserService 类  */</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>     <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>创建工厂类和<a href="#MyAspect">切面类</a>。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/2 15:49  * @Description 工厂类，用于生成代理类。  */</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanFactory</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 生成代理后的 UserService 对象。      * @return 返回代理生成的 UserService 对象。      */</span>     <span class="token keyword">static</span> UserService <span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 目标类</span>         UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 切面类</span>         MyAspect myAspect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/*          * 代理类 = 目标类 + 切面类          * 1.创建核心类 Enhancer。          * 2.设置 Enhancer 需要代理的目标类（setSuperclass）。          * 3.设置 Enhancer 的回调函数（setCallback）。MethodInterceptor等效 InvocationHandler。          *      o:代理对象。          *      method:代理对象当前执行的方法的描述对象（反射）。          *      objects:方法实际参数。          *      methodProxy:方法的代理。          * 4.创建代理。          */</span>         Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>MethodInterceptor<span class="token punctuation">)</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> method<span class="token punctuation">,</span> objects<span class="token punctuation">,</span> methodProxy<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 前执行</span>             myAspect<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 执行目标类的方法。该句等效于 methodProxy.invokeSuper(o, objects)。执行代理类的父类，执行目标类（目标类和代理类父子关系）。</span>             Object obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>userService<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 后执行</span>             myAspect<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> obj<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h2 id="Spring-AOP-代理"><a href="#Spring-AOP-代理" class="headerlink" title="Spring AOP 代理"></a>Spring AOP 代理</h2><p>Spring AOP 使用纯 Java 实现(JDK 动态代理)，不需要专门的编译过程和类加载器，在运行期间通过代理方式向目标类植入增强代码。</p><h3 id="半自动"><a href="#半自动" class="headerlink" title="半自动"></a>半自动</h3><p>需要手动在 Spring 配置文件中配置代理。</p><p>使用到的 Jar 包: spring-aop.jar(AOP 的实现)和 aopalliance.jar(AOP 联盟的规范)。</p><p>代码演示:</p><ol><li><p>切面类继承 MethodInterceptor。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/9/2 15:47  * @Description 切面类。  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 代理目标方法前运行</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法运行前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 手动执行目标方法</span>         Object obj <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 代理目标方法后运行。</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法运行后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> obj<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>ApplicationContext 中配置代理。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                             https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 目标类（实现类） --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 切面类 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop.MyAspect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!--         代理类: 使用工厂 bean，底层调用 getObject()，返回特殊 bean。         ProxyFactoryBean: 用于创建代理工厂 bean，生成特殊代理对象。             interfaces: 确定接口类。                 通过&lt;array>可以设置多个值，单值可以仅使用&lt;value>。             target: 确定目标类。             interceptorNames: 通知切面类的名称，类型 String[]。             optimize: boolean true 意思为强制使用 cglib（无论有无接口）。（如果有接口默认使用 jdk 动态代理，没有则使用 cglib 字节码增强）     --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>proxyUserService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.aop.framework.ProxyFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>interfaces<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop.UserService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>interceptorNames<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="全自动"><a href="#全自动" class="headerlink" title="全自动"></a>全自动</h3><p>在配置文件中标识所使用到的类，通过 Spring 自动配置代理，使用时只需注入目标类即可。</p><p>使用到的 Jar 包:</p><ol><li>spring-aop.jar(AOP 的实现)</li><li>aopalliance.jar(AOP 联盟的规范)</li><li>aspectjweaver.jar(Spring 切入点表达式的实现)</li></ol><p>代码演示:</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                        https://www.springframework.org/schema/beans/spring-beans.xsd                        http://www.springframework.org/schema/aop                        https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 目标类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 切面类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop.MyAspect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--        AOP编程:             1.导入命名空间。            2.使用&lt;aop:config>进行配置。proxy-target-class="true"，true: cglib；false: jdk动态代理                &lt;aop:pointcut>: 切入点，从目标对象获得具体方法。                    切入点表达式: execution(* com.kuukokawaii.aop.*.*(..)): 修饰符(可省略) 返回值 包(可省略).类(可省略).方法(参数) throws(可省略)；expression="execution()||execution()" 可匹配多个。                    within: 匹配包或子包中的方法。                    this: 匹配实现接口的代理对象中的方法。                    target: 匹配实现接口的目标对象中的方法。                    args: 匹配参数格式符合标准的方法。                    bean: 匹配指定 bean 中的方法。                &lt;aop:advisor>: 特殊切面，包含一个通知和切入点。                    advice-ref: 通知引用，                    pointcut-ref: 切入点引用。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.kuukokawaii.aop.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h2><p>AspectJ 是一个基于 Java 语言的 AOP 框架(JDK 动态代理)，它扩展了 Java 语言并提供了一个专门的编译器，在编译时提供横向代码的植入。Spring AOP 引入了对 AspectJ 的支持。</p><p>使用到的 Jar 包:</p><ol><li>spring-aop.jar(AOP 的实现)</li><li>aopalliance.jar(AOP 联盟的规范)</li><li>aspectjweaver.jar(Spring 切入点表达式的实现)</li><li>spring-aspects.jar(提供对 AspectJ 的支持)</li></ol><h3 id="基于-XML-配置"><a href="#基于-XML-配置" class="headerlink" title="基于 XML 配置"></a>基于 XML 配置</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/2 15:47 * @Description 切面类。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 前置通知，在目标方法执行之前执行的通知。     * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。     */</span>    <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知。"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后置通知，在目标方法执行之后执行的通知（正常返回后才执行，否则不执行）。     * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。     * @param returning 用于获取返回值。     */</span>    <span class="token keyword">void</span> <span class="token function">myAfterReturning</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Object returning<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知。"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，返回值: "</span> <span class="token operator">+</span> returning<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 环绕通知，在目标方法执行之前和之后都可以执行额外代码的通知。     * @param proceedingJoinPoint 连接点     * @return 返回目标方法。     * @throws Throwable 方法执行异常。     */</span>    Object <span class="token function">myAround</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 前</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 手动执行目标方法。</span>        Object obj <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 后</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 抛出异常通知，在目标方法抛出异常时执行的通知。     * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。     */</span>    <span class="token keyword">void</span> <span class="token function">myAfterThrowing</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抛出异常通知。"</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 最终通知，是在目标方法执行之后执行的通知（没有正常执行，例如抛出异常也能返回）。在后置通知之后执行。     * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。     */</span>    <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知。"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                            https://www.springframework.org/schema/beans/spring-beans.xsd                            http://www.springframework.org/schema/aop                            https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 目标类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 切面类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop.MyAspect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--        aop编程:         &lt;aop:aspect>: 将切面类声明成“切面”，从而获得通知（方法）。            ref: 引用切面类。        &lt;aop:pointcut>: 声明一个切入点，所有的通知都可以使用。            expression: 切入点表达式。            id: 用于其他通知使用。        &lt;aop:before>: 前置通知，目标方法前执行。            method: 通知及方法名。            pointcut: 切入点表达式，此表达式只能当前通知使用。            pointcut-ref: 切入点的引用，可以与其他通知共享切入点。        &lt;aop:after-returning>: 后置通知，目标方法后执行，可获得返回值。            returning: 类型 Object, 用于获取返回值，需要与方法中的参数名相对应。类型 Object。        &lt;aop:around>: 环绕通知。前置通知优先环绕通知执行。        &lt;aop:after-throwing>: 抛出异常通知。抛出异常之后的语句不再执行。            throwing: 用于获取异常信息，需要与方法中的参数名相对应。类型 Throwable。        &lt;aop:after>: 最终通知。相当于 try/catch 中的 finally，抛出异常也会执行。方法执行后执行，优先级高于环绕（后）通知    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.kuukokawaii.aop.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myBefore<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAfterReturning<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>returning<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAround<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAfterThrowing<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>throwable<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAfter<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="基于注解配置"><a href="#基于注解配置" class="headerlink" title="基于注解配置"></a>基于注解配置</h3><p>@Aspect 用于声明切面类。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                            https://www.springframework.org/schema/beans/spring-beans.xsd                            http://www.springframework.org/schema/context                            https://www.springframework.org/schema/context/spring-context.xsd                            http://www.springframework.org/schema/aop                            https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 包扫描 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.aop<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- aop 注解扫描，自动代理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    * @Author 喵粮都输光了    * @Date 2019/9/2 15:47    * @Description 切面类。    */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 声明公共切入点     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.kuukokawaii.aop.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">myPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 前置通知。     * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"myPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知。"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后置通知。     * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。     * @param returning 用于获取返回值。     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myPointcut()"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"returning"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">myAfterReturning</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Object returning<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知。"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，返回值: "</span> <span class="token operator">+</span> returning<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 环绕通知。     * @param proceedingJoinPoint 连接点     * @return 返回目标方法。     * @throws Throwable 方法执行异常。     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"myPointcut()"</span><span class="token punctuation">)</span>    Object <span class="token function">myAround</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 前</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 手动执行目标方法。</span>        Object obj <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 后</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 抛出异常通知。     * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myPointcut()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"throwable"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">myAfterThrowing</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抛出异常通知。"</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 最终通知。     * @param joinPoint 用于描述连接点（目标方法），用于获得当前目标方法的方法名等。     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"myPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知。"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(四):bean</title>
      <link href="/posts/407eaf5e/"/>
      <url>/posts/407eaf5e/</url>
      
        <content type="html"><![CDATA[<h2 id="实例化方式"><a href="#实例化方式" class="headerlink" title="实例化方式"></a>实例化方式</h2><p>bean 有3种实例化的方式: 默认构造、静态工厂和实例化工厂。</p><h3 id="默认构造"><a href="#默认构造" class="headerlink" title="默认构造"></a>默认构造</h3><p>通过<code>&lt;bean id="" class="要装配的实现类全限定类名" /&gt;</code>的方式装配 bean 便是自动使用了默认构造。</p><h3 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h3><p>静态工厂用于生成实例对象，且所有的方法必须是静态的。常用于 Spring 整合其他框架(工具)。通过<code>&lt;bean id="" class="要整合的工厂实现类全限定类名" factory-method="静态方法名" /&gt;</code>进行 bean 的装配。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/1 14:08 * @Description 自定义 bean 静态工厂 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStaticBeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建 StaticFactoryService 实例。     * @return 返回 StaticFactoryService 实例对象。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> StaticFactoryService <span class="token function">createService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// StaticFactoryService 中有一个 test 方法</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StaticFactoryServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        将静态工厂创建的实例交予 Spring 管理。        class: 输入静态工厂的全限定类名。        factory-method: 输入需要获取的静态工厂中所存在的静态方法名。     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>staticFactoryService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.di.MyStaticBeanFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 09/01/2019 * @Description StaticFactoryServiceImpl test */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticFactoryServiceImplTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// spring 配置文件路径。</span>        String xmlPath <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// spring 工厂（spring 容器）。</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从工厂内获取对象。</span>        StaticFactoryService staticFactoryService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"staticFactoryService"</span><span class="token punctuation">,</span> StaticFactoryService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        staticFactoryService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="实例化工厂"><a href="#实例化工厂" class="headerlink" title="实例化工厂"></a>实例化工厂</h3><p>实例化工厂通过工厂实例对象创建对象，且所有的方法都是非静态的。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 喵粮都输光了 * @Date 2019/9/1 14:08 * @Description 自定义 bean 实例工厂 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建 FactoryService 实例。     * @return 返回 FactoryService 实例对象。     */</span>    <span class="token keyword">public</span> FactoryService <span class="token function">createService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FactoryServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--         1.将自定义实例工厂交予 Spring 管理。           class: 输入实例工厂的全限定类名。         2.通过实例工厂配置 bean。           factory-bean: 配置好的实例工厂的 bean 的 id。           factory-method: 输入需要获取的实例工厂中所存在的方法名。     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myBeanFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.di.MyBeanFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>factoryService<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myBeanFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>Spring 的作用域用于确定创建的 bean 的实例个数。通过 XML 配置 bean 时，添加<code>scope</code>属性进行配置(如<code>&lt;bean id="" class="" scope="" /&gt;</code>)。常用的<code>scope</code>属性有<code>singleton</code>(单例)和<code>prototype</code>(多例)。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>可以将 bean 的生命周期划分为11个部分，具体如下图所示:<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/LifeCycle.jpg"><br>图中各部分效用如下:</p><ol><li>Instantiate: 初始化 bean，调用构造函数创建实例。</li><li>Populate properties: 封装属性，即进行 DI 操作。</li><li>BeanNameAware's setBeanName(): 调用 BeanNameAware 接口的 setBeanName 方法获取 BeanName。</li><li>BeanFactoryAware's setBeanFactory(): 调用 BeanFactoryAware 接口的 setBeanFactory 方法获取 BeanFactory。</li><li>Pre-initialization BeanPostProcessors: 如果存在类实现 BeanPostProcessor，则执行 postProcessBeforeInitialization 方法进行预处理。</li><li>InitializingBean's afterPropertiesSet(): 如果 bean 实现 InitializingBean，则执行 afterPropertiesSet 方法。</li><li>Call custom init-method: 调用自定义的 init-method 方法。</li><li>Post-initialization BeanPostProcessors: 如果存在类实现 BeanPostProcessor，执行 postProcessAfterInitialization 方法进行后处理。</li><li>Bean is ready to use / Container is Shutdown: 执行业务处理。</li><li>DisposableBean's destroy(): 如果 bean 实现 DisposableBean，则执行 destroy 方法。</li><li>Call custom destroy-method: 调用自定义的 destroy-method。</li></ol><p>bean 生命周期常用操作:</p><ul><li><p>初始化和摧毁<br>  如果需要进行初始化或摧毁的操作，可以通过使用<code>init-method</code>和<code>destroy-method</code>属性进行设置，其中destroy-method 只有在 <code>scope=singleton</code> 的时候才会生效。(如<code>&lt;bean id="" class="" init-method="" destory-method=""/&gt;</code>)。</p><blockquote><p>1.在 beans 标签下的<code>default-init-method</code>可以设置所有默认的属性。<br>2.优先级: InitializationBean 和 DisposableBean &gt; init-method 和 destroy-method &gt; default。</p></blockquote></li><li><p>后处理<br>  在 Spring 中实现 BeanPostProcessor 接口，并将实现类提供给 Spring 容器，Spring 容器就会自动的执行该实现类。在初始化方法前执行 before()，在初始化方法后执行 after()。<br>  代码演示如下:</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/1 16:13   * @Description 后处理 bean 实现类   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> bean<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> bean<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/1 16:16   * @Description BeanPostProcessorService 接口类   */</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanPostProcessorService</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 测试输出语句       */</span>      <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 2019/9/1 16:16   * @Description BeanPostProcessorService 实现类   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanPostProcessorServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessorService</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试方法内容。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"摧毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                             https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beanPostProcessorService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.di.BeanPostProcessorServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.di.MyBeanPostProcessor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @Author 喵粮都输光了   * @Date 09/01/2019   * @Description BeanPostProcessorServiceImpl test   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanPostProcessorServiceImplTest</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Test</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// spring 配置文件路径。</span>          String xmlPath <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// spring 工厂（spring 容器）。</span>          ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 从工厂内获取对象。</span>          BeanPostProcessorService beanPostProcessorService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"beanPostProcessorService"</span><span class="token punctuation">,</span>              BeanPostProcessorService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          beanPostProcessorService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          applicationContext<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>  输出结果如下:<br>  <img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/Bean_PrintResult.png"></p></li></ul><h2 id="属性依赖注入"><a href="#属性依赖注入" class="headerlink" title="属性依赖注入"></a>属性依赖注入</h2><h3 id="setter-方法"><a href="#setter-方法" class="headerlink" title="setter 方法"></a>setter 方法</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        setter 方法注入:         &lt;bean id="" class="">            // 普通数据:             &lt;property name="" value="值"/>            // 引用数据:             &lt;property name="" ref="另一个 bean"/>        &lt;/bean>    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.setter.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>老大<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.setter.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>companyAddress<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>学校地址<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>homeAddress<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>家庭地址<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="P-命名空间"><a href="#P-命名空间" class="headerlink" title="P 命名空间"></a>P 命名空间</h3><p>对 setter 方法注入进行简化，替换<code>&lt;property name="属性名"/&gt;</code>为<code>&lt;bean p:属性名="值" p:属性名-ref="引用值"</code>。P 命名空间需要在 xml 头部增加<code>xmlns:p="http://www.springframework.org/schema/p"</code>。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.setter.Person<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>老大<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>address-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.setter.Address<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>companyAddress</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>学校地址<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>homeAddress</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>家庭地址<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h3><p>对<code>&lt;property&gt;</code>进行统一编程，所有内容都使用<code>value</code>(如<code>&lt;property name="" value="#{表达式}"</code>)。<br>表达式详情参考: <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/spring-framework-reference/core.html#expressions" target="_blank" rel="noopener">Spring Expression Language</a></p><h3 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h3><p>集合的注入就是给<code>&lt;property&gt;</code>添加子标签。数组使用<code>&lt;array&gt;</code>、List 使用<code>&lt;list&gt;</code>、Set 使用<code>&lt;set&gt;</code>、Map 使用<code>&lt;map&gt;</code>、Properties使用<code>&lt;props&gt;</code>。其中 Map 和 Properties 存放键值对时分别需要使用<code>&lt;entry&gt;</code>和<code>&lt;prop&gt;</code>描述。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collData<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.setter.CollData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrayData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>array1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>array2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>list1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>list2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>setData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>set1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>set2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mk1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mv1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mk2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mv2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>propsData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pk1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>pv1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pk2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>pv2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="基于注解配置"><a href="#基于注解配置" class="headerlink" title="基于注解配置"></a>基于注解配置</h2><ul><li>注解就是一个使用了<code>@注解名称</code>的类，比 XML 使用起来更方便。使用注解前需要配置 Spring 包扫描，扫描含有注解的类。</li><li>在 web 开发中，常用3个 @Component 注解衍生注解:<ol><li>@Repository: 用于 Dao 层。</li><li>@Service: 用于 Service 层。</li><li>@Controller: 用于 Controller 层。</li></ol></li><li>依赖注入(可以给私有字段设置，也可以给 setter 方法设置)。<ol><li>普通值: @Value(“需要设置的值”)</li><li>引用值:<ol><li>按照类型注入: @Autowired。</li><li>按照名称注入1: @Autowired 和 @Qualifier(“名称”)联合使用。</li><li>按照名称注入2: @Resource(“名称”)。</li></ol></li></ol></li><li>生命周期:<ol><li>初始化: @PostConstruct</li><li>销毁: @PreDestroy</li></ol></li><li>作用域: @Scope(“属性”)。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(三):DI</title>
      <link href="/posts/dc21cfa6/"/>
      <url>/posts/dc21cfa6/</url>
      
        <content type="html"><![CDATA[<h2 id="DI-简介"><a href="#DI-简介" class="headerlink" title="DI 简介"></a>DI 简介</h2><p>在依赖注入(Dependency Injection，DI)中，如果对象 A 中使用到对象 B，则称对象 A 依赖于对象 B；而当你创建对象 A 时，由于对象 A 依赖于对象 B 需要额外创建一个对象 B，并调用对象 A 的 set 方法进行对象 B 的实例设置，这便称为注入。</p><h2 id="使用到的-Jar-包"><a href="#使用到的-Jar-包" class="headerlink" title="使用到的 Jar 包"></a>使用到的 Jar 包</h2><ul><li>spring-beans.jar</li><li>spring-context.jar</li><li>spring-core.jar</li><li>spring-expression.jar</li><li>commons-logging.jar</li><li>junit.jar</li><li>spring-test.jar</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><ol><li><p>创建 BookDao 接口和实现类。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/8/30 15:16  * @Description BookDao 接口类  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 增加书本      */</span>     <span class="token keyword">void</span> <span class="token function">insertBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/8/30 15:21  * @Description BookDao 实现类  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"书本添加成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>创建 BookService 接口和实现类。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/8/30 15:16  * @Description BookService 接口类  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 增加书本      */</span>     <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/8/30 15:16  * @Description BookService 实现类  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> BookDao bookDao<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBookDao</span><span class="token punctuation">(</span>BookDaoImpl bookDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>bookDao <span class="token operator">=</span> bookDao<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         bookDao<span class="token punctuation">.</span><span class="token function">insertBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>通过依赖注入获得 dao 和 service。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                         https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--         以下配置其实就执行了三个步骤:          1.BookService bookService = new BookServiceImpl();         2.BookDao bookDao = new BookDaoImpl();         3.bookService.setBookDao(bookDao);         其中&lt;property name="" ref=""/>就相当于上述的 set 方法。     --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.di.BookServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.di.BookDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 08/30/2019  * @Description BookServiceImpl test  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImplTest</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Test</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// spring 配置文件路径。</span>         String xmlPath <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// spring 工厂（spring 容器）。</span>         ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 从工厂内获取对象。</span>         BookService bookService <span class="token operator">=</span> <span class="token punctuation">(</span>BookService<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"bookService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         bookService<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(二):IoC</title>
      <link href="/posts/eea4858/"/>
      <url>/posts/eea4858/</url>
      
        <content type="html"><![CDATA[<h2 id="IoC-简介"><a href="#IoC-简介" class="headerlink" title="IoC 简介"></a>IoC 简介</h2><p>控制反转(Inversion of Control，IoC)可以理解为借助于“第三方”实现对象之间的解耦。Spring IoC 通过使用 IoC 容器调控系统内所有的对象，使得对象之间没有了耦合关系，而 IoC 容器成为了整个项目的核心部分，当 IoC 容器失效时，所有对象彼此之间都会失去联系。</p><h2 id="使用到的-Jar-包"><a href="#使用到的-Jar-包" class="headerlink" title="使用到的 Jar 包"></a>使用到的 Jar 包</h2><ul><li>spring-beans.jar</li><li>spring-context.jar</li><li>spring-core.jar</li><li>spring-expression.jar</li><li>commons-logging.jar</li><li>junit.jar</li><li>spring-test.jar</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><ol><li><p>创建 UserService 接口和实现类。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/8/29 18:05  * @Description UserService 接口类  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**      * 增加用户      */</span>     <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/8/29 18:06  * @Description UserService 实现类  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加用户。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>从 Spring 容器中获得实例对象(Spring配置文件常用 ApplicationContext 命名)。</p><blockquote><p>需要注意的是用 spring 进行 Junit 测试时，需要引入 spring-test.jar，并在测试类上加入 @RunWith 和 @ContextConfiguration 的注解配置。如果还有错误可以尝试更新 Junit.jar 的版本。</p></blockquote><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                         https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 需要配置的 bean --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuukokawaii.ioc.UserServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * @Author 喵粮都输光了  * @Date 2019/8/29 18:10  * @Description UserServiceImpl 测试  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImplTest</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Test</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// spring 配置文件路径。</span>         String xmlPath <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// spring 工厂（spring 容器）。</span>         ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 从工厂内获取对象。</span>         UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(一):简介</title>
      <link href="/posts/477beeec/"/>
      <url>/posts/477beeec/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-优点"><a href="#Spring-优点" class="headerlink" title="Spring 优点"></a>Spring 优点</h2><ul><li><strong>方便解耦，简化开发</strong><br>  可以将所有对象的创建和依赖关系的维护交给 Spring 管理。</li><li><strong>AOP 编程的支持</strong><br>  Spring 提供面向切面的编程，可以方便的实现对程序进行权限拦截、运行监控等功能。</li><li><strong>声明式事务的支持</strong><br>  无需手动编程，只需要通过配置就可以完成对事物的管理。</li><li><strong>方便程序的测试</strong><br>  Spring 支持 Junit，可以通过注解方便的测试 Spring 程序。</li><li><strong>方便集成各种优秀框架</strong><br>  Spring 内部提供了对各种优秀框架(Struts、Hibernate、MyBatis、Quartz 等)的直接支持。</li><li><strong>降低 JavaEE API 的使用难度</strong><br>  Spring 封装了 JavaEE 开发中一些非常难用的 API(JDBC、JavaMail、远程调用等)，降低了这些 API 的应用难度。</li></ul><h2 id="Spring-体系结构"><a href="#Spring-体系结构" class="headerlink" title="Spring 体系结构"></a>Spring 体系结构</h2><p>Spring 框架是一个分层架构，它将一系列的功能要素分为 Data Access/Integration，Web，AOP，Core Container，Instrumentation 和 Test 等几大模块。<br><img src="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/medias/loading.gif" alt="" data-original="https://cdn.jsdelivr.net/gh/nana-hana/blog.source@latest/post_img/SpringArchitecture.jpg"></p><h3 id="Core-Container"><a href="#Core-Container" class="headerlink" title="Core Container"></a>Core Container</h3><ul><li>Beans: 用于管理 Bean。</li><li>Core: Spring 的核心，主要用于实现反向控制 IoC(Inversion of Control)与依赖注入 DI(Dependency Injection)、Bean 配置以及加载。</li><li>Context: 上下文，相当于配置文件。</li><li>Expression Language: 即 SpEL，是 Spring 的一种表达式，用来动态的获取值、对象等。</li></ul><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><ul><li>AOP: 切面编程(Aspect Oriented Programming)。</li><li>Aspects: 一个切面编程的框架。</li></ul><h3 id="Data-Access-Integration"><a href="#Data-Access-Integration" class="headerlink" title="Data Access/Integration"></a>Data Access/Integration</h3><ul><li>JDBC: 用于链接数据库，向数据库发送 sql 语句。</li><li>ORM: 对象关系映射，用于整合持久层框架（Mybatis，Hibernate 等）。</li><li>OXM: 即 O/X 映射器，用于将 Java 对象和 XML 文档之间进行互相转换。</li><li>JMS: 即 Java消息服务，用于两个应用程序之间传送消息，进行异步通信。</li><li>Transactions: 事务管理。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
